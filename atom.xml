<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大鹏的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangyapeng0222.github.io/person_blogs/"/>
  <updated>2018-09-19T07:59:39.646Z</updated>
  <id>https://zhangyapeng0222.github.io/person_blogs/</id>
  
  <author>
    <name>dapeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端设计模式</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/17/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/17/前端设计模式/</id>
    <published>2018-09-17T06:31:57.000Z</published>
    <updated>2018-09-19T07:59:39.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li><p>类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类 即 模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象（实例）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">let</span> zhang=<span class="keyword">new</span> People(<span class="string">'zhang'</span>,<span class="number">20</span>)</span><br><span class="line">zhang.eat()</span><br><span class="line">zhang.speak()</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">let</span> wang=<span class="keyword">new</span> People(<span class="string">'wang'</span>,<span class="number">21</span>)</span><br><span class="line">wang.eat()</span><br><span class="line">wang.speak()</span><br></pre></td></tr></table></figure></li></ul><p>###</p><ul><li>继承<ul><li>子类继承父类</li><li>父类是公共的，不仅仅服务于单个子类</li><li>继承可以将公共方法抽离出来，提高复用，减少冗余<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,number)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age)</span><br><span class="line">        <span class="keyword">this</span>.number=number</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">let</span> xiaoming=<span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>,<span class="number">10</span>,<span class="string">'A1'</span>)</span><br><span class="line">xiaoming.eat()</span><br></pre></td></tr></table></figure><ul><li><p>封装</p><ul><li>数据的权限和保密</li><li>减少耦合，不该外露的不外露</li><li>利用数据、接口的权限管理</li><li>3个属性<ul><li>public 完全开放</li><li>protected 对子类开放</li><li>private 对自己开放</li></ul></li><li>es6不支持，一般认为_开头的属性是private，可以用typescipt 来演示<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> People&#123;</span><br><span class="line">    name</span><br><span class="line">    age</span><br><span class="line">    <span class="keyword">protected</span> weight <span class="comment">//定义 protected 属性 受保护的属性，只能自己访问和子类访问</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age</span><br><span class="line">        <span class="keyword">this</span>.weight=<span class="number">120</span></span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        alert(<span class="string">`MY name is <span class="subst">$&#123;this.name&#125;</span>,age <span class="subst">$&#123;this.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> People&#123;</span><br><span class="line">    <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> girlfriend <span class="comment">//定义 private 属性</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name,age,<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age)</span><br><span class="line">        <span class="keyword">this</span>.number=<span class="built_in">number</span></span><br><span class="line">        <span class="keyword">this</span>.girlfriend=<span class="string">'xiaoli'</span></span><br><span class="line">    &#125;</span><br><span class="line">    study()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> study`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    getWeight()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;this.weight&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">let</span> xiaoming=<span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>,<span class="number">10</span>,<span class="string">'A1'</span>)</span><br><span class="line">xiaoming.getWeight()</span><br><span class="line"><span class="comment">//console.log(xiaoming.girlfriend) //注意，编译会报错，直接编译不通过</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>多态</p><ul><li>同一接口不同实现</li><li>js应用极少</li><li>需要结合java等语言的接口、重写、重载等功能</li><li>保持子类的开放性和灵活性</li><li>面向接口编程</li><li>（js引用极少，了解即可）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    saysomething()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am A'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am B'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a= <span class="keyword">new</span> A(<span class="string">'a'</span>)</span><br><span class="line">a.saySomething()</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> B(<span class="string">'b)</span></span><br><span class="line"><span class="string">b.saySomething()</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="为何使用面向对象"><a href="#为何使用面向对象" class="headerlink" title="为何使用面向对象"></a>为何使用面向对象</h3><ul><li>程序执行：顺序、判断、循环—结构化</li><li>面向对象– 结构化</li><li>对于计算机，结构化的才是最简单</li><li>编程应该 简单 &amp; 抽象</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><ul><li>Unified Modeling Language 统一建模语言</li><li>类图，UML包含很多种图，和本课相关的是类图</li><li>关系，主要讲解泛化和关联</li><li>演示 ，代码和类图结合</li></ul><h3 id="画图工具"><a href="#画图工具" class="headerlink" title="画图工具"></a>画图工具</h3><ul><li>MS Office visio</li><li><a href="https://www.processon.com" target="_blank" rel="noopener">https://www.processon.com</a><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="http://b.zhangyapeng.club/类图.png" alt="类图"><br><img src="http://b.zhangyapeng.club/类图实例.png" alt="类图实例"></li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li>泛化，表示继承</li><li>关联，表示引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">        <span class="keyword">this</span>.house=house</span><br><span class="line">    &#125;</span><br><span class="line">    saysomething()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,house)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am A'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,house)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am B'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aHouse=<span class="keyword">new</span> House(<span class="string">'beijing'</span>)</span><br><span class="line"><span class="keyword">let</span> a= <span class="keyword">new</span> A(<span class="string">'a'</span>,aHouse)</span><br><span class="line">a.saySomething()</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> B(<span class="string">'b)</span></span><br><span class="line"><span class="string">b.saySomething()</span></span><br></pre></td></tr></table></figure><p><img src="http://b.zhangyapeng.club/类图例子.png" alt="类图例子"></p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="何为设计"><a href="#何为设计" class="headerlink" title="何为设计"></a>何为设计</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><ul><li>即按照哪一种思路或者标准来实现功能</li><li>功能相同，可以有不同设计方案来实现</li><li>伴随着需求增加，设计的作用才能体现出来</li></ul><h4 id="《UNIX-LINUX设计哲学》设计准则"><a href="#《UNIX-LINUX设计哲学》设计准则" class="headerlink" title="《UNIX/LINUX设计哲学》设计准则"></a>《UNIX/LINUX设计哲学》设计准则</h4><ol><li>小即是美</li><li>让每个程序只做好一件事</li><li>快速建立原型</li><li>舍弃高效率而取可移植性</li><li>采用纯文本来存储数据</li><li>充分利用软件的杠杆效应(软件复用)</li><li>使用shell脚本来提高杠杆效应和可移植性</li><li>避免强制性的用户界面</li><li>让每个程序都称为过滤器</li><li>小准则：允许用户定制环境</li><li>小准则：尽量使用操作系统内核小而轻量化</li><li>小准则：使用小写字母并尽量简写</li><li>小准则：沉默是金</li><li>小准则：各部分之和大于整体</li><li>小准则：寻求90%的解决方案</li></ol><h4 id="演示：沉默是金-让每个程序成为过滤器"><a href="#演示：沉默是金-让每个程序成为过滤器" class="headerlink" title="演示：沉默是金+让每个程序成为过滤器"></a>演示：沉默是金+让每个程序成为过滤器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让每个程序成为过滤器</span></span><br><span class="line">ls | grep *.json | grep <span class="string">'package'</span></span><br></pre></td></tr></table></figure><h3 id="S-O-L-I-D-五大设计原则"><a href="#S-O-L-I-D-五大设计原则" class="headerlink" title="S O L I D 五大设计原则"></a>S O L I D 五大设计原则</h3><ul><li><strong>S</strong>: 单一职责原则</li><li><strong>O</strong>: 开放封闭原则</li><li><strong>L</strong>: 李氏置换原则</li><li><strong>I</strong>: 接口独立原则</li><li><strong>D</strong>: 依赖倒置原则</li></ul><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul><h4 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h4><ul><li>对<strong>扩展</strong>开放，对<strong>修改</strong>封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li><li>这是软件设计的终极目标</li></ul><h4 id="李氏置换原则"><a href="#李氏置换原则" class="headerlink" title="李氏置换原则"></a>李氏置换原则</h4><ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li><li>js使用较少（弱类型 &amp;&amp; 继承使用较少）</li></ul><h4 id="接口独立原则"><a href="#接口独立原则" class="headerlink" title="接口独立原则"></a>接口独立原则</h4><ul><li>保持接口的单一独立，避免出现“胖接口”</li><li>JS中没有接口（typescript例外）,使用较少</li><li>类似与单一职责原则，这里更关注接口</li></ul><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现</li><li>JS中使用较少(没有接口 &amp; 弱类型)</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>SO 体现较多，详细介绍</li><li>LID体现较少，但是要了解其用意</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一职责 开放封闭原则</span></span><br><span class="line"><span class="comment">// 加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promise=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> img=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">        img.onlad=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        img.src=src</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> src=<span class="string">'http://'</span></span><br><span class="line"><span class="keyword">let</span> result=loadImg(src)</span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width)</span><br><span class="line">    <span class="comment">//part1 </span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//part2</span></span><br><span class="line">    <span class="built_in">console</span>.log(img.height)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ex)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="从设计到模式"><a href="#从设计到模式" class="headerlink" title="从设计到模式"></a>从设计到模式</h2><ul><li>设计和模式分开</li><li>从设计到模式</li></ul><h3 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h3><ul><li>创建型<ul><li>工厂模式(工厂方法模式、抽象工厂模式、建造者模式)</li><li>单例模式</li><li>原型模式</li></ul></li><li>结构型<ul><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul></li><li>行为型<ul><li>策略模式</li><li>模板方法模式</li><li><strong>观察者模式</strong></li><li><strong>迭代器模式</strong></li><li>职责连模式</li><li>命令模式</li><li>备忘录模式</li><li><strong>状态模式</strong></li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  打车时，可以打专车或者快车。 任何车都有车牌号和名称</span></span><br><span class="line"><span class="comment"> *  不同车价格不同，快车每公里1元，专车每公里2元</span></span><br><span class="line"><span class="comment"> *  行程开始时，显示车辆信息</span></span><br><span class="line"><span class="comment"> *  行程结束时，显示打车金额（假定行程就5公里）</span></span><br><span class="line"><span class="comment"> *  画出UML类图</span></span><br><span class="line"><span class="comment"> *  用ES6语法写出该示例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(number,name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.number=number</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(number,name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(number,name)</span><br><span class="line">        <span class="keyword">this</span>.price=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(number,name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(number,name)</span><br><span class="line">        <span class="keyword">this</span>.price=<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(car)&#123;</span><br><span class="line">        <span class="keyword">this</span>.car=car</span><br><span class="line">    &#125;</span><br><span class="line">    start()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.car.name,<span class="keyword">this</span>.car.number)</span><br><span class="line">    &#125;</span><br><span class="line">    end()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.car.price*<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car=<span class="keyword">new</span> KCar(<span class="number">100</span>,<span class="string">'桑'</span>)</span><br><span class="line"><span class="keyword">let</span> trip=<span class="keyword">new</span> Trip(car)</span><br><span class="line">trip.start()</span><br><span class="line">trip.end()</span><br></pre></td></tr></table></figure><p><img src="http://b.zhangyapeng.club/前端设计模式_类图_2018918155045.png" alt="前端设计模式_类图_2018918155045"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  某停车场，分3层，每层100车位</span></span><br><span class="line"><span class="comment"> *  每个车位都能监控到车辆的驶入和离开</span></span><br><span class="line"><span class="comment"> *  车辆进入前，显示每层的空余车位数量</span></span><br><span class="line"><span class="comment"> *  车辆进入摄像头可识别车牌号和时间</span></span><br><span class="line"><span class="comment"> *  车辆出来时，出口显示器显示车牌号和停车时长</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  画出UML类图</span></span><br><span class="line"><span class="comment"> *  1. 多少个类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(num)&#123;</span><br><span class="line">        <span class="keyword">this</span>.num=num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//摄像头</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Camera</span></span>&#123;</span><br><span class="line">    shot(car)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            num:car.num,</span><br><span class="line">            inTime:<span class="built_in">Date</span>.now()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span>&#123;</span><br><span class="line">    show(car,inTime)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now()-inTime)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Park</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(floors)&#123;</span><br><span class="line">        <span class="keyword">this</span>.floors=floors || []</span><br><span class="line">        <span class="keyword">this</span>.camera=<span class="keyword">new</span> Camera()</span><br><span class="line">        <span class="keyword">this</span>.screen=<span class="keyword">new</span> Screen()</span><br><span class="line">        <span class="keyword">this</span>.carList=&#123;&#125;<span class="comment">//存储摄像头拍摄返回信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">in</span>(car)&#123;</span><br><span class="line">        <span class="comment">//通过摄像头获取信息</span></span><br><span class="line">        <span class="keyword">const</span> info=<span class="keyword">this</span>.camera.shot(car)</span><br><span class="line">        <span class="comment">//停到某个停车位</span></span><br><span class="line">        <span class="keyword">const</span> i=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100</span>%<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">const</span> place=<span class="keyword">this</span>.floors[<span class="number">0</span>].places[i]</span><br><span class="line">        place.in()</span><br><span class="line">        info.place=place</span><br><span class="line">        <span class="comment">//记录信息</span></span><br><span class="line">        <span class="keyword">this</span>.carList[car.num]=info</span><br><span class="line">    &#125;</span><br><span class="line">    out(car)&#123;</span><br><span class="line">        <span class="comment">//获取信息</span></span><br><span class="line">        <span class="keyword">const</span> info=<span class="keyword">this</span>.carList[car.num]</span><br><span class="line">        <span class="comment">//将停车为清空</span></span><br><span class="line">        <span class="keyword">const</span> place=info.place</span><br><span class="line">        place.out()</span><br><span class="line">        <span class="comment">// 显示时间</span></span><br><span class="line">        <span class="keyword">this</span>.screen.show(car,info.inTime)</span><br><span class="line">        <span class="comment">//清空记录</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.carList[car.num]</span><br><span class="line">    &#125;</span><br><span class="line">    emptyPlaceNum()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.floors.map(<span class="function">(<span class="params">floor</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;floor.index&#125;</span>层还有<span class="subst">$&#123;floor.emptyPlaceNum()&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">           ).join(<span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//层</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Floor</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(index,places)&#123;</span><br><span class="line">        <span class="keyword">this</span>.index=index</span><br><span class="line">        <span class="keyword">this</span>.places=places || []</span><br><span class="line">    &#125;</span><br><span class="line">    emptyPlaceNum()&#123;</span><br><span class="line">        <span class="keyword">let</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.places.forEach(<span class="function"><span class="params">p</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.empty)&#123;</span><br><span class="line">                num=num+<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//车位</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.empty=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">in</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.empty=<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    out()&#123;</span><br><span class="line">        <span class="keyword">this</span>.empty=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化停车场</span></span><br><span class="line"><span class="keyword">const</span> floors=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> places=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++ )&#123;</span><br><span class="line">        places[j]=<span class="keyword">new</span> Place()</span><br><span class="line">    &#125;</span><br><span class="line">    floors[i]=<span class="keyword">new</span> Floor(i+<span class="number">1</span>,places)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> park=<span class="keyword">new</span> Park(floors)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化车辆</span></span><br><span class="line"><span class="keyword">const</span> car1=<span class="keyword">new</span> Car(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> car2=<span class="keyword">new</span> Car(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">const</span> car3=<span class="keyword">new</span> Car(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第一辆车进入'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(park.emptyPlaceNum())</span><br><span class="line">park.in(car1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第二俩进入'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(park.emptyPlaceNum())</span><br><span class="line">park.in(car2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第一俩离开'</span>)</span><br><span class="line">park.out(car1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第二俩离开'</span>)</span><br><span class="line">park.out(car2)</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>将new操作单独封装</li><li>遇到new时，就要考虑是否该使用工厂模式</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>你去购买汉堡，直接点餐、取餐，不会自己亲手做</li><li>商店要<strong>封装</strong>做汉堡的工作，做好直接给买者</li></ul><h4 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_工厂模式_2018919102219.png" alt="前端设计模式_工厂模式_2018919102219"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span>&#123;</span><br><span class="line">    create(name)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Product(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"int1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fun1()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"fun1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fun2()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"fun2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> c1=<span class="keyword">new</span> Creator()</span><br><span class="line"><span class="keyword">let</span> p=c1.create(<span class="string">'p1'</span>)</span><br><span class="line">p.init()</span><br><span class="line">p.fun1()</span><br></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul><li>jQuery-$(“div”)<ul><li>$(“div”)和new $(“div”) 有何区别？</li><li>书写麻烦，jQuery 的链式操作将成为噩梦</li><li>一旦jQuery名字变化，将是灾难的</li></ul></li><li><p>React.createElement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vnode</span>(<span class="title">tag</span>,<span class="title">attrs</span>,<span class="title">children</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...省略内部代码</span></span><br><span class="line">&#125;</span><br><span class="line">React.createElement=<span class="function"><span class="keyword">function</span>(<span class="params">tag,attrs,children</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 可以做验证</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vnode(tag,attrs,children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vue异步组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"async-example"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">            template:<span class="string">"&lt;div&gt;I am async!&lt;/div&gt;"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>构造函数和创建者分离</li><li>符合开放封闭原则</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ul><li>系统中被唯一使用</li><li>一个类只有一个实例</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><ul><li>登录框</li><li>购物车</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span></span>&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"login)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//实例上没有getInstance方法</span></span><br><span class="line"><span class="string">SingleObject.getInstance=(function()&#123;</span></span><br><span class="line"><span class="string">let intance;</span></span><br><span class="line"><span class="string">return function()&#123;</span></span><br><span class="line"><span class="string">    if(!intance)&#123;</span></span><br><span class="line"><span class="string">        intance=new SingleObject()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return instance</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//测试</span></span><br><span class="line"><span class="string">let obj1=SingleObject.getInstance()</span></span><br><span class="line"><span class="string">obj1.login()</span></span><br><span class="line"><span class="string">let obj2=SingleObject.getInstance()</span></span><br><span class="line"><span class="string">obj2.login()</span></span><br><span class="line"><span class="string">console.log('obj1===obj2',obj1===obj2)</span></span><br></pre></td></tr></table></figure><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h4><ul><li><p>jQuery只有一个$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery只有一个$</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.jQuery!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.jQuery</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟登录框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="string">'hide'</span></span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state===<span class="string">'show'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"已经显示"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="string">'show'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'显示'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    hide()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state===<span class="string">'hide'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"已经显示"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="string">'hide'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'隐藏'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LoginForm.getInstance=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!intance)&#123;</span><br><span class="line">            intance=<span class="keyword">new</span> LoginForm()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> login1=LoginForm.getInstance()</span><br><span class="line">login1.show()</span><br><span class="line"><span class="keyword">let</span> login2=LoginForm.getInstance()</span><br><span class="line">login1.hide()</span><br></pre></td></tr></table></figure></li><li><p>其他</p><ul><li>购物车(和登录框类似)</li><li>vuex和redux中的store</li></ul></li></ul><h4 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>符合单一职责原则，只实例化唯一的对象</li><li>没发具体开放封闭原则，但是绝对不违反开放封闭原则</li></ul><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><ul><li>旧接口格式和使用者不兼容</li><li>中间加一个适配转换接口</li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_转换器_2018919143435.png" alt="前端设计模式_转换器_2018919143435"></p><h4 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_设配器UML_201891914363.png" alt="前端设计模式_设配器UML_201891914363"></p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span>&#123;</span><br><span class="line">    specificRequest()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'德国标准插头'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee=<span class="keyword">new</span> Adaptee()</span><br><span class="line">    &#125;</span><br><span class="line">    requrest()&#123;</span><br><span class="line">        <span class="keyword">let</span> info=<span class="keyword">this</span>.adaptee.specificRequest()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;info&#125;</span>-转换器-中国标准插头`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> target=<span class="keyword">new</span> Target()</span><br><span class="line"><span class="keyword">let</span> res=target.request()</span><br></pre></td></tr></table></figure><h4 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h4><ul><li><p>封装旧接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己封装的ajax,使用方式如下</span></span><br><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">'/getDate'</span>,</span><br><span class="line">    type:<span class="string">"post"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        id:<span class="string">"123"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//但是因为历史原因，代码中全是：</span></span><br><span class="line"><span class="comment">//$.ajax(&#123;...&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//做一层适配器</span></span><br><span class="line"><span class="keyword">var</span> $=&#123;</span><br><span class="line">    ajax:<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ajax(options)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vue computed</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#exaple"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:<span class="string">"hello"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        reversedMessage()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="设计原则验证-1"><a href="#设计原则验证-1" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>将旧接口和使用者进行分离</li><li>符合开放封闭原则</li></ul><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><ul><li>为对象添加新功能</li><li>不改变其原有的结构和功能</li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_装饰器模式_201891915151.png" alt="前端设计模式_装饰器模式_201891915151"><br><strong>手机壳</strong></p><h4 id="UML类图-3"><a href="#UML类图-3" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_装饰器UML_20189191541.png" alt="前端设计模式_装饰器UML_20189191541"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cicle</span></span>&#123;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"画一个圆形"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(cicle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.cicle=cicle</span><br><span class="line">    &#125;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="keyword">this</span>.cicle.draw()</span><br><span class="line">        <span class="keyword">this</span>.setRedBorder(<span class="keyword">this</span>.cicle)</span><br><span class="line">    &#125;</span><br><span class="line">    setRedBorder(cicle)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'设着红色边框'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> cicle=<span class="keyword">new</span> Cicle()</span><br><span class="line">cicle.draw()</span><br><span class="line"><span class="keyword">let</span> dec=<span class="keyword">new</span> Decorator()</span><br><span class="line">dec.draw()</span><br></pre></td></tr></table></figure><h4 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h4><ul><li><p>es7装饰器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰类 </span></span><br><span class="line">@testDec</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    target.isDec=<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Demo.isDec)</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰类  加参数</span></span><br><span class="line">@testDec(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span> (<span class="params">isDec</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        target.isDec=isDec</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Demo.isDec)</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰类-mixin示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixins</span>(<span class="params">...list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(target.prototype,...list)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Foo=&#123;</span><br><span class="line">    foo()&#123;</span><br><span class="line">        alert(<span class="string">'foo'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixins(Foo)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj=<span class="keyword">new</span> MyClass();</span><br><span class="line">obj.foo()<span class="comment">//'foo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.first=<span class="string">'A'</span></span><br><span class="line">        <span class="keyword">this</span>.last=<span class="string">'B'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//装饰方法</span></span><br><span class="line">    @readonly</span><br><span class="line">    name()&#123;<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.last&#125;</span>`</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p= <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(p.name())</span><br><span class="line"><span class="comment">//p.name=function()&#123;&#125; //这里会报错，因为name是只读的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//默认是</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//     value :specifiedFunction,</span></span><br><span class="line">    <span class="comment">//     enumerable:false,</span></span><br><span class="line">    <span class="comment">//     configurable:true,</span></span><br><span class="line">    <span class="comment">//     writable:true</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    descriptor.writable=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> descriptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>core-decorators</p><ul><li>第三方开源lib</li><li>提供常用的装饰器</li></ul></li></ul><h4 id="设计原则验证-2"><a href="#设计原则验证-2" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>将现有对象和装饰器进行分离，两者独立存在</li><li>符合开放封闭原则</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;什么是面向对象&quot;&gt;&lt;a href=&quot;#什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="架构" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/06/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/06/前端性能优化/</id>
    <published>2018-09-06T08:46:52.000Z</published>
    <updated>2018-09-18T02:01:09.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><ol><li>网络层面</li><li>构建层面</li><li>服务端层面</li><li>浏览器渲染层面</li></ol><p>深入理解<strong>http请求的过程</strong>是前端性能优化的核心</p><h3 id="资源的合并和压缩"><a href="#资源的合并和压缩" class="headerlink" title="资源的合并和压缩"></a>资源的合并和压缩</h3><ul><li>减少http请求数量</li><li>减少请求资源的大小</li></ul><h4 id="压缩实现"><a href="#压缩实现" class="headerlink" title="压缩实现"></a>压缩实现</h4><ul><li>html压缩</li><li>css压缩</li><li>js的压缩和混乱</li></ul><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><ul><li>文件与文件之间有插入的上行请求，增加了N-1个网络延迟受</li><li>丢包问题影响更严重</li><li>经过代理服务器时可能会被断开</li><li>浏览器对于同域名下的静态资源加载数量为5个</li></ul><h5 id="文件合并存在的问题："><a href="#文件合并存在的问题：" class="headerlink" title="文件合并存在的问题："></a>文件合并存在的问题：</h5><ul><li>首屏渲染问题</li><li>缓存失效问题</li></ul><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><ul><li>公共库合并</li><li>不同页面的合并</li><li>见机行事，随机应变</li></ul><h4 id="图片相关的优化的核心概念"><a href="#图片相关的优化的核心概念" class="headerlink" title="图片相关的优化的核心概念"></a>图片相关的优化的核心概念</h4><p><strong>文件大小</strong>、<strong>色彩丰富程度</strong>的权衡</p><ul><li>JPG-有损压缩</li><li>png8-256色+支持透明</li><li>png24-2^24色+不支持透明</li><li>png32-2^24色+支持透明</li></ul><p>每种图片格式都有自己的特点，针对不同的业务场景选择不同的图片格式很重要</p><h5 id="不同格式图片常见的业务场景"><a href="#不同格式图片常见的业务场景" class="headerlink" title="不同格式图片常见的业务场景"></a>不同格式图片常见的业务场景</h5><p>特点：</p><ul><li>jpg有损压缩，压缩率高，不支持透明</li><li>png支持透明，浏览器兼容好</li><li>webp压缩程度更好，在ios webview有兼容性问题 </li><li>svg矢量图，代码内嵌，相对较小，图片样式相对简单的场景</li></ul><p>场景：</p><ul><li>jpg —— 大部分不需要透明图片的业务场景</li><li>png —— 大部分需要透明图片的业务场景</li><li>webp —— 安卓全部</li><li>svg矢量图 —— 图片样式相对简单的业务场景</li></ul><h5 id="进行图片压缩"><a href="#进行图片压缩" class="headerlink" title="进行图片压缩"></a>进行图片压缩</h5><ul><li>针对真实图片情况，舍弃一些相对无关紧要的色彩信息</li><li>css雪碧图</li><li>Image inline(base64)</li></ul><h5 id="CSS雪碧图"><a href="#CSS雪碧图" class="headerlink" title="CSS雪碧图"></a>CSS雪碧图</h5><ul><li>把你的网站上用到的一些图片整合到一张单独的图片中</li><li>优点：减少你的网站的HTTP请求数量</li><li>缺点：整合图片比较大时，一次加载比较慢</li></ul><h5 id="Image-inline"><a href="#Image-inline" class="headerlink" title="Image inline"></a>Image inline</h5><ul><li>将图片的内容内嵌到html当中</li><li>减少你的网站的HTTP请求数量</li></ul><h5 id="使用矢量图"><a href="#使用矢量图" class="headerlink" title="使用矢量图"></a>使用矢量图</h5><ul><li>使用SVG进行矢量图的绘制</li><li>使用iconfont解决icon问题</li></ul><h5 id="在安卓下使用webp"><a href="#在安卓下使用webp" class="headerlink" title="在安卓下使用webp"></a>在安卓下使用webp</h5><p><strong>WebP</strong> 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都非常优秀、稳定和统一。</p><h5 id="使用webp"><a href="#使用webp" class="headerlink" title="使用webp"></a>使用webp</h5><p><strong>\<picture></picture></strong> 标签 <strong>\<picture></picture></strong>是HTML5中的一个新标签，类似<video>它也可以指定多个格式的资源，由浏览器选择自己支持的格式进行加载。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">picture</span> <span class="attr">class</span>=<span class="string">"picture"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">srcset</span>=<span class="string">"image.webp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"image.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></video></p><p>如果浏览器支持WebP格式，就会加载Image.webp，否则会加载Image.jpg。</p><p>即使浏览器不支持<picture>标签，图片仍然会正常显示，只是CSS可能无法正确选取到Picture元素。比如在IE8中，下面的CSS就不会起作用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.picture</span> <span class="selector-tag">img</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></picture></p><p>但是可以这样来给图片写样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>即使浏览器使用的是WebP格式的图片，最终还是会应用img元素的样式。</p><p>不过只要使用了，使旧的浏览器支持这个标签，CSS选择器就可以正常使用了。这种方法是最简单的，但是不能作用于CSS中的图片（如背景）</p><p>webp的格式:<a href="http://www.a.jpg_.webp" target="_blank" rel="noopener">http://www.a.jpg_.webp</a></p><h4 id="图片压缩-https-tinypng-com"><a href="#图片压缩-https-tinypng-com" class="headerlink" title="图片压缩:https://tinypng.com/"></a>图片压缩:<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></h4><h3 id="css和js加载与执行"><a href="#css和js加载与执行" class="headerlink" title="css和js加载与执行"></a>css和js加载与执行</h3><h4 id="一个网站在浏览器端是如何进行渲染的呢？"><a href="#一个网站在浏览器端是如何进行渲染的呢？" class="headerlink" title="一个网站在浏览器端是如何进行渲染的呢？"></a>一个网站在浏览器端是如何进行渲染的呢？</h4><p><strong>html页面渲染的过程</strong></p><p><img src="http://b.zhangyapeng.club/html页面加载渲染.png" alt="html页面加载渲染"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>顺序执行、并发加载</li><li>是否阻塞</li><li>依赖关系</li><li>引入方式</li></ul><h5 id="顺序执行、并发加载"><a href="#顺序执行、并发加载" class="headerlink" title="顺序执行、并发加载"></a>顺序执行、并发加载</h5><ul><li>词法分析</li><li>并发加载</li><li>并发上限</li></ul><h5 id="css阻塞"><a href="#css阻塞" class="headerlink" title="css阻塞"></a>css阻塞</h5><ul><li>css <strong>head中阻塞页面的渲染</strong>、<strong>link标签加载完才渲染</strong></li><li>css阻塞js的执行</li><li>css不阻塞外部脚本的加载</li><li>js可能修改dom,有可能涉及到css修改，是基于前面执行的css来修改</li></ul><h5 id="js阻塞"><a href="#js阻塞" class="headerlink" title="js阻塞"></a>js阻塞</h5><ul><li>直接引入的js阻塞<strong>页面的渲染</strong></li><li>js不阻塞<strong>资源的加载</strong></li><li>js<strong>顺序执行</strong>，阻塞后续js逻辑的执行</li></ul><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><ul><li>页面渲染依赖于css的加载</li><li>js的执行顺序的依赖关系</li><li>js逻辑对于dom节点的依赖关系</li></ul><h5 id="js引入方式"><a href="#js引入方式" class="headerlink" title="js引入方式"></a>js引入方式</h5><ul><li>直接引入</li><li>defer</li><li>async</li><li>异步动态引入js</li></ul><h5 id="加载和执行的一些优化点"><a href="#加载和执行的一些优化点" class="headerlink" title="加载和执行的一些优化点"></a>加载和执行的一些优化点</h5><ul><li>css 样式表置顶</li><li>用 link 代替 import</li><li>js 脚本置底</li><li>合理使用 js 的异步加载能力</li></ul><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><ul><li>图片进入可视区域之后请求图片资源</li><li>对于电商等图片很多，页面很长的业务场景适用</li><li>减少无效资源的加载</li><li>并发加载的资源过多会阻塞js的加载，影响网站的正常使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-origin</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vierHeight=<span class="built_in">document</span>.documentElement.clientHeight<span class="comment">//可是区域的高度</span></span></span><br><span class="line"><span class="undefined">react=item.getBoundingClientReact() 是否在可视区</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- img要设置高度 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h4><ul><li>图片等静态资源在使用之前的提前请求</li><li>资源使用到的时能缓存中加载，提升用户体验</li><li>页面展示的依赖关系维护</li></ul><h4 id="预加载方式"><a href="#预加载方式" class="headerlink" title="预加载方式"></a>预加载方式</h4><ul><li><p>html标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://xxx/jpg"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用Image对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image=<span class="keyword">new</span> Image()</span><br><span class="line">image.src=<span class="string">"http://xxx.jpg"</span></span><br></pre></td></tr></table></figure></li><li><p>使用XMLHttpRequest对象请求</p></li><li><p>preload.js</p></li></ul><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><h4 id="css性能让javascript变慢"><a href="#css性能让javascript变慢" class="headerlink" title="css性能让javascript变慢"></a>css性能让javascript变慢</h4><ul><li><strong>css</strong>:UI渲染单独的进程</li><li><strong>js</strong>:javascript解析的进程</li><li>UI渲染与javascript解析是互斥的执行的</li><li>频繁触发<strong>重绘</strong>与<strong>回流</strong>，会导致UI频繁渲染，最终导致js变慢</li></ul><h4 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h4><ul><li>当<strong>render tree</strong>中的一部分(或全部)因为元素的规模<strong>尺寸</strong>，<strong>布局</strong>，<strong>隐藏</strong>等改变而需要重新<strong>构建</strong>。这就称为回流(reflow)</li><li>当页面<strong>布局</strong>和<strong>几何属性</strong>改变时就需要回流</li></ul><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p>当<strong>render tree</strong>中的一些元素需要更新属性，而这些属性只是影响元素的<strong>外观</strong>，<strong>风格</strong>，而<strong>不</strong>会影响<strong>布局</strong>的，比如<strong>background-color</strong>。则就叫称为重绘。</p><p><strong>注意：</strong></p><ul><li>回流必将引起重绘</li><li>而重绘不一定会引起回流</li></ul><h5 id="触发页面冲布局的属性"><a href="#触发页面冲布局的属性" class="headerlink" title="触发页面冲布局的属性"></a>触发页面冲布局的属性</h5><ul><li>盒子模型相关属性会触发重布局</li><li>定位属性及浮动也会触发重布局</li><li>改变节点内部文字结构也会触发重布局</li></ul><p><img src="http://b.zhangyapeng.club/回流.jpg" alt="回流"></p><h5 id="只触发重绘的属性"><a href="#只触发重绘的属性" class="headerlink" title="只触发重绘的属性"></a>只触发重绘的属性</h5><p><img src="http://b.zhangyapeng.club/重绘.jpg" alt="重绘"></p><h5 id="新建DOM的过程"><a href="#新建DOM的过程" class="headerlink" title="新建DOM的过程"></a>新建DOM的过程</h5><ol><li>获取DOM后分割为多个图层</li><li>对每个图层的节点计算样式结果（Recalculate style–样式重计算）</li><li>为每个节点生成图形和位置（Layout–回流和重布局）</li><li>将每个节点绘制填充到图层位图中（Paint Setup和Paint–重绘）</li><li>图层作为纹理上传至GPU</li><li>符合多个图层到页面上生成最终屏幕图像（Composite Layers–图层重组）</li></ol><p><strong>注意：</strong></p><ul><li>将<strong>频繁重绘回流</strong>的DOM元素单独作为一个<strong>独立图层</strong>，那么这个DOM元素的重绘和回流的影响<strong>只会</strong>在这个图层中。</li><li>因为<strong>合并图层</strong>的时候,也就是<strong>Composite Layers</strong>，会消耗大量的时间，所以尽量少建立图层，除非该图层影响页面性能大的时候。</li></ul><h4 id="如何将DOM元素变成新的独立图层？"><a href="#如何将DOM元素变成新的独立图层？" class="headerlink" title="如何将DOM元素变成新的独立图层？"></a>如何将DOM元素变成新的独立图层？</h4><h4 id="Chrome创建图层的条件"><a href="#Chrome创建图层的条件" class="headerlink" title="Chrome创建图层的条件"></a>Chrome创建图层的条件</h4><ul><li><strong>3D</strong>或透视变换（perspective transform）CSS属性</li><li>使用加速视频解码的<strong>&lt;video></strong>节点</li><li>拥有3D（<strong>WebGL</strong>）上下文或加速的2D上下文的<strong>&lt;canvas></strong>节点</li><li>混合插件（如<strong>Flash</strong>）</li><li>对自己的opacity做<strong>CSS动画</strong>或使用一个动画webkit变换的元素</li><li>拥有<strong>加速CSS过滤器</strong>的元素</li><li>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）</li><li>元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</li></ul><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 两个都可以*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">transfrom</span>:<span class="built_in">translateZ</span>(0);</span><br><span class="line">    <span class="attribute">will-change</span>:transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="开启Layers"><a href="#开启Layers" class="headerlink" title="开启Layers"></a>开启Layers</h5><p><img src="http://b.zhangyapeng.club/laylers.jpg" alt="laylers"></p><h5 id="开启paint-渲染视图"><a href="#开启paint-渲染视图" class="headerlink" title="开启paint(渲染视图)"></a>开启paint(渲染视图)</h5><p><img src="http://b.zhangyapeng.club/Painers.jpg" alt="Painers"></p><p><strong>用例</strong>：<strong>gif</strong>可以使用创建图层，因为gif图会频繁的重绘,但是img标签本身不会创建图层，所以需要我们去创建</p><h4 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h4><ol><li><strong>避免</strong>使用触发重绘、回流的css属性</li><li>将重绘、回流的影响范围限制在<strong>单独的图层</strong>之内</li><li>图层不能被<strong>滥用</strong></li></ol><h4 id="实战优化点"><a href="#实战优化点" class="headerlink" title="实战优化点"></a>实战优化点</h4><ol><li>用<strong>translate</strong>替代<strong>top</strong>改变</li><li>用<strong>opacity</strong>替代<strong>visibility</strong></li><li>不要一条一条地修改 DOM 的样式，预先定义好 class，然后修改 DOM 的 className</li><li><strong>把 DOM 离线后修改</strong>，比如：先把 DOM 给 display:none (有一次<strong>Reflow回流</strong>)，然后你修改100次，然后再把它显示出来</li><li>不要把 <strong>DOM 结点的属性值 (offsetHeight)</strong>放在一个循环里当成<strong>循环</strong>里的变量</li><li>不要使用<strong>table</strong>布局，可能很小的一个小改动会造成整个<strong>table</strong>的重新布局</li><li>动画实现的<strong>速度的选择</strong></li><li>对于<strong>动画</strong>新建图层</li><li>启用<strong>GPU</strong>硬件加速</li></ol><h5 id="GPU加速-WebGL、3d"><a href="#GPU加速-WebGL、3d" class="headerlink" title="GPU加速(WebGL、3d)"></a>GPU加速(WebGL、3d)</h5><ul><li>GPU是并行运算的,对于并行运算的纹理绘制，会非常快</li><li>因为数据在cpu上,如果GPU加速，要把数据从cpu传输到GPU上，如果数据过多，要慎重考虑</li></ul><h3 id="浏览器储存"><a href="#浏览器储存" class="headerlink" title="浏览器储存"></a>浏览器储存</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><img src="http://b.zhangyapeng.club/cookie.png" alt="cookie"></p><ul><li>因为HTTP请求无状态，所以需要cookie去<strong>维持客户端状态</strong></li><li>cookie的生成方式<ul><li>用于浏览器端和服务器端的交互</li><li>客户端自身数据的存储</li><li>http response header中的set-cookie</li><li>js中可以通过document.cookie可以读写cookie</li></ul></li><li>过期时间<strong>expire</strong><ul><li>仅仅作为浏览器存储（大小<strong>4KB</strong>左右，能力被<strong>localstorage</strong>替代）</li><li><strong>httponly</strong>不支持js的读写</li></ul></li><li>cookie中在相关<strong>域名</strong>下面 —— <strong>cdn的流量损耗</strong><ul><li>cdn的域名和主站的域名要分开</li></ul></li></ul><h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><ul><li>HTML5设计出来专门用于浏览器存储的</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好</li><li>浏览器本地缓存方案</li></ul><h4 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h4><ul><li><strong>会话级别</strong>的浏览器存储</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好</li><li>对于表单信息的维护</li></ul><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><ul><li>IndexedDB 是一种低级API，用于客户端存储<strong>大量结构化数据</strong>。该API使用索引来实现对该数据的高性能搜索。虽然<strong>Web Storage</strong>对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。</li><li>为应用创建离线版本</li></ul><h4 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h4><p>PWA (Progressive Web Apps) 是一种 Web App 新模型，并不是具体指某一种前沿的技术或者某一个单一的知识点，我们从英文缩写来看就能看出来，这是一个<strong>渐进式</strong>的 Web App，是通过一系列新的 Web 特性，配合优秀的 UI 交互设计，逐步的增强 Web App 的用户体验。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>可靠</strong>：在没有网络的环境中也能提供基本的页面访问，而不会出现“未连接到互联网”的页面。</li><li><strong>快速</strong>：针对网页渲染及网络数据访问有较好优化。</li><li><strong>融入</strong>（Engaging）：应用可以被增加到手机桌面，并且和普通应用一样有全屏、推送等特性</li></ul><h4 id="检测PWA的支持度"><a href="#检测PWA的支持度" class="headerlink" title="检测PWA的支持度"></a>检测PWA的支持度</h4><ul><li><a href="https://lavas.baidu.com/doc-assets/lavas/vue/more/downloads/lighthouse_2.1.0_0.zip" target="_blank" rel="noopener">lighthouse</a></li></ul><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><ul><li><strong>Service Worker</strong>是一个<strong>脚本</strong>，浏览器独立于当前网页，将其在<strong>后台运行</strong>,为实现一些<strong>不依赖页面</strong>或者<strong>用户交互</strong>的特性打开了一扇大门。在未来这些特性将包括推送消息,背景后台同步， geofencing（地理围栏定位），但它将推出的第一个首要特性，就是<strong>拦截</strong>和<strong>处理网络</strong>请求的能力，包括以编程方式来管理被缓存的响应。</li></ul><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>使用拦截和处理网络请求的能力，去实现一个离线应用</li><li>使用<strong>service Worker</strong>在后台运行同时能和页面通信的能力，去实现大规模后台数据的处理</li></ul><p><img src="http://b.zhangyapeng.club/service.png" alt="service"></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><p><a href="chrome://serviceworker-internals/" target="_blank" rel="noopener">chrome://serviceworker-internals/</a></p></li><li><p><a href="chrome://inspect/#service-workers" target="_blank" rel="noopener">chrome://inspect/#service-workers</a></p></li></ul><h4 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a><a href="https://nzv3tos3n.qnssl.com/message/msg-demo.html" target="_blank" rel="noopener">测试页面</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前页</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> msgIpt = <span class="built_in">document</span>.getElementById(<span class="string">'ipt'</span>),</span><br><span class="line">            showArea = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>),</span><br><span class="line">            sendBtn = <span class="built_in">document</span>.getElementById(<span class="string">'sendBtn'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        navigator.serviceWorker.register(<span class="string">'service-worker3.js'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        navigator.serviceWorker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            showArea.innerHTML = showArea.innerHTML + (<span class="string">'&lt;li&gt;'</span> + event.data.message + <span class="string">'&lt;/li&gt;'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        sendBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            navigator.serviceWorker.controller.postMessage(msgIpt.value);</span><br><span class="line">            msgIpt.value = <span class="string">''</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//servers-work</span></span><br><span class="line">self.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = self.clients.matchAll()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">clientList</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> senderID = event.source ? event.source.id : <span class="string">'unknown'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!event.source) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'event.source is null; we don\'t know the sender of the '</span> +</span><br><span class="line">                    <span class="string">'message'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clientList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (client.id === senderID) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                client.postMessage(&#123;</span><br><span class="line">                    client: senderID,</span><br><span class="line">                    message: event.data</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event.waitUntil) &#123;</span><br><span class="line">        event.waitUntil(promise);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.waitUntil(self.clients.claim());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p><img src="http://b.zhangyapeng.club/cache.png" alt="cache"><br><img src="http://b.zhangyapeng.club/cache策略.png" alt="cache策略"></p><h4 id="httpHeader"><a href="#httpHeader" class="headerlink" title="httpHeader"></a>httpHeader</h4><ul><li>response</li><li>request<ul><li>max-age</li><li>s-max-age</li><li>private</li><li>public</li><li>no-cache</li><li>no-store</li></ul></li></ul><h5 id="max-age"><a href="#max-age" class="headerlink" title="max-age"></a>max-age</h5><ul><li><strong>cache-control</strong>最大过期时间,优先级更高<strong>http1.1</strong></li><li><strong>expires</strong>http1.0 过期时间 优先级低</li><li>返回200</li></ul><h5 id="s-maxage"><a href="#s-maxage" class="headerlink" title="s-maxage"></a>s-maxage</h5><ul><li>优先级比<strong>max-age</strong>高</li><li>只能指定<strong>public设备</strong>的缓存，就是定义<strong>cdn</strong>的缓存时间<ul><li><strong>private缓存设备</strong>指代<strong>浏览器</strong>，只能当前用户访问的缓存设备</li><li><strong>public缓存设备</strong>例如cdn缓存设备，可以支持多用户访问缓存信息</li></ul></li></ul><p><img src="http://b.zhangyapeng.club/max-age.png" alt="max-age"></p><p><img src="http://b.zhangyapeng.club/s-max-age.png" alt="s-max-age"></p><h5 id="no-cahce"><a href="#no-cahce" class="headerlink" title="no-cahce"></a>no-cahce</h5><ul><li>不会像<strong>max-age</strong>一样，不往服务器发请求，而直接读取本地缓存</li><li>会让浏览器发请求到服务器，让服务器判断当前缓存是否可用，和<strong>last-modified</strong>配合使用<br><img src="http://b.zhangyapeng.club/no-cahce.png" alt="no-cahce"></li></ul><h5 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h5><p>配置<strong>no-store</strong>就不使用任何缓存策略</p><h5 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h5><ul><li>缓存过期时间,用来指定资源到期的时间，是服务器端的具体时间点</li><li>告诉浏览器在过期时间前浏览器可以直接从浏览器缓存中读取数据，而无需再次请求</li></ul><p><img src="http://b.zhangyapeng.club/expires.jpg" alt="expires"></p><h4 id="协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）"><a href="#协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）" class="headerlink" title="协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）"></a>协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）</h4><h5 id="Last-Modifed-IF-Modified-Since"><a href="#Last-Modifed-IF-Modified-Since" class="headerlink" title="Last-Modifed/IF-Modified-Since"></a>Last-Modifed/IF-Modified-Since</h5><ul><li>基于客户端和服务器端协商的缓存机制</li><li>last-modified—-response header</li><li>if-modified-since—-request header</li><li>需要与<strong>cache-control</strong>共同使用,<strong>max-age</strong>没有过期先走<strong>max-age</strong></li></ul><p><img src="http://b.zhangyapeng.club/last-modified.png" alt="last-modified"></p><p>####### last-modified有什么缺点？</p><ul><li>某些服务端不能获取精确的修改时间</li><li>文件修改时间改了，但是文件内容却没有变</li><li>毫秒级别的修改不能区分</li></ul><h5 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag/If-None-Match"></a>Etag/If-None-Match</h5><ul><li>文件内容的hash值</li><li>etag–response header</li><li>if-none-match—request header</li><li>需要与<strong>cache-control</strong>共同使用</li><li>如果同时有<strong>etag</strong>和<strong>last-modified</strong>存在，在发送请求的时候会一次性的发送给服务器，没有优先级，服务器会比较这两个信息（在具体实现上，大多数做法针对这种情况只会比对<strong>etag</strong>）。服务器在输出上，如果输出了<strong>etag</strong>就没有必要再输出<strong>last-modified</strong>（实际上大多数情况会都输出）。<br><img src="http://b.zhangyapeng.club/etag.png" alt="etag"></li></ul><h4 id="分级缓存策略"><a href="#分级缓存策略" class="headerlink" title="分级缓存策略"></a>分级缓存策略</h4><h6 id="浏览器输入-url-之后敲下回车，刷新-F5-与强制刷新-Ctrl-F5-，又有什么区别？"><a href="#浏览器输入-url-之后敲下回车，刷新-F5-与强制刷新-Ctrl-F5-，又有什么区别？" class="headerlink" title="浏览器输入 url 之后敲下回车，刷新 F5 与强制刷新(Ctrl + F5)，又有什么区别？"></a>浏览器输入 url 之后敲下回车，刷新 F5 与强制刷新(Ctrl + F5)，又有什么区别？</h6><p>实际上浏览器输入<strong>url</strong>之后敲下<strong>回车</strong>就是先看本地<strong>cache-control</strong>、<strong>expires</strong>的情况，<strong>刷新</strong>(F5)就是忽略先看本地<strong>cache-control</strong>、<strong>expires</strong>的情况，带上条件<strong>If-None-Match</strong>、<strong>If-Modified-Since</strong>，<strong>强制刷新</strong>(Ctrl + F5)就是不带条件的访问。</p><p>值得注意的是，如果是 浏览器输入<strong>url</strong>之后敲下回车 你在<strong>network</strong>里面看到的状态往往是<strong>200</strong>，但是大小是<strong>0</strong>。这是因为这个<strong>200</strong>是上次访问资源返回的状态码。</p><p>如果你是一位开发者，还是建议在 Chrome 里面开启<strong>Disable Cache</strong>.</p><p><img src="http://b.zhangyapeng.club/分级缓存.png" alt="分级缓存"></p><p><strong>查看缓存</strong>:</p><ul><li><a href="http://qqbrowser://view-http-cache/" target="_blank" rel="noopener">http://qqbrowser://view-http-cache/</a></li><li><a href="chrome://about/" target="_blank" rel="noopener">chrome://about/</a></li></ul><h4 id="服务端性能优化"><a href="#服务端性能优化" class="headerlink" title="服务端性能优化"></a>服务端性能优化</h4><ul><li>vue渲染面临的问题<ul><li>首屏加载问题<ul><li>下载vue.js</li><li>执行vue.js</li><li>生成html页面</li></ul></li><li>以前没有前端框架时<ul><li>用jsp/php在<strong>服务器端进行数据的填充</strong></li><li>发送给客户端就是已经<strong>填充好数据</strong>的html</li></ul></li><li>使用Juqery异步加载数据</li><li>使用React和Vue前端框架</li></ul></li></ul><h5 id="vue性能进行提升方案"><a href="#vue性能进行提升方案" class="headerlink" title="vue性能进行提升方案"></a>vue性能进行提升方案</h5><ul><li>构建层模板编译</li><li>数据无关的<strong>prerender</strong>的方式</li><li>服务端渲染</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网络层面&lt;/li&gt;
&lt;li&gt;构建层面&lt;/li&gt;
&lt;li&gt;服务端层面&lt;/li&gt;
&lt;li&gt;浏览器渲染
      
    
    </summary>
    
    
      <category term="性能优化" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/05/浏览器渲染/</id>
    <published>2018-09-05T07:43:59.000Z</published>
    <updated>2018-09-06T08:11:58.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><p>有这样几个问题，我们来思考一下：</p><ol><li>我们平常浏览的网页是否是应用</li><li>在操作系统中的应用是如何运行的</li><li>浏览器究竟是什么</li><li>webkit和浏览器的关系</li><li>浏览器是如何呈现页面的</li><li>经典问题：从浏览器的地址输入一个网址直到网页内容呈现完毕，发生了哪些事情</li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p>浏览器是用户访问互联网最重要的接口</p><p>本质上,浏览器是方便一般互联网用户通过界面解析和发送HTTP协议的软件</p><h4 id="浏览器历史"><a href="#浏览器历史" class="headerlink" title="浏览器历史"></a>浏览器历史</h4><ol><li>1991年，第一个浏览器WorldWideWeb(后改为Nexus),功能简单，不支持图片</li><li>1993年，Mosaic浏览器出现，可以显示图片，为了区分浏览器是否显示图片，出现了<strong>UserAgent</strong></li><li>1994年，Mozilla浏览器出现,也就是后面大名鼎鼎的网景浏览器Netscape,它的UserAgent为<strong>Mozilla/1.0</strong></li><li>1995年，IE浏览器出现，为了抢夺市场，UserAgent为<strong>Mozilla/1.22</strong></li><li>1998年，网景浏览器失利，成立Mozilla组织</li><li>2003年，网景公司解散，Mozilla基金会成立，这个组织推进了后来的Firefox</li><li>Mozilla开发了Geoko,变成了Firefox，他的UserAgent<strong>Mozilla/5.0</strong></li><li>群雄并起，众多公司的浏览器的UserAgent上都带有<strong>Mozilla</strong></li><li>chrome和safari出现，占有了很大的份额</li></ol><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><ul><li><p>最初的浏览器做了哪些事情</p><ol><li>创建一个TCP连接</li><li>发送一个文本协议(请求头)</li><li>解析页面的操作(不解析图片)</li></ol></li><li><p>User-Agent的起初意义</p><ol><li>告诉服务器,当前浏览器的版本，系统</li><li>起初为了区分浏览器是否支持图片</li></ol></li></ul><h4 id="查看用户代理"><a href="#查看用户代理" class="headerlink" title="查看用户代理"></a>查看用户代理</h4><ol><li>打开chrome浏览器的控制台</li><li>在控制台输入<code>navigator.userAgent</code></li><li>会发现类似的字符串<code>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36</code></li></ol><h4 id="用户代理的作用"><a href="#用户代理的作用" class="headerlink" title="用户代理的作用"></a>用户代理的作用</h4><ol><li>判断浏览器类型，采用兼容方案</li><li>判断是否为移动端</li><li>标识H5容器，方便调用H5容器特定接口</li><li>要注意<code>userAgent</code>伪装成本很低，不要过于依赖</li></ol><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>对于操作系统来说，<strong>内核</strong>是操作系统的核心，是第一层基于硬件的软件扩充，提供最核心最基础的服务</p><p>应用程序通过内核进行<strong>系统调用</strong>来使用计算机的硬件，内核代码简介高效,并且基本没有bug,由于是最底层的服务，一点微小的错误也会造成整个系统的崩溃。好处当然也显而易见，基于一个稳定的内核，开发者可以构建适合不同场景的操作系统和应用软件</p><p>对于浏览器来说，同样存在<strong>浏览器内核</strong>，与操作系统内核相似，浏览器内核需要提供API给浏览器开发者使用，同时提供最核心的功能，如<code>加载和渲染网页</code>，<code>调用操作系统所提供的服务</code></p><p>对于浏览器厂商来说，高效使用和开发浏览器内核是核心问题。对于web开发者来说，理解浏览器内核的基本机制，才能开发出高性能的web应用</p><h3 id="浏览器内核知识"><a href="#浏览器内核知识" class="headerlink" title="浏览器内核知识"></a>浏览器内核知识</h3><h4 id="浏览器内核定义"><a href="#浏览器内核定义" class="headerlink" title="浏览器内核定义"></a>浏览器内核定义</h4><p>我们可以初步认为浏览器中<strong>负责将表示页面的字符串转变成可视化的图像的模块</strong>就是<strong>浏览器内核</strong></p><h3 id="回到”从输入URL…”的问题"><a href="#回到”从输入URL…”的问题" class="headerlink" title="回到”从输入URL…”的问题"></a>回到”从输入URL…”的问题</h3><p>我们将输入URL到远程内容返回之前的阶段略过，从<code>Response</code>开始：<br>使用Node.js的TCP模块来获取，远程主机究竟给我们返回了什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> desPort = <span class="number">80</span></span><br><span class="line"><span class="keyword">const</span> desHost = <span class="string">'123.57.205.204'</span></span><br><span class="line"><span class="keyword">let</span> allBuffer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> client = net.createConnection(desPort, desHost, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'connected to server!'</span>)</span><br><span class="line">  client.write(<span class="string">`GET / HTTP/1.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCache-Control: no-cache\r\nConnection: keep-alive\r\nCookie: __cfduid=dcc794c22f91c478f5c0e21bd2a4dc4a71535945679; __root_domain_v=.zhufengpeixun.cn; _qddaz=QD.54jl6y.ec9qho.jllqeote; pgv_pvi=4490024960; tencentSig=320538624; IESESSION=alive; pgv_si=s8736718848; Hm_lvt_418b1c90fa35dc210dd5d2284d9f9f29=1535945692,1535963228,1536047064,1536110767; Hm_lvt_5ca1e1efc366a109d783a085499d59d9=1535964808,1536111794; Hm_lpvt_5ca1e1efc366a109d783a085499d59d9=1536111794; Hm_lpvt_418b1c90fa35dc210dd5d2284d9f9f29=1536140224; _qdda=3-1.1; _qddab=3-vgg4fx.jloy87b0; _qddamta_2852156370=3-0\r\nHost: www.zhufengpeixun.cn\r\nPragma: no-cache\r\n</span></span><br><span class="line"><span class="string">  Upgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36\r\n\r\n`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!allBuffer) &#123;</span><br><span class="line">    allBuffer = data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allBuffer = Buffer.concat([allBuffer, data])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> htmlContent = allBuffer.toString()</span><br><span class="line">  <span class="keyword">const</span> ws = fs.createWriteStream(</span><br><span class="line">    path.join(__dirname, <span class="string">'zhufeng.html'</span>)</span><br><span class="line">  )</span><br><span class="line">  ws.write(htmlContent)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>几个问题:</p><ol><li>以上这段代码的逻辑</li><li>返回的字符串该如何解析</li><li>想让返回的字符串呈现为图像，怎么做 </li></ol><h4 id="远程主机响应"><a href="#远程主机响应" class="headerlink" title="远程主机响应"></a>远程主机响应</h4><h5 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h5><p>请求报文格式：</p><ul><li>起始行:[方法][空格][请求URL][空格][HTTP版本][换行符]</li><li>首部:[首部名称][;][可选空格][首部内容][换行符]</li><li>首部结束:[换行符]</li><li>实体</li></ul><p>响应报文格式:</p><ul><li>起始行：[HTTP版本][空格][状态码][空格][原因短语][换行符]</li><li>首部:[首部名称][;][可选空格][首部内容][换行符]</li><li>首部结束:[换行符]</li><li>实体</li></ul><p>换行符:\r\n</p><h3 id="响应组成"><a href="#响应组成" class="headerlink" title="响应组成"></a>响应组成</h3><p>响应内容解析如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 302 Found</span><br><span class="line">Location: https://www.baidu.com/error.html</span><br><span class="line">Server: bfe</span><br><span class="line">Date: Wed, 05 Sep 2018 10:10:32 GMT</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line"># 实体内容 当前为html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">....</span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure></p><h3 id="网页内容的组成"><a href="#网页内容的组成" class="headerlink" title="网页内容的组成"></a>网页内容的组成</h3><ul><li>doctype:提供浏览器html版本信息，html解析器用那个版本解析</li><li>head:html头部<ul><li>meta:元数据信息<ul><li>charset:此特性声明当前文档所使用的字符编码</li><li>http-equiv:客户端行为，如渲染模式，缓存等</li><li>name[keywords]:搜索引擎使用</li><li>name[description]:搜索引擎使用</li><li>name[viewport]:<strong>浏览器视口设置</strong></li></ul></li><li>link</li><li>script:需要在body前完成加载或运行的脚本</li></ul></li><li>body:html实体<ul><li>script:需要在body解析时加载或运行的脚本</li></ul></li></ul><h3 id="问题-X-UA-Compatible是什么"><a href="#问题-X-UA-Compatible是什么" class="headerlink" title="问题:X-UA-Compatible是什么"></a>问题:X-UA-Compatible是什么</h3><p><code>X-UA-Compatible</code>是针对<code>IE8</code>新加的一个设置，对于<code>IE8之前</code>的浏览器是不识别的，这个区别与<code>content=&quot;IE=7&quot;</code>在无论页面是否包含<code>&lt;!DOCTYPE&gt;</code>指令，都像是使用了 <code>Windows Internet Explorer 7</code>的标准模式。而<code>content=&quot;IE=EmulateIE7&quot;</code>模式遵循&lt;!DOCTYPE&gt;指令。对于多数网站来说，它是首选的兼容性模式。</p><p>为了避免制作出的页面在IE8下面出现错误，建议直接将IE8使用IE7进行渲染。也就是直接在页面的header的meta标签中加入如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="渲染需要做的工作"><a href="#渲染需要做的工作" class="headerlink" title="渲染需要做的工作"></a>渲染需要做的工作</h3><p><img src="浏览器渲染.jpg" alt="浏览器渲染.jpg"></p><p>上图表示了渲染引擎的一般渲染过程，虚线表示该阶段所依赖的外部模块（不属于渲染引擎）</p><p>重要组件</p><ul><li>html解释器:解释HTML文本解释器，html文本-&gt;DOM树</li><li>css解释器：遇到级联样式时,需要使用级联样式表解释器，为DOM对象计算出样式信息</li><li>Javascript引擎:遇到js代码时,需要使用Javascript解释器，并使得js代码有调用DOM接口和CSSOM接口的能力</li><li>布局:结合CSS,<strong>计算</strong>出每个DOM对象的<strong>大小位置</strong>信息</li><li>绘图:将经过布局计算的DOM节点<strong>绘制成图像</strong></li></ul><p>以上重要组件组成了渲染引擎：<br><img src="渲染引擎.jpg" alt="渲染引擎.jpg"></p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>几个问题：</p><ol><li>通过响应的内容，我们可以看到内容中还存在许多外联资源，浏览器是如何处理的？</li><li>著名的优化:”css放在头部，js放在尾部”,为什么？</li><li>浏览器在渲染之前或者之后还需要做那些事情</li><li>移动端的浏览器和pc端的浏览器是否相同</li></ol><h4 id="浏览器内核架构"><a href="#浏览器内核架构" class="headerlink" title="浏览器内核架构"></a>浏览器内核架构</h4><h4 id="回答上一节"><a href="#回答上一节" class="headerlink" title="回答上一节"></a>回答上一节</h4><ol><li>不同的外联资源，webkit中有不同的资源加载器。当浏览器解析到URL地址时，调用特定的资源加载器，如果不是特殊资源，加载过程不会阻碍渲染过程</li><li>一般来说css资源不会阻碍渲染过程，但Javascript资源在的浏览器中，会阻碍渲染过程的进行。如果放置在头部，渲染过程会<strong>暂停</strong>,造成”白屏”.但现代浏览器的优化已经做的很好了，<strong>preload</strong>，所以当渲染被阻塞时，浏览器会开启新的线程继续渲染。</li><li>渲染之前需要加载资源，渲染之后在DOM或者css变化后，重新进行布局计算和重渲染操作</li><li>功能基本相同，但所运用的操作系统不同，渲染机制有差异</li></ol><h4 id="内核架构"><a href="#内核架构" class="headerlink" title="内核架构"></a>内核架构</h4><p>根据上面的问题回答我们会发现，webkit仅仅包含渲染功能是不够的，因为它需要获取网络资源，支持不同的浏览器，支持不用的操作系统，同样还要包含调试工具。</p><p>所以我们应该给出一张更全的webkit架构图:<br><img src="webkit架构图.jpg" alt="webkit架构图.jpg"><br>虚线框表示该部分模块在不同浏览器使用webkit的实现是不一样的，实线框是基本一致的。</p><h4 id="Chromium架构"><a href="#Chromium架构" class="headerlink" title="Chromium架构"></a>Chromium架构</h4><p>基于webkit内核就可以构建浏览器应用，了解著名的chromium浏览器对我们的web开发也有很多启发</p><p>几个问题</p><ol><li>除去webkit内核完成的功能，浏览器的工作有哪些？</li><li>进程是什么？</li><li>IPC是什么？</li><li>线程是什么？</li><li>线程同步是什么？</li></ol><h4 id="现代浏览器的工作？"><a href="#现代浏览器的工作？" class="headerlink" title="现代浏览器的工作？"></a>现代浏览器的工作？</h4><ul><li>资源管理</li><li>多页面管理：也就是多个标签页的管理</li><li>插件和扩展：如flash,油猴，chrome扩展程序</li><li>账户和同步</li><li>安全机制</li><li>多系统支持</li></ul><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul><li>进程：对CPU,主存，IO设备的抽象，操作系统对一个正在进行的程序的抽象</li><li>线程：组成进程的执行单元</li><li>进程通信：进程间传输数据（交换信息）</li><li>线程同步</li></ul><h4 id="进程通讯的方式"><a href="#进程通讯的方式" class="headerlink" title="进程通讯的方式"></a>进程通讯的方式</h4><h4 id="线程同步的方式"><a href="#线程同步的方式" class="headerlink" title="线程同步的方式"></a>线程同步的方式</h4><p><img src="进程.jpg" alt="进程.jpg"></p><h4 id="Chromium的多进程架构"><a href="#Chromium的多进程架构" class="headerlink" title="Chromium的多进程架构"></a>Chromium的多进程架构</h4><p>chromium的模块：<br><img src="chromium.jpg" alt="chromium.jpg"><br>主要进程介绍：</p><ul><li>Browser进程：主进程,负责浏览器页面，页面管理等</li><li>render进程：渲染进程</li><li>NPAPI插件进程</li><li>GPU进程：当GPU硬件加速打开时才会创建</li></ul><p>多进程架构的目的所在：</p><ul><li>职责分离，故障范围小</li><li>隔离性</li><li>性能</li></ul><h4 id="javascript中的进程和线程"><a href="#javascript中的进程和线程" class="headerlink" title="javascript中的进程和线程"></a>javascript中的进程和线程</h4><ul><li>单线程</li></ul><h3 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h3><p>总共分两步：</p><ol><li>加载：加载渲染所必须的html代码</li><li>渲染：将html代码绘制成图像结果</li></ol><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><h5 id="资源加载机制"><a href="#资源加载机制" class="headerlink" title="资源加载机制"></a>资源加载机制</h5><h6 id="资源加载器"><a href="#资源加载器" class="headerlink" title="资源加载器"></a>资源加载器</h6><p>分为三类：</p><ol><li>特定资源加载器：针对每种资源类型的特定加载器，仅加载某一种资源。对应设计模式中 的单例模式</li><li>缓存资源加载器：与常规的缓存逻辑相同，特定加载器先通过缓存资源加载器来查找是否有缓存资源，如果在资源缓存池中存在缓存资源，则取出以便使用；若不存在，发送请求给网络模块</li><li>通用资源加载器：由于加载资源大多属于网络请求，而网络请求的逻辑是可以被特定资源加载器所共享的，所以通用资源加载器只能负责通过网路获得目标资源的数据，但不负责进一步解析</li></ol><h5 id="资源缓存"><a href="#资源缓存" class="headerlink" title="资源缓存"></a>资源缓存</h5><ol><li>page Cache：页面缓存</li><li>Memory Cache：内存缓存</li><li>Disk Cache:磁盘缓存</li></ol><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><h4 id="网络栈"><a href="#网络栈" class="headerlink" title="网络栈"></a>网络栈</h4><p><img src="网络栈.jpg" alt="网络栈.jpg"></p><ol><li>确定请求类型，协议</li><li>判断是否需要建立网络连接</li><li>建立HTTP事务</li><li>建立TCP socket连接</li><li>套接字连接</li></ol><h4 id="预先加载"><a href="#预先加载" class="headerlink" title="预先加载"></a>预先加载</h4><ol><li>DNS预取 <strong>dns-prefetch</strong></li><li>资源的预取</li><li>TCP preconnect</li></ol><h4 id="TCP-相关"><a href="#TCP-相关" class="headerlink" title="TCP 相关"></a>TCP 相关</h4><p>请参考之前的网络课程</p><h4 id="如何提高加载速度"><a href="#如何提高加载速度" class="headerlink" title="如何提高加载速度"></a>如何提高加载速度</h4><ol start="3"><li>合并请求：nginx模块，sprite雪碧图 <strong>移动端TCP请求建立慢</strong></li><li>缓存:from cache(memory,disk),localstorage，本地缓存策略，HTTP头(结合业务)</li><li>tcp 网络连接优化：tcp调优，HTTP/2,keep-alive</li><li>硬件：加大带宽，使用cdn(对象存储)</li><li>资源大小：gzip,webp，image压缩，cookie体积</li><li>预加载： dns预取 、多个cdn域名<strong>Chrome在同域名下读资源只能读5个</strong> 、异步读取js</li></ol><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><h6 id="HTML-解释器"><a href="#HTML-解释器" class="headerlink" title="HTML 解释器"></a>HTML 解释器</h6><h6 id="解释过程"><a href="#解释过程" class="headerlink" title="解释过程"></a>解释过程</h6><p>资源的变换</p><ol><li>字节流</li><li>字符流</li><li>Tokens</li><li>节点</li><li>DOM数</li></ol><p>流程：</p><ol><li>词法分析</li><li>XSSAuditor</li><li>语法分析</li><li>生成DOM数</li></ol><h5 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h5><p>通过HTMLTokenizer来进行词法分析</p><p>词法分析的任务是对输入字节流进行逐字扫描，根据构词规则识别单词和符号，分词</p><p>词法分析器的主要接口是nextToken()函数，调用者只需要将字符串传入，就会得到一个词语</p><p>注意，在这里并不涉及标签类型信息，这是之后语法分析的工作</p><h5 id="CSS解释器"><a href="#CSS解释器" class="headerlink" title="CSS解释器"></a>CSS解释器</h5><h6 id="Javascript引擎"><a href="#Javascript引擎" class="headerlink" title="Javascript引擎"></a>Javascript引擎</h6><p>执行流程：</p><ol><li>源代码</li><li>抽象语法数</li><li>字节码</li><li>解释器</li><li>JIT</li><li>本地代码</li></ol><h6 id="渲染-1"><a href="#渲染-1" class="headerlink" title="渲染"></a>渲染</h6><ol><li>renderObject</li><li>RenderLayer</li><li>布局计算</li><li>绘图无关上下文</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Get-Started&quot;&gt;&lt;a href=&quot;#Get-Started&quot; class=&quot;headerlink&quot; title=&quot;Get Started&quot;&gt;&lt;/a&gt;Get Started&lt;/h3&gt;&lt;p&gt;有这样几个问题，我们来思考一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们平常
      
    
    </summary>
    
    
      <category term="浏览器渲染" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
      <category term="浏览器" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vscode插件</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/08/29/vscode%E6%8F%92%E4%BB%B6/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/08/29/vscode插件/</id>
    <published>2018-08-29T06:54:02.000Z</published>
    <updated>2018-09-17T03:03:14.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Setting-Sync-可同步包含的所有扩展和完整的用户文件夹"><a href="#Setting-Sync-可同步包含的所有扩展和完整的用户文件夹" class="headerlink" title="Setting Sync 可同步包含的所有扩展和完整的用户文件夹"></a>Setting Sync 可同步包含的所有扩展和完整的用户文件夹</h3><ul><li><p>设置文件</p></li><li><p>快捷键设置文件</p></li><li><p>Launch File</p></li><li><p>Snippets Folder</p></li><li><p>VSCode 扩展设置</p></li><li><p>工作空间</p></li></ul><a id="more"></a><h3 id="为什么需要Settings-Sync"><a href="#为什么需要Settings-Sync" class="headerlink" title="为什么需要Settings Sync"></a>为什么需要<code>Settings Sync</code></h3><p>一开始不知道怎么<code>备份vscode</code>的配置,傻乎乎的把要用的插件抄下来,还有用户settings拷贝出来.每次换了电脑或者重装系统什么的都要重新备份.虽然来回调整的概率很低,但是突然哪天需要同步设置什么的就很麻烦了~至少我是在初期经常鼓捣这个编辑器,而且办公在家和公司是不同的设备~所以觉得还是很有必要的~</p><h3 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h3><ol><li><p><strong>安装</strong>插件并<strong>重启VSCODE</strong>就不用说了(<code>安装VSCODE Settings Sync后重新加载</code>)<br><img src="00-400x264.png" alt="安装VSCODE Settings Sync后重新加载"></p></li><li><p>重启后按快捷键 <strong>alt+shift+u</strong> (这里假设你第一次用)</p><ul><li>它会弹出一个窗口对应的是github上面的创建个人gist的页面,如果未登录请先登录github.(<code>github创建gist来存储设置</code>)<br><img src="01-400x445.png" alt="github创建gist来存储设置"></li><li>保存后会生成一个key(<code>请牢记token id,后面将会用到</code>)<br><img src="02-400x189.png" alt="请牢记token id,后面将会用到"></li></ul></li><li><p>切回到vscode,他会有个输入区,就是存放刚才生成的key(<code>输入刚才生成的key</code>)<br><img src="03-400x75.png" alt="输入刚才生成的key"></p></li><li><p>然后理论上他就开始对你<code>本机的配置</code>进行一个<code>扫描上传</code>了,上传完成后,他会弹出控制台提示备份(上传)插件成功<br><img src="" alt=""></p></li><li><p>上传完成后会生成一个ID，要记下来<code>ID</code>和<code>token key</code>不同</p></li><li><p>接下来我们到另一台电脑上了<code>下载配置</code>.同样的<code>先安装Settings Sync插件</code>,并重新加载.</p></li><li><p>然后按快捷键<strong>alt+shift+d</strong>,就应该会弹出一个输入框,请在这里输入<code>之前</code>保存下来的<code>token key 和 (GIST ID)</code>,回车后将会自动下载之前上传的配置.<br><img src="1.png" alt=""><br><img src="2.png" alt=""></p></li><li><p>那么下载完成后,你这台电脑修改了相关配置再次上传就好了.是不是感觉方便多了~</p></li><li><p>其他的说明,如果在输入<code>gist id写错</code>了,读取不到的情况下,大概需要<code>重置设置</code>,按<code>F1</code>,输入<code>sync</code>,这里有重置选项.试试看~ (<code>重置sync的gist配置信息等</code>)<br><img src="04.png" alt="重置sync的gist配置信息等"></p></li><li><p>如果忘记token可以到一下地址查看token</p><ul><li>Win下：<code>C:\Users\Administrator\AppData\Roaming\Code\User</code></li><li>Mac下：<code>~/Library/Application Support/Code/User/syncLocalSettings.json</code></li><li>Linux下：<code>~/.config/Code/User/syncLocalSettings.json</code><br>进入目录后，找到 <code>syncLocalSettings.json</code>这个文件，<code>查找token</code>，并替换后面复制的值，就可以顺利进行同步配置信息了。</li></ul></li><li><p>如果忘记gist id,可以到设置查看id<br><img src="20180815183812965.png" alt="gist id"><br><img src="20180815183830941.png" alt="gist id"></p></li></ol><p><strong>注意：</strong>(<code>ID</code>和<code>key</code>都要记下来)(<code>恢复</code>)插件需要用到 <code>很重要</code>!!! 建议上传到网盘 或者 笔记软件上</p><ol start="12"><li>如果token无效，要在github上重新生成，先在<code>原平台</code>修改并生成新的gist-id，再到新平台做上述操作。<br><a href="https://gist.github.com/用户名/token值或gist-id" target="_blank" rel="noopener">https://gist.github.com/用户名/token值或gist-id</a>值 可以查看相关数据；</li></ol><p>还有些其他的功能例如<code>自动上传下载</code>等等,不是很常用,大家可以自行看看官方文档,基本的使用方法就是这样了,我写的如果有问题或者哪里不明白的可以留言- -.</p><hr><p>插件地址：<br><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Setting-Sync-可同步包含的所有扩展和完整的用户文件夹&quot;&gt;&lt;a href=&quot;#Setting-Sync-可同步包含的所有扩展和完整的用户文件夹&quot; class=&quot;headerlink&quot; title=&quot;Setting Sync 可同步包含的所有扩展和完整的用户文件夹&quot;&gt;&lt;/a&gt;Setting Sync 可同步包含的所有扩展和完整的用户文件夹&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快捷键设置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Launch File&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Snippets Folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VSCode 扩展设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作空间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vscode" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/vscode/"/>
    
      <category term="vscode插件" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/vscode%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>TCP</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/08/08/TCP/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/08/08/TCP/</id>
    <published>2018-08-08T08:25:07.000Z</published>
    <updated>2018-09-05T06:30:33.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深入理TCP-IP模型"><a href="#深入理TCP-IP模型" class="headerlink" title="深入理TCP/IP模型"></a>深入理TCP/IP模型</h3><hr><p>网络模型最初是由各个互联网公司自己制定的，由于当时不规范，严重阻碍了互联网的发展，为了解决这个问题，国际标准化组织(OSI)制定了OSI模型,定义了<code>互联网通信</code>的标准,是设计和描述计算机<code>网络通信</code>的基本框架。</p><p><img src="osi7层模型.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;深入理TCP-IP模型&quot;&gt;&lt;a href=&quot;#深入理TCP-IP模型&quot; class=&quot;headerlink&quot; title=&quot;深入理TCP/IP模型&quot;&gt;&lt;/a&gt;深入理TCP/IP模型&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;网络模型最初是由各个互联网公司自己制定的，由于当时不规范，
      
    
    </summary>
    
    
      <category term="tcp" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/tcp/"/>
    
      <category term="http" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/http/"/>
    
      <category term="网路" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E7%BD%91%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>babel</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/25/babel/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/25/babel/</id>
    <published>2018-07-25T01:43:57.000Z</published>
    <updated>2018-09-05T06:30:33.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Babel 是一个广泛使用的 <code>ES6</code>转码器，可以将 ES6 代码转为 ES5 代码</p></blockquote><h3 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件.babelrc"></a>配置文件.babelrc</h3><p><code>presets</code>字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES2015转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-react</span><br><span class="line"></span><br><span class="line"><span class="comment">### 最新的规则</span></span><br><span class="line">npm install --save-dev babel-preset-stage 0-3</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-0</span><br><span class="line">$ npm install --save-dev babel-preset-stage-1</span><br><span class="line">$ npm install --save-dev babel-preset-stage-2</span><br><span class="line">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure></p><h3 id="Plugin-Preset-排序"><a href="#Plugin-Preset-排序" class="headerlink" title="Plugin/Preset 排序"></a>Plugin/Preset 排序</h3><ul><li><code>Plugin</code> 会运行在 <code>Preset</code> 之前。</li><li><code>Plugin</code> 会从<code>第一个</code>开始顺序执行。</li><li><code>Preset</code> 的顺序则刚好相反(从最后一个逆序执行)。</li></ul><h3 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h3><p>如果某些代码需要调用<code>Babel</code>的<code>API</code>进行转码，就要使用<code>babel-core</code>模块,一般在<code>node代码</code>中使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> es6Code = <span class="string">'let x = n =&gt; n + 1'</span>;</span><br><span class="line"><span class="keyword">var</span> es5Code = <span class="built_in">require</span>(<span class="string">'babel-core'</span>)</span><br><span class="line">  .transform(es6Code, &#123;</span><br><span class="line">    presets: [<span class="string">'es2015'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  .code;</span><br><span class="line"><span class="comment">// '"use strict";\n\nvar x = function x(n) &#123;\n  return n + 1;\n&#125;;'</span></span><br></pre></td></tr></table></figure></p><h3 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h3><p>Babel提供<code>babel-cli工具</code>，用于命令行转码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">$ babel example.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转码结果写入一个文件</span></span><br><span class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">$ babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个目录转码</span></span><br><span class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">$ babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数生成source map文件</span></span><br><span class="line">$ babel src -d lib -s</span><br></pre></td></tr></table></figure></p><h3 id="babel-node"><a href="#babel-node" class="headerlink" title="babel-node"></a>babel-node</h3><p>babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ babel-node es6.js</span><br></pre></td></tr></table></figure></p><h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h3><p><code>babel-register</code>模块改写<code>require</code>命令，为它加上一个钩子。此后，每当使用require加载<code>.js</code>、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.js"</span>);</span><br></pre></td></tr></table></figure></p><p>需要注意的是，<code>babel-register</code>只会对<code>require</code>命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p><hr><h3 id="babel-polyfill和runtime-Transform"><a href="#babel-polyfill和runtime-Transform" class="headerlink" title="babel-polyfill和runtime Transform"></a>babel-polyfill和runtime Transform</h3><p>Babel默认只转换新的<code>JavaScript句法</code>（syntax），而不转换新的<code>API</code>，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy`</code>、Reflect<code>、</code>Symbol<code>、</code>Promise<code>等</code>全局对象<code>，以及一些定义在</code>全局对象<code>上的方法（比如</code>Object.assign`）都不会转码。</p><h4 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h4><ul><li>Generator</li><li>Set</li><li>Map</li><li>Array.from</li><li>Array.prototype.includes</li></ul><h4 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h4><ul><li>全局垫片(会污染全局变量)</li><li>为开发应用准备(平常项目)</li><li>包含<code>core-js</code> 和<code>regenerate-runtime</code> (提供<code>async</code> 语法编译后的运行时环境)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-polyfill --save</span><br><span class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span></span><br></pre></td></tr></table></figure><h4 id="runtime-Transform"><a href="#runtime-Transform" class="headerlink" title="runtime Transform"></a>runtime Transform</h4><ul><li>局部垫片(不会污染全局变量)</li><li>为开发框架准备(例如vue)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime --Save-dev</span><br><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure><p>.babelrc的配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [<span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">            <span class="attr">"targets"</span>:&#123;</span><br><span class="line">                <span class="attr">"browsers"</span>:[<span class="string">"&gt; 1%"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"@babel/transform-runtime"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h4><p>对于以下代码执行时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key=<span class="string">'babel'</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    [key]=<span class="string">'foo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>babel默认会编译成以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123; <span class="attr">value</span>: value, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'babel'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = _defineProperty(&#123;&#125;, key, <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; <span class="attr">key</span>: <span class="string">'foo'</span> &#125;));</span><br></pre></td></tr></table></figure></p><p><code>_defineProperty</code>的帮助函数，但是这个帮助函数仅仅在<code>当前模块</code>中生效，因此其他模块中如果用到了同样的语法，编译后就会出现大量的<code>重复代码</code>。</p><h5 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h5><p><code>babel-polyfill</code> 是直接在<code>原型链</code>上增加方法,所以会污染<code>全局变量</code>和<code>内置的对象原型</code></p><h5 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a>babel-runtime</h5><p><code>Babel</code>为了解决这个问题，提供了单独的包 <code>babel-runtime</code> 供编译模块复用<code>工具函数</code>。<br>启用插件<code>babel-plugin-transform-runtime</code> 后，Babel 就会使用<code>babel-runtime</code> 下的工具函数，转译代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _defineProperty2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/defineProperty'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _defineProperty3 = _interopRequireDefault(_defineProperty2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'babel'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = (<span class="number">0</span>, _defineProperty3.default)(&#123;&#125;, key, <span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>但是</strong> <code>babel-runtime</code> 不能转码实例方法，比如这样的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'!!!'</span>.repeat(<span class="number">3</span>);</span><br><span class="line"><span class="string">'hello'</span>.includes(<span class="string">'h'</span>);</span><br></pre></td></tr></table></figure></p><hr><h3 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="babel-preset-env"></a>babel-preset-env</h3><ul><li><code>babel-preset-latest</code>： 支持现有所有ECMAScript版本的新特性，包括处于<code>stage 4</code>里的特性（已经确定的规范，将被添加到下个年度的）。</li><li><code>babel-preset-env</code> 功能类似 <code>babel-preset-latest</code>，优点是它会根据<code>目标环境</code>选择不支持的新特性来转译。</li><li><code>实验性</code>的属性（babel-preset-latest不支持的）需要手动安装配置相应的<code>plugins</code>或者<code>presets</code>。这样你再不需要 es20xx presets了。</li></ul><p><strong>问题：</strong> 为什么需要<code>env</code>?</p><h2 id="大部分现代浏览器已经支持ES6的generators了，但是如果你设置了babel-preset-es2015，generator函数还是会被转译成复杂的ES5代码。"><a href="#大部分现代浏览器已经支持ES6的generators了，但是如果你设置了babel-preset-es2015，generator函数还是会被转译成复杂的ES5代码。" class="headerlink" title="大部分现代浏览器已经支持ES6的generators了，但是如果你设置了babel-preset-es2015，generator函数还是会被转译成复杂的ES5代码。"></a>大部分现代浏览器已经支持ES6的<code>generators</code>了，但是如果你设置了<code>babel-preset-es2015</code>，<code>generator</code>函数还是会被转译成复杂的<code>ES5代码</code>。</h2><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><ul><li><code>modules</code>(string, 默认值: <code>&quot;commonjs&quot;</code>)<ul><li>将ES6模块语法转换为另一种模块类型，可选值:<ul><li>各种流行的模块化规范：”amd”、 “commonjs”、 “systemjs”、 “umd”</li><li>禁止转译：false</li></ul></li></ul></li><li><code>include</code>, <code>exclude</code> (Array of strings, 默认值: [])<ul><li>include 必须要转译的功能 (比如 覆盖有故障的本地功能)。跟单独启用相应插件是一样的。</li><li>exclude 禁止转译的功能</li></ul></li><li><code>debug</code> (boolean, default: false)<ul><li>以下内容都会用console.log输出 :<ul><li>目标环境</li><li>启用的transforms</li><li>启用的plugins</li><li>启用的polyfills</li></ul></li></ul></li><li><code>useBuiltIns</code> (boolean, 默认值: false)<ul><li><code>babel-preset-env</code>可以实现基于特定环境引入需要的<code>polyfill</code><ul><li><code>core-js</code>， 根据需要引入<code>ES5</code>，<code>ES6+</code>标准方法的实现<ul><li>安装 polyfill: npm install core-js –save</li><li>引入 polyfill: import “core-js”; </li></ul></li></ul></li><li><code>babel-polyfill</code> 包含<code>core-js</code> 和<code>regenerate-runtime</code>(提供 <code>async</code>语法编译后的运行时环境)。<ul><li>安装 polyfill: npm install babel-polyfill –save</li><li>引入 polyfill: import “babel-polyfill”;</li></ul></li><li>两种方法最终都会根据<code>环境</code>转译成特定的<code>polyfill</code>。 比如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/es7.string.pad-start"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/es7.string.pad-end"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/web.timers"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/web.immediate"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/web.dom.iterable"</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>note:</strong>在整个应用里只能引入一次<code>polyfill</code>，可以在 “main” 模块里一次引入。<br><code>useBuiltIns</code> 会使浏览器下载的代码变少 (最终打包的文件大小变小了)。但是不会节约内存， 因为polyfill本身只会安装缺少的部分。</p><hr><p>基于TC39不同阶段的提案的<code>Presets</code> (stage-0，1，2，3等) 也是去除的候选，因为在这些statges中的标准是不断变化的。提案可以在2个月内改变。因此，直接引用一些实验性的<code>plugins</code>会是更好的选择。</p><ul><li>stage 0 <ul><li>transform-do-expressions</li><li>transform-function-bind</li></ul></li><li>stage 1<ul><li>transform-class-constructor-call (启用)</li><li>transform-export-extensions</li></ul></li><li>stage 2<ul><li>syntax-dynamic-import</li><li>transform-class-properties</li><li><code>transform-decorators</code> – 在提案更新中被禁用 (可以同时使用 legacy 转换,babel7默认添加到stage0中)</li></ul></li><li>stage 3<ul><li>transform-object-rest-spread</li><li>transform-async-generator-functions</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Babel 是一个广泛使用的 &lt;code&gt;ES6&lt;/code&gt;转码器，可以将 ES6 代码转为 ES5 代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置文件-babelrc&quot;&gt;&lt;a href=&quot;#配置文件-babelrc&quot; class
      
    
    </summary>
    
    
      <category term="babel" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/babel/"/>
    
      <category term="node" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>mobx</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/25/mobx/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/25/mobx/</id>
    <published>2018-07-25T01:43:24.000Z</published>
    <updated>2018-09-05T06:30:33.781Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>promise详解</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/23/promise%E8%AF%A6%E8%A7%A3/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/23/promise详解/</id>
    <published>2018-07-23T03:17:40.000Z</published>
    <updated>2018-09-05T06:30:33.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h3><ul><li><strong>异步</strong>：所谓”异步”，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段,比如，在我们烧水时可以干很多事情,当水烧开后在用水洗脸。这种不连续的执行，就叫做异步。</li><li><strong>同步</strong>:连续的执行,例如在烧水的过程中我们一直等待水烧开而不去干别的事情。</li></ul><h3 id="异步发展历史"><a href="#异步发展历史" class="headerlink" title="异步发展历史"></a>异步发展历史</h3><ul><li>callback</li><li>Promise</li><li>gengrator函数</li><li>async-await</li></ul><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>了解异步时，我们先了解一下<code>高阶函数</code>这个概念</p><ul><li><strong>高阶函数：</strong><ul><li>接收一个或者多个函数作为参数</li><li>输出一个函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断数据类型 isType</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type,content</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content)===<span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="偏函数–-gt-预置参数"><a href="#偏函数–-gt-预置参数" class="headerlink" title="偏函数–&gt; 预置参数"></a>偏函数–&gt; 预置参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content)===<span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isString=isType(<span class="string">'String'</span>)</span><br><span class="line">isString(<span class="string">'哈哈'</span>)</span><br></pre></td></tr></table></figure><h4 id="预置函数作为参数"><a href="#预置函数作为参数" class="headerlink" title="预置函数作为参数"></a>预置函数作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loadsh _.after</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">times,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">--times==<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        callback()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> eat=after(<span class="number">3</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'饱了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 当函数执行三次之后，调用回调函数</span></span><br><span class="line">eat()</span><br><span class="line">eat()</span><br><span class="line">eat()</span><br></pre></td></tr></table></figure><h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">'zpfx'</span>;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>虽然callbake可以解决异步调用的问题,但是它也有诸多<strong>毛病</strong></p><ul><li>异步不支持<strong>try/catch</strong>,回调函数是在下一事件环中取出,所以一般在回调函数的第一个参数预置错误对象</li><li>回调<strong>地狱问题</strong>,异步多级依赖的情况下嵌套非常深，代码难以阅读的维护</li><li>多个异步在<strong>某一时刻</strong>获取所有异步的结果</li><li>结果不能通过<strong>return</strong>返回</li></ul><p>为了解决<strong>回调地狱</strong>问题，提出了Promise对象，并且后来加入了ES6标准。Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果</p><h4 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h4><ul><li>Pending Promise对象实例创建时候的初始状态</li><li>Fulfilled 可以理解为成功的状态</li><li>Rejected 可以理解为失败的状态</li></ul><p>先用promise解决第一个问题”回调地狱”<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.txt =&gt; 2.txt</span></span><br><span class="line"><span class="comment">// 2.txt =&gt; 我很帅</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./1.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">        fs.readFile(data,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="built_in">console</span>.log(data); <span class="comment">// 我很帅</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read();</span><br></pre></td></tr></table></figure></p><p><code>promise</code>实现就轻松多了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(file,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read(<span class="string">'./1.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> read(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>当第一个then中返回一个promise，会将返回的promise的结果,传递到下一个then中。这就是比较著名的链式调用了</p></blockquote><h4 id="解决同步异步的返回结果，按照顺序"><a href="#解决同步异步的返回结果，按照顺序" class="headerlink" title="解决同步异步的返回结果，按照顺序"></a>解决同步异步的返回结果，按照顺序</h4><blockquote><p>我们将多个异步请求的结果在同一时间进行汇总</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span>(<span class="params">time,callback</span>)</span>&#123;<span class="comment">//可以缓存函数 当达到条件时执行</span></span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        arr.push(data)</span><br><span class="line">        <span class="keyword">if</span>(--time===<span class="number">0</span>)&#123;</span><br><span class="line">            callback(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> out=after(<span class="number">3</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> resolve=<span class="function">(<span class="params">dir</span>)=&gt;</span>path.resolve(__dirname,dir)</span><br><span class="line"></span><br><span class="line">fs.readFile(resolve(<span class="string">"1.txt"</span>),<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">out(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(resolve(<span class="string">"2.txt"</span>),<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">out(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(resolve(<span class="string">"3.txt"</span>),<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">    out(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用promise实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(file,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all([read(<span class="string">'1.txt'</span>),read(<span class="string">'2.txt'</span>)]).then(<span class="function">(<span class="params">[template,data]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;template,data&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 不管两个promise谁先完成，Promise.all 方法会按照数组里面的顺序将结果返回</span></span><br></pre></td></tr></table></figure></p><h4 id="promise-API-详解"><a href="#promise-API-详解" class="headerlink" title="promise API 详解"></a>promise API 详解</h4><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h5><blockquote><p>接受一个数组，数组内都是Promise实例,返回一个Promise实例，这个Promise实例的状态转移取决于参数的Promise实例的状态变化。当参数中任何一个实例处于resolve状态时，返回的Promise实例会变为resolve状态。如果参数中任意一个实例处于reject状态，返回的Promise实例变为reject状态。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([read(<span class="string">'1.txt'</span>),read(<span class="string">'2.txt'</span>)]).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;template,data&#125;)</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h5><p>返回一个Promise实例，这个实例处于resolve状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'成功'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><p>返回一个Promise实例，这个实例处于reject状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">'失败'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123; </span><br><span class="line">   <span class="built_in">console</span>.log(data); </span><br><span class="line">&#125;,err=&gt;&#123; </span><br><span class="line"><span class="built_in">console</span>.log(err); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>我们发现Promise已经可以解决了<strong>异步编程</strong>问题,但是仍然不够优雅,我们更希望编写异步代码能够像<code>同步</code>代码一样简洁。</p><ul><li>genrator 函数要用* 来比标识，yield(暂停产出 )</li><li>他会将函数分割出好多个部分，调用一次next就会向下继续执行</li><li>返回结果是一个<code>迭代器</code>，迭代器有一个next方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器的实现</span></span><br><span class="line"><span class="comment">// 迭代器 就是有next方法的，每次调用后都会返回一个done和value的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">arrs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index=<span class="number">0</span>;<span class="comment">//默认先迭代第一项</span></span><br><span class="line">    <span class="keyword">let</span> len=arrs.length;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                value:arrs[index],</span><br><span class="line">                done:index++===len?<span class="literal">true</span>:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it=read([<span class="string">'react'</span>,<span class="string">'vue'</span>,<span class="string">'angular'</span>]);</span><br><span class="line"><span class="keyword">let</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;done,value&#125;=it.next();</span><br><span class="line">flag=done;</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;<span class="keyword">while</span>(!flag)</span><br></pre></td></tr></table></figure><h4 id="generator的用法"><a href="#generator的用法" class="headerlink" title="generator的用法"></a>generator的用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span>* (yiled <span class="string">'222'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> b=yiled <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it=read()</span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'213'</span>))<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'100'</span>))<span class="comment">//200</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'100'</span>))<span class="comment">//100</span></span><br></pre></td></tr></table></figure><ul><li>yield 后面跟着的是value的值</li><li>yield 等号前面的是我们当前调用next传进来的值</li><li>第一次next传值是无效的<br><img src="generator.png" alt="promise"></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  异步 generator 主要和promise搭配使用</span></span><br><span class="line"><span class="keyword">let</span> bluebird=<span class="built_in">require</span>(<span class="string">"bluebird"</span>)</span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">let</span> resolve=<span class="function">(<span class="params">dir</span>)=&gt;</span>path.resolve(__dirname,dir)</span><br><span class="line"><span class="keyword">let</span> read=bluebird.promisify(fs.readFile)</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">r</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content1=<span class="keyword">yield</span> read(resolve(<span class="string">"./1.txt"</span>),<span class="string">"utf8"</span>);</span><br><span class="line">    <span class="keyword">let</span> content2=<span class="keyword">yield</span> read(resolve(content1),<span class="string">"utf8"</span>)</span><br><span class="line">    <span class="keyword">return</span> content2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用co这类的迭代库实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代库</span></span><br><span class="line"><span class="keyword">let</span> it=r();</span><br><span class="line">it.next().value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">//2.txt</span></span><br><span class="line">    it.next(data).value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(it.next(data).value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="co"><a href="#co" class="headerlink" title="co"></a>co</h4><p>有node大神tj写的co库，可以自动的将generator进行迭代<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> co=<span class="built_in">require</span>(<span class="string">"co"</span>);</span><br><span class="line">co(r()).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>手写co库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">it</span>)</span>&#123;<span class="comment">//it是迭代器</span></span><br><span class="line"><span class="comment">//返回promise</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 考虑到是异步调用，一般用递归实现，while实现的是同步调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;value,done&#125;=it.next(d);</span><br><span class="line">        <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">            value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                next(data)</span><br><span class="line">            &#125;,reject)<span class="comment">//如果抛出异常，就立马抛出</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resolve(value)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="async-await-异步的终极实现"><a href="#async-await-异步的终极实现" class="headerlink" title="async/await - 异步的终极实现"></a>async/await - 异步的终极实现</h3><ul><li>async和await就是generator和co的语法糖,使用async关键字，你可以轻松地达成之前使用生成器和co函数所做到的工作</li><li>用async来修饰函数 async 需要陪await await只能跟<code>promise</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> contetn1=<span class="keyword">await</span> read(resolve(<span class="string">"1000.txt"</span>),<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="keyword">let</span> contetn2=<span class="keyword">await</span> read(resolve(contetn1),<span class="string">"utf8"</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;<span class="comment">//如果出错会catch</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'e'</span>,e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//async函数返回的是promise </span></span><br><span class="line">r().then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="async-await解决的问题有哪些"><a href="#async-await解决的问题有哪些" class="headerlink" title="async/await解决的问题有哪些"></a>async/await解决的问题有哪些</h4><ul><li><ol><li>回调地狱</li></ol></li><li>2.并发执行异步，在同一时刻同步返回结果 promise.all</li><li>3.解决了返回值的问题</li><li>4.可以实现try/catch</li></ul><h3 id="Q库"><a href="#Q库" class="headerlink" title="Q库"></a>Q库</h3><blockquote><p>我们发现无论是generator还是async/await都离不开promise,我们在介绍几个有关promise的库。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要下载npm install q</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span>=<span class="built_in">require</span>(<span class="string">"./Promise"</span>)</span><br><span class="line"><span class="keyword">let</span> Q=<span class="built_in">require</span>(<span class="string">"q"</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"fs"</span>).readFile(url,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)reject(err);</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="blueBird"><a href="#blueBird" class="headerlink" title="blueBird"></a>blueBird</h3><blockquote><p>blueBird中有两个常用的方法一个叫<code>promisify</code>另一个叫<code>promisifyAll</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">fn</span>)</span>&#123;<span class="comment">//promise化 将回调函数在内部进行处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fn(...arg,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)reject(err)</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">promisify(fs.readFile)(url,<span class="string">"utf8"</span>).then()</span><br></pre></td></tr></table></figure></p></blockquote><p>promisifyAll(fs)将所有的方法全部增加一个promise化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key]===<span class="string">'function'</span>)&#123;</span><br><span class="line">            obj[<span class="string">`<span class="subst">$&#123;key&#125;</span>Async`</span>]=promisify(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">promisifyAll(fs)</span><br><span class="line">fs.readAsync(url,<span class="string">"utf8"</span>).then()</span><br></pre></td></tr></table></figure></p><h3 id="实现Promise"><a href="#实现Promise" class="headerlink" title="实现Promise"></a>实现Promise</h3><ul><li>Promise是一个类,需要传递一个函数,这个函数我们称之为执行函数,函数中有两个参数resolve和reject他们也是函数，调用resolve表示成功，调用reject表示失败</li><li>pending（进行中）、fulfilled（成功）、rejected（失败)</li><li>成功就不会再调用失败,默认状态是等待状态</li><li>then是原型上的一个方法接收两个参数分别是成功的回调和失败的回调</li><li>调用resolve后会执行成功的回调，调用reject后会执行失败的回调<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="异步Promise"><a href="#异步Promise" class="headerlink" title="异步Promise"></a>异步Promise</h4><p>在new Promise时内部可以写<code>异步代码</code>,并且产生的实例可以<code>then多次</code>,我们可以先将then中的成功的回调和失败的回调存到<code>数组内</code>，当成功时调用成功的数组即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">+   <span class="keyword">this</span>.onFulfilledcallback=[];<span class="comment">///存放成功的回调</span></span><br><span class="line">+   <span class="keyword">this</span>.onRejectedCallback = []; <span class="comment">//存放then失败的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">        <span class="comment">// 依次执行成功的回调</span></span><br><span class="line">+        <span class="keyword">this</span>.onFulfilledcallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">+            value()</span><br><span class="line">+        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">+        <span class="keyword">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">+            value()</span><br><span class="line">+        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">+        <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">+            onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">+        &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">+        <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">+              onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">+        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h4><p>promise实现链式调用,返回的并不是this而是一个<code>新的promise</code>,因为:如果当前promise已经进入<code>成功了的回调</code>，回调中发生了异常如果返回的仍是当前的promise那么状态无法更改到失败态！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">   <span class="keyword">this</span>.onFulfilledcallback=[];<span class="comment">///存放成功的回调</span></span><br><span class="line">  <span class="keyword">this</span>.onRejectedCallback = []; <span class="comment">//存放then失败的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">        <span class="comment">// 依次执行成功的回调</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledcallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">+     <span class="keyword">let</span> promise2; <span class="comment">// promise2为then调用后返回的新promise</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">+        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">+             onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">+        &#125;)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">+        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">+              onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">+        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">+        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">              onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">+    &#125;</span><br><span class="line">+    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="resolvePromise"><a href="#resolvePromise" class="headerlink" title="resolvePromise"></a>resolvePromise</h3><p>then返回的结果可能是promise和value或者object<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">   <span class="keyword">this</span>.onFulfilledcallback=[];<span class="comment">///存放成功的回调</span></span><br><span class="line">  <span class="keyword">this</span>.onRejectedCallback = []; <span class="comment">//存放then失败的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">        <span class="comment">// 依次执行成功的回调</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledcallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> promise2; <span class="comment">// promise2为then调用后返回的新promise</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// x是then返回的结果 </span></span><br><span class="line">            <span class="keyword">let</span> x = onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">            resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">        &#125;)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">let</span> x= onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">           resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">let</span> x=onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">           resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">             <span class="keyword">let</span> x= onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">             resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">p2,x,resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 处理结果时,尽可能完善一些</span></span><br><span class="line">    <span class="comment">//如果then返回的值和p2是同一个值，规范要求抛出一个类型异常</span></span><br><span class="line">    <span class="keyword">if</span>(p2===x)&#123;</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"循环引用"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">let</span> called;<span class="comment">//表示是否调用成功或者失败</span></span><br><span class="line">    <span class="comment">// 可能是一个thenable(带有then方法)对象</span></span><br><span class="line">    <span class="keyword">if</span>(x!==<span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x===<span class="string">'function'</span>))&#123;</span><br><span class="line">        <span class="comment">// x可能是promise</span></span><br><span class="line">        <span class="keyword">try</span>&#123;<span class="comment">// 如果用defineProperty定义的then方法获取时可能会有异常</span></span><br><span class="line">            <span class="keyword">let</span> then=x.then;</span><br><span class="line">            <span class="comment">// 如果then是函数,说明是promise,我们要让promse执行</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> then===<span class="string">'function'</span>)&#123;</span><br><span class="line">                then.call(x,<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                    called=<span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//y可能还是一个Promise，再去解析知道返回的是一个普通值</span></span><br><span class="line">                    resolvePromise(promise2,y,resolve,reject)</span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                    called=<span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//失败的回调</span></span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 不是函数,x就是一个普通的对象,直接成功即可</span></span><br><span class="line">                resolve(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                called=<span class="literal">true</span>;</span><br><span class="line">            reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 是普通值直接调用成功</span></span><br><span class="line">        resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="then中的方法异步执行"><a href="#then中的方法异步执行" class="headerlink" title="then中的方法异步执行"></a>then中的方法异步执行</h4><p>为了保证程序执行的一致性,规范中要求then中的方法必须在下一队列中执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> promise2; <span class="comment">// promise2为then调用后返回的新promise</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// x是then返回的结果 </span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x = onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">             </span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">             setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x= onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                </span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x = onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.value)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="值的穿透"><a href="#值的穿透" class="headerlink" title="值的穿透"></a>值的穿透</h4><p>在规范中定义then函数可以不传参,不传参默认会将成功的结果和失败的结果继续向下传递<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFufilled, onRejected</span>) </span>&#123;</span><br><span class="line">+    onFufilled = <span class="keyword">typeof</span> onFufilled === <span class="string">'function'</span>?onFufilled:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">+        <span class="keyword">return</span> value</span><br><span class="line">+    &#125;</span><br><span class="line">+    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>?onRejected:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">+        <span class="keyword">throw</span> err</span><br><span class="line">+    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="resolve接收promise"><a href="#resolve接收promise" class="headerlink" title="resolve接收promise"></a>resolve接收promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123; <span class="comment">// 调用resolve 会传入为什么成功</span></span><br><span class="line">+   <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">'object'</span> || <span class="keyword">typeof</span> value === <span class="string">'function'</span>)) &#123;</span><br><span class="line">+      <span class="keyword">if</span>(<span class="keyword">typeof</span> value.then === <span class="string">'function'</span>)&#123;</span><br><span class="line">+           <span class="comment">// 将当前promise成功的结果再次传回resolve函数中</span></span><br><span class="line">+           <span class="keyword">return</span> value.then(resolve,reject);</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br></pre></td></tr></table></figure><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all=<span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arrs=[];<span class="comment">//返回的结果</span></span><br><span class="line">    <span class="keyword">let</span> ind=<span class="number">0</span>;<span class="comment">//表示成功了几次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">processDate</span>(<span class="params">index,y</span>)</span>&#123;</span><br><span class="line">            arr[index]=y;</span><br><span class="line">            <span class="keyword">if</span>(++ind===promises.length)&#123;</span><br><span class="line">                resolve(arrs)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">          promises[i].then(<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">              processDate(i,y)</span><br><span class="line">          &#125;,reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promose-race"><a href="#Promose-race" class="headerlink" title="Promose.race"></a>Promose.race</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race=<span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">          promises[i].then(resolve,reject)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-resolve-1"><a href="#Promise-resolve-1" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-reject-1"><a href="#Promise-reject-1" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;异步与同步&quot;&gt;&lt;a href=&quot;#异步与同步&quot; class=&quot;headerlink&quot; title=&quot;异步与同步&quot;&gt;&lt;/a&gt;异步与同步&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;异步&lt;/strong&gt;：所谓”异步”，简单说就是一个任务分成两段，先执行第一段，然后转而
      
    
    </summary>
    
    
      <category term="promise" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/promise/"/>
    
      <category term="异步" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>css工程化</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/10/css%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/10/css工程化/</id>
    <published>2018-07-10T07:20:50.000Z</published>
    <updated>2018-09-05T06:30:33.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h3><ul><li>组织</li><li>优化</li><li>构建</li><li>维护</li></ul><h3 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a>postcss</h3><p><img src="postcss.jpg" alt="postcss"></p><ul><li>postcss本身只有<code>解析能力</code>–可以检测<code>css代码</code>是否正确</li><li>各种神奇的特性全靠插件</li><li>目前至少有200多个插件</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><code>import</code> 模块合并</li><li><code>autoprefixier</code> 自动加前缀</li><li><code>cssnano</code> 压缩代码</li><li><code>cssnext</code> 使用css新特性</li><li><code>precss</code> 变量、mixin、循环等</li></ul><h3 id="BrowsersList"><a href="#BrowsersList" class="headerlink" title="BrowsersList"></a>BrowsersList</h3><p><img src="BrowserList.jpg" alt="BrowserList"></p><h3 id="cssnext"><a href="#cssnext" class="headerlink" title="cssnext"></a>cssnext</h3><p><img src="cssnext.jpg" alt="cssnext"></p><h3 id="precss"><a href="#precss" class="headerlink" title="precss"></a>precss</h3><ul><li>变量</li><li>条件</li><li>循环</li><li>mixin Extend</li><li>import</li><li>属性值引用</li></ul><h3 id="postcss支持的构建工具"><a href="#postcss支持的构建工具" class="headerlink" title="postcss支持的构建工具"></a>postcss支持的构建工具</h3><ul><li>cli 命令行工具</li><li>webpack post-loader</li><li>Gulp gulp-postcss</li><li>Grunt grunt-postcss</li><li>Rollup rollup-postcss</li><li>…</li></ul><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li>js是整个应用的核心入口</li><li>一切资源均有js管理依赖</li><li>一切资源均有webpack打包</li></ul><h3 id="webpack和css"><a href="#webpack和css" class="headerlink" title="webpack和css"></a>webpack和css</h3><ul><li>css-loader 将css变成js</li><li>style-loader将js样式插入head</li><li>extractTextPlugin 将css从js中提取出来</li><li>css modules 解决css命名冲突的问题</li><li>less-loader sass-loader 各类预处理器</li><li>postcss-loader Postcss处理</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>如何解决css模块化的问题<ul><li>Less Sass等css预处理器</li><li>Postcss插件（postcss-import/press等）</li><li>webpack处理css(css-loader+style-loader)</li></ul></li><li>postcss可以做什么？<ul><li>取决于插件可以做什么</li><li>autoprefixer cssnext precss 等 兼容性处理</li><li>import模块合并</li><li>css语法检查 兼容性检查</li><li>压缩文件</li></ul></li><li>css modules是做什么的，如何使用<ul><li>解决类名冲突问题</li><li>使用postcss或者webpack等构建工具进行编译</li><li>在HTML模板中使用编译过程产生的类名</li></ul></li><li>为什么使用js来引用、加载css<ul><li>js作为入口、管理资源有天然的优势</li><li>将组件结构、样式、行为封装到一起，增加内聚</li><li>可以做更多处理（webpack）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关注点&quot;&gt;&lt;a href=&quot;#关注点&quot; class=&quot;headerlink&quot; title=&quot;关注点&quot;&gt;&lt;/a&gt;关注点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组织&lt;/li&gt;
&lt;li&gt;优化&lt;/li&gt;
&lt;li&gt;构建&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;po
      
    
    </summary>
    
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
      <category term="css工程化" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>css效果</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/10/css%E6%95%88%E6%9E%9C/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/10/css效果/</id>
    <published>2018-07-10T03:03:53.000Z</published>
    <updated>2018-09-05T06:30:33.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果属性"><a href="#效果属性" class="headerlink" title="效果属性"></a>效果属性</h3><ul><li>这个效果怎么实现？</li><li>css最出彩的部分</li><li>box-shadow</li><li>text-shadow</li><li>border-radius</li><li>background</li><li>clip-path</li></ul><h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h3><ul><li>营造层次感(立体感)</li><li>充当没有宽度的边框</li><li>特殊效果</li><li>相当于元素的复制,可以制作一个div画出炫酷的效果<br><img src="box-shadow.png" alt="box-shadow"><h3 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h3></li><li>立体感 </li><li>印刷品质感</li></ul><h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><ul><li>圆角矩形</li><li>圆形</li><li>半圆/扇形</li><li>一些奇怪的角角</li></ul><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><ul><li>纹理、图案</li><li>渐变</li><li>雪碧图动画</li><li>背景图尺寸适应</li></ul><h3 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a>clip-path</h3><ul><li>按路径对容器进行裁剪</li><li>常见几何图形</li><li>自定义路径</li><li>原容器的大小不变,可以做容器内动画</li></ul><h3 id="3d-变换"><a href="#3d-变换" class="headerlink" title="3d 变换"></a>3d 变换</h3><ul><li>变换 transform<br><img src="transform.jpg" alt="transform"></li><li>在3d空间中进行变换<br><img src="3d.jpg" alt="3d"></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>如何用一个div画xxx<ul><li>box-shadow无限投影</li><li>::before</li><li>::after</li></ul></li><li>如何产生不占空间的边框<ul><li>outline</li><li>box-shadow</li></ul></li><li>如何实现圆形元素(头像)<ul><li>border-radius:50%;</li></ul></li><li>如何实现ios图标的圆角<br><img src="svg.jpg" alt="clip-path"><ul><li>clip-path:(svg)</li></ul></li><li>如何实现半圆、扇形等图形<ul><li>border-radius 组合：<ul><li>有无边框</li><li>边框粗细</li><li>圆角半径</li></ul></li></ul></li><li>如何实现背景图居中显示/不重复/改变大小<ul><li>background-position</li><li>background-repeat</li><li>background-size(cover/contain)</li></ul></li><li>如何平移/放大一个元素<ul><li>transform:translateX(100px)</li><li>transform:scale(2)</li></ul></li><li>如何实现3D效果<ul><li>perspective:500px;</li><li>transform-style:preserve-3d</li><li>transform:translate rotate…</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;效果属性&quot;&gt;&lt;a href=&quot;#效果属性&quot; class=&quot;headerlink&quot; title=&quot;效果属性&quot;&gt;&lt;/a&gt;效果属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这个效果怎么实现？&lt;/li&gt;
&lt;li&gt;css最出彩的部分&lt;/li&gt;
&lt;li&gt;box-shadow&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
      <category term="css效果" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>css动画</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/09/css%E5%8A%A8%E7%94%BB/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/09/css动画/</id>
    <published>2018-07-09T08:57:58.000Z</published>
    <updated>2018-09-05T06:30:33.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="动画的原理"><a href="#动画的原理" class="headerlink" title="动画的原理"></a>动画的原理</h3><ul><li>视觉暂留作用</li><li>画面逐渐变化</li></ul><h3 id="动画的作用"><a href="#动画的作用" class="headerlink" title="动画的作用"></a>动画的作用</h3><ul><li>愉悦感</li><li>引起注意</li><li>反馈</li><li>掩饰</li></ul><h3 id="css中的动画类型"><a href="#css中的动画类型" class="headerlink" title="css中的动画类型"></a>css中的动画类型</h3><ul><li>transition补间动画</li><li>keyframe关键帧动画</li><li>逐帧动画 </li></ul><h4 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h4><p><img src="补间动画.jpg" alt="补间动画"></p><ul><li>位置- 平移（left/right/margin/transform）</li><li>方位-旋转(transform)</li><li>大小-缩放（transform）</li><li>透明度（opacity）</li><li>其他-<code>线性变换</code>（transform）</li></ul><h4 id="timing-easing"><a href="#timing-easing" class="headerlink" title="timing(easing)"></a>timing(easing)</h4><p> 定义动画<code>进度</code>和<code>时间</code>的关系<br><img src="timing.jpg" alt="timing"></p><h3 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h3><ul><li>相当于多个补间动画</li><li>与元素状态的变化无关</li><li>定义更加灵活<br><img src="关键帧动画.png" alt="关键帧动画"></li></ul><h3 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h3><ul><li>适用于无法补间计算的动画</li><li>资源较大</li><li>使用steps() 指定关键帧之间有多少个动画<br><img src="逐帧动画.png" alt="逐帧动画"></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>css的动画实现方式有几种？<ul><li>transition</li><li>keyframes(animation)</li></ul></li><li>过渡动画和关键帧动画的区别<ul><li>过渡动画需要有状态的变化</li><li>关键帧动画不需要状态的变化</li><li>关键帧动画能控制更精细</li></ul></li><li>如何实现逐帧动画<ul><li>使用关键帧动画</li><li>去掉补间(steps)</li></ul></li><li>css动画的性能<ul><li>性能不坏</li><li>部分情况下优于JS</li><li>但是JS可以做到更好</li><li>部分高危属性<ul><li>box-shadow等</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;动画的原理&quot;&gt;&lt;a href=&quot;#动画的原理&quot; class=&quot;headerlink&quot; title=&quot;动画的原理&quot;&gt;&lt;/a&gt;动画的原理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;视觉暂留作用&lt;/li&gt;
&lt;li&gt;画面逐渐变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;动画的作用&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="css动画" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css%E5%8A%A8%E7%94%BB/"/>
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML汇总</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/09/HTML%E6%B1%87%E6%80%BB/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/09/HTML汇总/</id>
    <published>2018-07-09T06:13:01.000Z</published>
    <updated>2018-09-05T06:30:33.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML常见元素"><a href="#HTML常见元素" class="headerlink" title="HTML常见元素"></a>HTML常见元素</h2><h3 id="head区的元素-页面相关资源、信息描述"><a href="#head区的元素-页面相关资源、信息描述" class="headerlink" title="head区的元素(页面相关资源、信息描述)"></a>head区的元素(页面相关资源、信息描述)</h3><ul><li>meta</li><li>title</li><li>style</li><li>link</li><li>script</li><li>base</li></ul><h3 id="body区的元素"><a href="#body区的元素" class="headerlink" title="body区的元素"></a>body区的元素</h3><ul><li>div/section/article/aside/header/footer</li><li>p</li><li>span/em/strong</li><li>table/thead/tbody/tr/td</li><li>ul/ol/li/dl/dt/dd</li><li>a</li><li>form/input/select/textarea/button</li></ul><h3 id="重要元素"><a href="#重要元素" class="headerlink" title="重要元素"></a>重要元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面字符集 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 以iphone为例，如果不指定viewport的话，视图（viewport）的默认宽度为980px,加viewport来适配移动端 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,iniial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 指定基础路径 页面中路径会以该路径为基准计算 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>viewport实例<br><img src="viewport.jpg" alt="viewport"></p><h3 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h3><ul><li>a[href,target]</li><li>img[src,alt]</li><li>table td[colspan,rowspan]</li><li>form[target,method.enctype]</li><li>input[type,value]</li><li>button[type]</li><li>select&gt;option[value]</li><li>label[for]</li></ul><h3 id="如何理解html"><a href="#如何理解html" class="headerlink" title="如何理解html"></a>如何理解html</h3><ul><li>html”文档”</li><li>描述文档的”结构”</li><li><a href="http://h50.github.io" target="_blank" rel="noopener">有区块和大纲</a></li></ul><h3 id="html版本"><a href="#html版本" class="headerlink" title="html版本"></a>html版本</h3><ul><li>HTML4/4.0.1(SGML)</li><li>XHTML(XML)</li><li>HTML5</li></ul><p><a href="http://validator.w3.org/#validate_by_upload" target="_blank" rel="noopener">检查页面是否符合标准</a><br><img src="HTML版本.jpg" alt="HTML版本"></p><h3 id="HTML5新增内容"><a href="#HTML5新增内容" class="headerlink" title="HTML5新增内容"></a>HTML5新增内容</h3><ul><li>新区块标签<ul><li>section</li><li>article</li><li>nav</li><li>aside</li></ul></li><li>表单增强<ul><li>日期、时间、搜索</li><li>表单验证</li><li>Placeholder 自动聚焦</li></ul></li><li>新增语义<ul><li>header/footer头尾</li><li>section/article区域</li><li>nav 导航</li><li>aside 不重要内容</li><li>em/strong强调</li><li>i–&gt;icon</li></ul></li></ul><h3 id="HTML元素分类"><a href="#HTML元素分类" class="headerlink" title="HTML元素分类"></a>HTML元素分类</h3><ul><li>按默认样式分<ul><li>块级 block</li><li>行内 inline</li><li>inline-block</li></ul></li><li><a href="https://www.w3.org/TR/html5/dom.html#kinds-of-content" target="_blank" rel="noopener">按内容分</a><br><img src="flow.jpg" alt="flow"></li></ul><h3 id="HTML元素嵌套关系"><a href="#HTML元素嵌套关系" class="headerlink" title="HTML元素嵌套关系"></a>HTML元素嵌套关系</h3><ul><li>块级元素可以包含行内元素</li><li>块级元素不一定能包含块级元素,例如p</li><li>“行内元素一般不能不含块级元素”,例如a</li></ul><h3 id="为什么a-gt-div是合法的？"><a href="#为什么a-gt-div是合法的？" class="headerlink" title="为什么a&gt;div是合法的？"></a>为什么a&gt;div是合法的？</h3><ul><li>嵌套关系来自于内容分类和Content module</li><li>不一定合法，根据html5文档a标签包裹块级元素时，会将a元素变成透明的，看包裹a元素的标签是块级元素还是行内元素，例如：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 合法，应为body包裹a元素，是块级元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>2121221<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不合法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>2121221<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML元素默认样式"><a href="#HTML元素默认样式" class="headerlink" title="HTML元素默认样式"></a>HTML元素默认样式</h3><ul><li>默认样式的意义</li><li>默认样式带来的问题</li><li>css Reset</li></ul><h3 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h3><ul><li>doctype的意义是什么？<ul><li>让浏览器以标准模式渲染</li><li>让浏览器知道元素的合法性</li></ul></li><li>HTML XHTML HTML5的关系<ul><li>HTML属于SGML</li><li>XHTML属于XML,是HTML进行XML严格化的结果</li><li>HTML5不属于SGML或XML,比XHTML宽松</li></ul></li><li>HTML5有什么变化<ul><li>新的语义化元素</li><li>表单增强</li><li>新的API(离线、音视频、图形、实时通信、本地存储、设备能力)</li><li>分类和嵌套变更</li></ul></li><li>em和i有什么区别？<ul><li>em是语义化的标签，表强调</li><li>i 是纯样式的标签，表斜体</li><li>HTML5中i不推荐使用，一般用作图标</li></ul></li><li>语义化的意义是什么？<ul><li>开发者容易理解</li><li>机器容易理解结构（搜索、读屏软件）</li><li>有助于SEO</li><li>semantic microdata</li></ul></li><li>那些元素可以自闭合<ul><li>表单元素input</li><li>图片 img</li><li>br、hr</li><li>meta、link</li></ul></li><li>HTML和DOM的关系<ul><li>HTML是”死”的</li><li>DOM是由HTML解析而来的，是活的</li><li>JS可以维护DOM</li></ul></li><li><p>property和attribute的区别</p><ul><li>attribute是“死”的</li><li>property是“活”的</li><li>attribute的改变不会影响property，反之相同<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span> //</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">$0.value="1"//property</span></span><br><span class="line"><span class="undefined">$0.setAttribute("value",'23')</span></span><br><span class="line"><span class="undefined">$0.value //1</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>form的作用有哪些？</p><ul><li>直接提交表单</li><li>使用submit/reset按钮</li><li>便于浏览器保存表单</li><li>第三方库可以整体提取值</li><li>第三库可以进行表单验证</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML常见元素&quot;&gt;&lt;a href=&quot;#HTML常见元素&quot; class=&quot;headerlink&quot; title=&quot;HTML常见元素&quot;&gt;&lt;/a&gt;HTML常见元素&lt;/h2&gt;&lt;h3 id=&quot;head区的元素-页面相关资源、信息描述&quot;&gt;&lt;a href=&quot;#head区的元素-
      
    
    </summary>
    
    
      <category term="HTML" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/HTML/"/>
    
      <category term="HTML汇总" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/HTML%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>框架中的css</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/06/%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84css/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/06/框架中的css/</id>
    <published>2018-07-06T08:23:39.000Z</published>
    <updated>2018-09-05T06:30:33.885Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Angular Vue React 三大框架</li><li>Angular Vue 内置样式集成</li><li>React 一些业界实践</li></ul><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><ul><li>Angular.js(1.x)<ul><li>没有样式集成能力</li></ul></li><li>Angular (2+)<ul><li>提供了样式封装能力</li><li>与组件深度集成</li></ul></li></ul><h3 id="ShadowDOM"><a href="#ShadowDOM" class="headerlink" title="ShadowDOM"></a>ShadowDOM</h3><ul><li>逻辑上一个DOM</li><li>结构上存在子集结构<br><img src="video.jpg" alt="video"><br><img src="开启shadowDom.png" alt="开启shadow"></li></ul><h3 id="Scoped-css"><a href="#Scoped-css" class="headerlink" title="Scoped css"></a>Scoped css</h3><ul><li>限定了范围的css</li><li>无法影响外部元素</li><li>外部样式一般不影响内部</li><li>可以通过<code>/deep/</code>或<code>&gt;&gt;&gt;</code>穿透</li></ul><h3 id="模拟scoped-css-兼容性差"><a href="#模拟scoped-css-兼容性差" class="headerlink" title="模拟scoped css (兼容性差)"></a>模拟scoped css (兼容性差)</h3><ul><li>方案1：随机选择器(不支持)</li><li>方案2：随机属性<ul><li><code>&lt;div abcdefg&gt;</code></li><li><code>div[abcdefg]{}</code></li></ul></li></ul><h2 id="vue中模拟Scoped-css"><a href="#vue中模拟Scoped-css" class="headerlink" title="vue中模拟Scoped css"></a>vue中模拟Scoped css</h2><ul><li>随机选择器<ul><li>css modules</li></ul></li><li>随机属性<ul><li><code>&lt;div abcdefg&gt;</code></li><li><code>div[abcdefg]{}</code></li></ul></li></ul><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><ul><li>官方没有集成方案</li><li>社区方案众多<ul><li>css modules</li><li>(babel)react-css-modules</li><li><a href="https://www.styled-components.com/" target="_blank" rel="noopener">styled components</a></li><li>styled jsx</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Angular Vue React 三大框架&lt;/li&gt;
&lt;li&gt;Angular Vue 内置样式集成&lt;/li&gt;
&lt;li&gt;React 一些业界实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Angular&quot;&gt;&lt;a href=&quot;#Angular&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
      <category term="框架中的css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84css/"/>
    
  </entry>
  
  <entry>
    <title>css框架bootstarp</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/06/css%E6%A1%86%E6%9E%B6bootstarp/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/06/css框架bootstarp/</id>
    <published>2018-07-06T06:02:10.000Z</published>
    <updated>2018-09-05T06:30:33.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是bootstrap"><a href="#什么是bootstrap" class="headerlink" title="什么是bootstrap?"></a>什么是bootstrap?</h3><ul><li>一个css框架</li><li>twitter出品</li><li>提供通用基础样式</li></ul><h3 id="Bootstrap-4"><a href="#Bootstrap-4" class="headerlink" title="Bootstrap 4"></a>Bootstrap 4</h3><ul><li>兼容IE10+</li><li>使用flexbox布局</li><li>抛弃Nomalize.css</li><li><code>提供布局</code>和<code>reboot版本</code></li></ul><h3 id="Bootstrap主要做什么？"><a href="#Bootstrap主要做什么？" class="headerlink" title="Bootstrap主要做什么？"></a>Bootstrap主要做什么？</h3><ul><li>基础样式</li><li>常用组件</li><li>js插件</li></ul><h3 id="Bootstrap-js组件"><a href="#Bootstrap-js组件" class="headerlink" title="Bootstrap js组件"></a>Bootstrap js组件</h3><ul><li>用于组件交互</li><li>dropdown(下拉)</li><li>modle(弹框)</li><li>…</li><li>基于jQuery</li><li>poper.js</li><li>bootstrap.js</li></ul><h4 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h4><ul><li>基于<code>data-*</code>属性</li><li>基于<code>js-api</code></li></ul><h3 id="bootstrap响应式布局"><a href="#bootstrap响应式布局" class="headerlink" title="bootstrap响应式布局"></a>bootstrap响应式布局</h3><p>bootstrap在不同的分辨率下有不同的分配<br><img src="响应式.png" alt="响应式"></p><h3 id="bootstrap的优缺点"><a href="#bootstrap的优缺点" class="headerlink" title="bootstrap的优缺点"></a>bootstrap的优缺点</h3><ul><li><strong>优点：</strong>css代码结构合理 现成的样式可以直接用</li><li><strong>缺点：</strong>定制较为繁琐 体积大</li></ul><h3 id="boostrap如何实现响应式布局"><a href="#boostrap如何实现响应式布局" class="headerlink" title="boostrap如何实现响应式布局"></a>boostrap如何实现响应式布局</h3><ul><li><strong>原理：</strong>通过media query设置不同分辨率的class</li><li><strong>使用：</strong>为不同分辨率选择不同的网格class</li></ul><h3 id="bootstrap-定制方法"><a href="#bootstrap-定制方法" class="headerlink" title="bootstrap 定制方法"></a>bootstrap 定制方法</h3><ul><li>使用<code>css同名类</code>覆盖</li><li>修改<code>源码</code>重新构建</li><li>引用<code>scss源文件</code> –&gt; 修改变量 (可以按需加载,对bootstrap的结构要了解)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是bootstrap&quot;&gt;&lt;a href=&quot;#什么是bootstrap&quot; class=&quot;headerlink&quot; title=&quot;什么是bootstrap?&quot;&gt;&lt;/a&gt;什么是bootstrap?&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个css框架&lt;/li&gt;
&lt;li&gt;twitt
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
      <category term="bootstrap" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>css预处理器</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/05/css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/05/css预处理器/</id>
    <published>2018-07-05T08:48:18.000Z</published>
    <updated>2018-09-05T06:30:33.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是预处理器"><a href="#什么是预处理器" class="headerlink" title="什么是预处理器"></a>什么是预处理器</h3><ul><li>基于css的另一种语言</li><li>通过工具编译成css</li><li>添加了很多css不具备的特性</li><li>能提升css文件的组织</li></ul><h3 id="常见的css预处理器"><a href="#常见的css预处理器" class="headerlink" title="常见的css预处理器"></a>常见的css预处理器</h3><ul><li>less(Node.js)</li><li>sass (Ruby有<code>Node</code>版本)(node-sass 是c++写的 安装有点复杂)</li></ul><h3 id="预处理器的作用"><a href="#预处理器的作用" class="headerlink" title="预处理器的作用"></a>预处理器的作用</h3><ul><li>帮助更好地组织css代码</li><li>提高代码的复用率</li><li>提升可维护性</li></ul><h3 id="提供的功能"><a href="#提供的功能" class="headerlink" title="提供的功能"></a>提供的功能</h3><ul><li><code>嵌套</code>– 反映层级和约束</li><li><code>变量和计算</code>–减少重复代码 </li><li><code>extend</code>和<code>Mixin</code>— 代码片段</li><li><code>循环</code>– 适用于复杂的有规则的样式</li><li><code>import</code>– css文件模块化</li></ul><h3 id="css预处理器框架"><a href="#css预处理器框架" class="headerlink" title="css预处理器框架"></a>css预处理器框架</h3><ul><li>sass - Compass</li><li>less -Lesshat/EST</li><li>提供现成的<code>mixin</code></li><li>类似js类库 封装常用功能</li></ul><h3 id="预处理其的有缺点"><a href="#预处理其的有缺点" class="headerlink" title="预处理其的有缺点"></a>预处理其的有缺点</h3><ul><li><strong>优点：</strong> 提高代码的复用率和可维护性</li><li><strong>缺点：</strong> 需要引入编译过程和学习成本高</li></ul><h3 id="EST"><a href="#EST" class="headerlink" title="EST"></a><a href="http://ecomfe.github.io/est/#variables" target="_blank" rel="noopener">EST</a></h3><blockquote><p><code>est</code> 提供了一系列方便快捷的 <code>mixin</code></p></blockquote><h3 id="问题：现阶段是否推荐使用预处理器"><a href="#问题：现阶段是否推荐使用预处理器" class="headerlink" title="问题：现阶段是否推荐使用预处理器"></a>问题：现阶段是否推荐使用预处理器</h3><blockquote><p>除了预处理器，css工程化已经发展起来了，对于css的提升可以有其他手段</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是预处理器&quot;&gt;&lt;a href=&quot;#什么是预处理器&quot; class=&quot;headerlink&quot; title=&quot;什么是预处理器&quot;&gt;&lt;/a&gt;什么是预处理器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于css的另一种语言&lt;/li&gt;
&lt;li&gt;通过工具编译成css&lt;/li&gt;
&lt;li&gt;添加了
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
      <category term="预处理器" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>node深研</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/06/26/node%E6%B7%B1%E7%A0%94/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/06/26/node深研/</id>
    <published>2018-06-26T06:10:39.000Z</published>
    <updated>2018-09-05T06:30:33.784Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node概念"><a href="#node概念" class="headerlink" title="node概念"></a>node概念</h2><h2 id="node工作原理"><a href="#node工作原理" class="headerlink" title="node工作原理"></a>node工作原理</h2><ul><li>非<code>node多线程</code>服务器工作原理<br><img src="非node.jpg" alt="非node"></li><li>node<code>主线程</code>工作原理<br><img src="node.jpg" alt="node"></li></ul><h2 id="Node-解决了什么"><a href="#Node-解决了什么" class="headerlink" title="Node 解决了什么"></a>Node 解决了什么</h2><p>Node 的首要目标是提供一种简单的，用于创建高性能服务器的开发工具 Web 服务器的瓶颈在于并发的用户量，对比 Java 和 Php 的实现方式<br><strong>Node在处理高并发，I/O 密集场景有明显的性能优势</strong></p><ul><li><code>高并发,</code>是指在同一时间并发访问服务器</li><li><code>I/O 密集</code>指的是文件操作、网络操作、数据库,相对的有 CPU 密集,CPU 密集指的是逻辑处理运算、压缩、解压、加密、解密</li></ul><blockquote><p>Web 主要场景就是接收客户端的请求读取静态资源和渲染界面,所以 Node 非常适合 Web 应用的开发。</p></blockquote><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><code>进程</code>是操作系统分配资源和调度任务的基本单位，线程是建立在进程上的一次程序运行单位，一个进程上可以有多个线程。</p><ul><li><code>js线程</code>、<code>ui线程</code>这两个线程是互斥的,目的就是为了保证不产生冲突</li><li><code>ui线程</code>会把更改放到队列中，当js线程空闲下来，ui线程在继续渲染</li></ul><h2 id="webworker-多线程"><a href="#webworker-多线程" class="headerlink" title="webworker 多线程"></a>webworker 多线程</h2><ul><li>他和js主线程不是平级的，主线程可以控制<code>webworker</code>,<code>webworker</code>不能操作<code>dom</code>,<code>document</code>,<code>window</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文件<span class="number">1</span> --&gt;</span><br><span class="line">onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;e.data;i++)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">postMessage(sum)</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 页面主线程 --&gt;</span><br><span class="line"><span class="keyword">let</span> worker=<span class="keyword">new</span> Worker(<span class="string">'./worker.js'</span>)</span><br><span class="line"><span class="comment">//把内容发给 工作线程，工作线程可以把结果丢回来</span></span><br><span class="line">worker.postMessage(<span class="number">100</span>)</span><br><span class="line">worker.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="global"><a href="#global" class="headerlink" title="global"></a>global</h2><ul><li>在浏览器端 全局作用域我们通过<code>window</code>访问 </li><li>我们可以直接在<code>node</code>中访问<code>global</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器端</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.a<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在服务器端</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">global.a<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>原因：</strong>node在执行的时候,为了实现模块增加了一个<code>闭包</code></p><h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><blockquote><p>在Node.js中，使用<code>console</code>对象代表控制台(在操作系统中表现为一个操作系统指定的字符界面，比如 <code>Window</code>中的命令提示窗口)。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准输出</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'log'</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">'info'</span>)</span><br><span class="line"><span class="comment">// 错误输出</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'error'</span>)</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">'warn'</span>)</span><br></pre></td></tr></table></figure><p>当我们执行以下语句时,<code>1.log</code>文件中仅仅只有<code>标准输出</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node node1.js&gt; 1.log</span><br></pre></td></tr></table></figure></p><p>只有我们执行以下语句时,才能将<code>错误输出</code>添加到<code>1.log</code>中。标准输出用<code>1</code>表示,错误输出用<code>2</code>表示<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node node1.js &gt; 1.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><p>默认有些属性是<code>隐藏</code>的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>.prototype)<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.dir(<span class="built_in">Array</span>.prototype,&#123;<span class="attr">showHidden</span>:<span class="literal">true</span>&#125;)<span class="comment">//可以显示隐藏属性</span></span><br></pre></td></tr></table></figure></p><p><code>time</code>和<code>timeEnd</code>中的内容是一对,名字相同时才能打印出两端时间的间隔<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'label'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'label'</span>)</span><br></pre></td></tr></table></figure></p><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><ul><li><code>断言</code>有错误抛出一个<code>AssertionError</code></li><li>单元测试<code>mocha</code>,<code>kamra</code></li><li>断言库 <code>chai</code>, <code>TDD</code>, <code>BDD</code>, <code>DDD</code>持续继承,测试覆盖率</li><li>node 提供一个模块 <code>asset</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert((<span class="number">1</span>+<span class="number">1</span>)===<span class="number">2</span>,<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h3><ul><li><code>process</code>进程</li><li><code>argv</code>后续执行时可能会传递参数 <code>http-server --port 3000</code></li><li><code>pid</code> 进程id 端口占用的情况 任务管理器 <code>lsof -i :8080</code>,<code>kill -9 id号</code></li><li><code>chdir</code> change directory 工作目录 </li><li><code>cwd</code> current working directory 当前工作目录</li><li><code>nextTick</code> 微任务</li><li>stdout: [Getter],</li><li>stderr: [Getter],</li><li>stdin: [Getter],</li><li><code>Buffer</code> 存储文件内容 二进制</li><li><code>setImmediate</code> 设置立即</li><li>setInterval</li><li>setTimeout</li></ul><h3 id="process-cwd与-dirname的区别"><a href="#process-cwd与-dirname的区别" class="headerlink" title="process.cwd与_dirname的区别"></a>process.cwd与_dirname的区别</h3><ul><li><code>process.cwd</code>表示当前工作目录,就是代码执行目录</li><li><code>__dirname</code> 这个属性不是<code>global</code>上的，指代的是当前文件所在的<code>文件夹</code>,不会更改</li></ul><h3 id="Event-Loop详解"><a href="#Event-Loop详解" class="headerlink" title="Event Loop详解"></a>Event Loop详解</h3><p>要探究<code>Event Loop</code>，就要先明白两个概念</p><h4 id="JS是单线程的"><a href="#JS是单线程的" class="headerlink" title="JS是单线程的"></a>JS是单线程的</h4><p>JavaScript语言最大特点就是单线程，但是这里的单线程指的是<code>主线程是单线程</code>的。<br>那为什么js要单线程呢？<br>因为，JS主要用于操作DOM，如果是有两个线程，一个在DOM上添加内容，一个在DOM上删除内容，此时浏览器该以哪个为准呢？<br>所以为了避免复杂性，JavaScript从诞生起就是单线程的。</p><h4 id="同步和异步-amp-amp-阻塞非阻塞"><a href="#同步和异步-amp-amp-阻塞非阻塞" class="headerlink" title="同步和异步  &amp;&amp; 阻塞非阻塞"></a>同步和异步  &amp;&amp; 阻塞非阻塞</h4><ul><li>阻塞和非阻塞指的是<code>调用者</code>的状态</li><li>同步和异步指的是<code>被调用者是如何通知的</code></li></ul><h3 id="堆、栈、队列"><a href="#堆、栈、队列" class="headerlink" title="堆、栈、队列"></a>堆、栈、队列</h3><ul><li><code>堆（heap）</code>是指程序运行时申请的动态内存，在JS运行时用来<code>存放对象</code>。</li><li><code>栈（stack）</code>遵循的原则是“<code>先进后出</code>”，JS中的<code>基本数据类型</code>与<code>指向对象的地址存放</code>在栈内存中，此外还有一块栈内存用来执行JS主线程–执行栈（execution context stack），此文章中的栈只考虑执行栈。我们可以通过<code>console.trace()</code>查看栈的执行顺序</li><li><code>队列（queue）</code>遵循的原则是“<code>先进先出</code>”，JS中除了主线程之外还存在一个“任务队列”（其实有两个，后面再详细说明）。</li></ul><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><p>因为JavaScript是单线程的。就意味着所有任务都需要排队，前一个任务结束，后一个任务才能执行。前一个任务耗时很长，后一个任务也得一直等着。但是IO设备（比如ajax网络请求）很慢，CPU一直初一显得状态，这样就很不合理了。<br>所以，其实主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。于是有了同步任务和异步任务。</p><blockquote><p>同步任务是指在<code>主线程</code>上执行的任务，只有前一个任务执行完毕，下一个任务才能执行。 异步任务是指不进入主线程，而是进入<code>任务队列</code>（task queue）的任务，只有主线程任务执行完毕，任务队列的任务才会进入主线程执行。</p></blockquote><h4 id="浏览器中-Event-Loop"><a href="#浏览器中-Event-Loop" class="headerlink" title="浏览器中 Event Loop"></a>浏览器中 Event Loop</h4><p><img src="浏览器EventLoop.jpg" alt="浏览器EventLoop"></p><ul><li>主线程运行的时候产生堆（heap）和栈（stack）</li><li>栈中的代码调用各种外部API，它们在<code>&quot;任务队列&quot;</code>中加入各种事件（click，load，done）</li><li>只要栈中的代码执行完毕，主线程就会去读取<code>&quot;任务队列&quot;</code>，将队列中的事件放到执行栈中依次执行。</li><li>主线程继续执行，当再调用外部API时又加入到任务队列中，等主线程执行完毕又会接着将任务队列中的事件放到主线程中。</li><li>上面整个过程是循环不断的。</li></ul><h4 id="node-中的-Event-Loop"><a href="#node-中的-Event-Loop" class="headerlink" title="node 中的 Event Loop"></a>node 中的 Event Loop</h4><blockquote><p>node是<code>异步</code> 、<code>非阻塞i/o</code>的，是用<code>libuv</code>(通过多线程和阻塞的i/o)实现的。</p></blockquote><p><img src="nodeloop.png" alt="node loop"></p><ul><li>我们写的js代码会交给<code>v8引擎</code>进行处理</li><li>代码中可能会调用<code>nodeApi</code>,node会交给<code>libuv库</code>处理</li><li>libuv通过<code>阻塞i/o</code>和<code>多线程</code>实现了异步io</li><li>通过<code>事件驱动</code>的方式,将结果放到事件队列中,最终交给我们的应用。</li></ul><blockquote><p>除了setTimeout和setInterval这两个方法，Node.js还提供了另外两个与”任务队列”有关的方法：process.nextTick和setImmediate。</p></blockquote><h4 id="微任务-amp-amp-宏任务（队列）"><a href="#微任务-amp-amp-宏任务（队列）" class="headerlink" title="微任务 &amp;&amp; 宏任务（队列）"></a>微任务 &amp;&amp; 宏任务（队列）</h4><ul><li>微任务 process.nextTick,<ul><li>原生 Promise (有些实现的promise 将 then 方法放到了宏任务中，浏览器默认放到了微任务),</li><li>Object.observe (已废弃),</li><li>MutationObserver（不兼容）</li><li><code>MessageChannel</code>（vue中 <code>nextClick</code> 实现原理）</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MutationObserver的用法 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当dom加载完毕后 来一句渲染完成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> observe=<span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'渲染完成'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    observe.observe(app,&#123;</span></span><br><span class="line"><span class="javascript">        childList:<span class="literal">true</span>,<span class="comment">//节点列表</span></span></span><br><span class="line"><span class="javascript">        characterData:<span class="literal">true</span>,<span class="comment">//节点里的数据</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> p= <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</span></span><br><span class="line"><span class="undefined">       app.appendChild(p);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//管道的消息流动</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> channel=<span class="keyword">new</span> MessageChannel();</span><br><span class="line">  <span class="keyword">let</span> port1=channel.port1</span><br><span class="line">  <span class="keyword">let</span> port2=channel.port2;</span><br><span class="line">  port1.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.data)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  ports.postMessage(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><ul><li>宏任务 <code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/o</code></li></ul><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ul><li>在<code>浏览器</code>中，先执行当前栈，执行完走微任务，然后走<code>事件队列</code>里的内容,拿出<code>一个</code>放到<code>当前栈</code>中执行,再去执行<code>微任务</code><br><img src="浏览器执行.png" alt="浏览器执行"><br>-在 <code>Node</code>环境中，Event Loop 分为 6 个阶段，每一个阶段对应着一个宏任务队列。<br><img src="node中执行.png" alt="node中执行"><br><img src="nodepoll.png" alt="poll"></li><li><code>timers:</code> 这个是定时器阶段，处理<code>setTimeout()</code>和<code>setInterval()</code>的回调函数。进入这个阶段后，主线程会检查一下当前时间，是否满足定时器的条件。如果满足就执行回调函数，否则就离开这个阶段。</li><li><code>I/O callbacks</code> 除了以下操作的回调函数，其他的回调函数都在这个阶段执行。<ul><li>setTimeout()和setInterval()的回调函数</li><li>setImmediate()的回调函数</li><li>用于关闭请求的回调函数，比如socket.on(‘close’, …)</li></ul></li><li><code>idle, prepare</code> 该阶段只供 <code>libuv</code> 内部调用，这里可以忽略。</li><li><p><code>Poll:</code></p><ul><li>这个阶段是轮询时间，用于等待还未返回的 I/O 事件，比如服务器的回应、用户移动鼠标等等。</li><li>这个阶段的时间会比较长。如果没有其他异步任务要处理（比如到期的定时器），会一直停留在这个阶段，等待 I/O 请求返回结果。</li></ul></li><li><p><code>check</code>:该阶段执行setImmediate()的回调函数。</p></li><li><code>close callbacks</code>:该阶段执行关闭请求的回调函数，比如socket.on(‘close’, …)。</li></ul><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><h3 id="事件循环的示例"><a href="#事件循环的示例" class="headerlink" title="事件循环的示例"></a>事件循环的示例</h3><p>猜猜以执行步奏<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeoutScheduled = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务一：100ms 后执行的定时器</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="built_in">Date</span>.now() - timeoutScheduled;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;delay&#125;</span>ms`</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步任务二：文件读取后，有一个 200ms 的回调函数</span></span><br><span class="line">fs.readFile(<span class="string">'test.js'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> startCallback = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - startCallback &lt; <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 什么也不做</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li><p>脚本进入第一轮事件循环以后，没有到期的定时器，也没有已经可以执行的 I/O 回调函数，所以会进入 Poll 阶段，等待内核返回文件读取的结果。由于读取小文件一般不会超过 100ms，所以在定时器到期之前，Poll 阶段就会得到结果，因此就会继续往下执行。</p></li><li><p>第二轮事件循环，依然没有到期的定时器，但是已经有了可以执行的 I/O 回调函数，所以会进入 I/O callbacks 阶段，执行<code>fs.readFile的回调函数</code>。这个回调函数需要 200ms，也就是说，在它执行到一半的时候，100ms 的定时器就会到期。但是，必须等到这个回调函数执行完，才会离开这个阶段。</p></li><li><p>第三轮事件循环，已经有了到期的定时器，所以会在 timers 阶段执行定时器。最后输出结果大概是200多毫秒</p></li></ul><h3 id="setTimeout-和-setImmediate"><a href="#setTimeout-和-setImmediate" class="headerlink" title="setTimeout 和 setImmediate"></a>setTimeout 和 setImmediate</h3><p>由于<code>setTimeout</code>在<code>timers</code> 阶段执行，而<code>setImmediate</code>在 <code>check</code>阶段执行。所以，<code>setTimeout</code>会早于<code>setImmediate</code>完成。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></p><ul><li>上面代码应该先输出<code>1</code>，再输出<code>2</code>，但是实际执行的时候，结果却是不确定，有时还会先输出<code>2</code>，再输出<code>1</code>。</li><li>这是因为<code>setTimeout</code>的第二个参数默认为<code>0</code>。但是实际上，<code>Node</code> 做不到0毫秒，最少也需要<code>1</code>毫秒，根据官方文档，第二个参数的取值范围在1毫秒到2147483647毫秒之间。也就是说，<code>setTimeout(f, 0)</code>等同于<code>setTimeout(f, 1)</code>。</li><li>实际执行的时候，进入事件循环以后，有可能到了<code>1</code>毫秒，也可能还没到1毫秒，取决于系统当时的状况。如果没到1毫秒，那么 <code>timers</code> 阶段就会跳过，进入<code>check</code> 阶段，先执行<code>setImmediate</code>的回调函数。</li></ul><p><strong>但是下面的代码一定是先输出2，再输出1。</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'test.js'</span>, () =&gt; &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>));</span><br><span class="line">  setImmediate(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="promise-nextTick的用途"><a href="#promise-nextTick的用途" class="headerlink" title="promise.nextTick的用途"></a>promise.nextTick的用途</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arrs;</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arrs();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.then=<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arrs=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Fn = <span class="keyword">new</span> Fn()</span><br><span class="line">Fn.then()</span><br></pre></td></tr></table></figure><h3 id="nextTick不要写递归-可以放一些比settimeout优先执行的任务"><a href="#nextTick不要写递归-可以放一些比settimeout优先执行的任务" class="headerlink" title="nextTick不要写递归,可以放一些比settimeout优先执行的任务"></a>nextTick不要写递归,可以放一些比settimeout优先执行的任务</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//机器会卡死</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextTick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        nextTick()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">settimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><hr><p><strong>注意:</strong></p><ul><li>当触发回调函数时，才会将回调函数放到队列中,例如<code>setTimeout</code>只有在时间到的情况下才会将回调函数，放入<code>队列</code>中</li><li><code>settimeout</code>在不写<code>时间</code>或者时间为<code>0</code>的时候,因为浏览器工作原理,默认<code>4ms</code></li><li><code>process.nextTick</code>比<code>then</code>快</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;node概念&quot;&gt;&lt;a href=&quot;#node概念&quot; class=&quot;headerlink&quot; title=&quot;node概念&quot;&gt;&lt;/a&gt;node概念&lt;/h2&gt;&lt;h2 id=&quot;node工作原理&quot;&gt;&lt;a href=&quot;#node工作原理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="node" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/node/"/>
    
      <category term="global" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/global/"/>
    
      <category term="Event Loop" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/Event-Loop/"/>
    
  </entry>
  
  <entry>
    <title>HTML补充知识</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/06/24/HTML%E8%A1%A5%E5%85%85%E7%9F%A5%E8%AF%86/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/06/24/HTML补充知识/</id>
    <published>2018-06-24T02:12:06.000Z</published>
    <updated>2018-09-05T06:30:33.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><ul><li><p><code>accesskey</code> &amp; <code>tabindex</code> 与键盘按键相关。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">accesskey</span>=<span class="string">"i"</span> <span class="attr">placeholder</span>=<span class="string">"Press Ctrl+Alt+I"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">accesskey</span>=<span class="string">"e"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span>&gt;</span>press</span><br><span class="line">        <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl+Alt+E<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>id</code>保证唯一性，<code>class</code>多用在css，<code>style</code>指定内联样式。</p></li><li><p><code>contenteditable</code> 页面的内容可以被编辑。<code>spellcheck</code>拼写检查</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--contenteditable：使页面可编辑--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">section</span> <span class="attr">contenteditable</span> <span class="attr">spellcheck</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>计算机基础<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span>&gt;</span>了解浏览器的渲染原理、开发调试工具以及各种调试技巧。了解 Web 协议栈，学习掌握 HTTP 协议基础，</span><br><span class="line">           理解网络、浏览器性能和安全相关的问题以及常用的优化技巧，掌握专业的前端性能优化能力。</span><br><span class="line">           学习 UI 常用动画效果的算法原理和基础，掌握通过 JavaScript、CSS3、SVG 实现高性能动画的技巧。</span><br><span class="line">           学习其他前端相关的数学知识、数据结构和常用算法。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>语言 <code>lang</code> 指定页面的语言；<code>dir</code> 指定语言书写的方向。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阿拉伯语 右对齐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">dir</span>=<span class="string">"rtl"</span> <span class="attr">lang</span>=<span class="string">"ar"</span>&gt;</span>sasdasda<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>title</code> 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"你好"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>hidden</code>属性。隐藏元素。可用性好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">hidden</span>&gt;</span>你看不见我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="无障碍性"><a href="#无障碍性" class="headerlink" title="无障碍性"></a>无障碍性</h3><ul><li>或可访问性，<code>Accessibility</code>。</li><li>确保<code>任何人</code>都有办法获取放在网页上的媒体内容。</li><li>不让身体、心理或技术上的问题成为获取信息的障碍</li></ul><h3 id="Web开发者应该做的事情"><a href="#Web开发者应该做的事情" class="headerlink" title="Web开发者应该做的事情"></a>Web开发者应该做的事情</h3><ul><li><a href="https://www.w3.org/WAI/standards-guidelines/wcag/" target="_blank" rel="noopener">WCAG(Web Content Accessibility Guidelines) 2.0</a></li><li><a href="https://www.w3.org/TR/html-aria/" target="_blank" rel="noopener">ARIA(Accessible Rich Internet Applications)</a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ARIA 属性,告诉读屏软件该标签充当什么角色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">role</span>=<span class="string">"tablist"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#ch1"</span>&gt;</span>Chapter 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#ch2"</span>&gt;</span>Chapter 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"tab"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#ch3"</span>&gt;</span>Chapter 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="提升无障碍性"><a href="#提升无障碍性" class="headerlink" title="提升无障碍性"></a>提升无障碍性</h4><ul><li>为 <code>img</code> 提供 <code>alt</code> 属性。</li><li><code>noscript</code> 当浏览器<code>不支持</code>脚本script时的替代性方案。</li><li><code>input</code> 和 <code>label</code> 相对应。</li><li><code>图形验证码</code>与<code></code>语音验证码`。</li><li><code>文字</code>和<code>背景</code>有足够对比度。</li><li><code>键盘</code>可操作。</li></ul><h4 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h4><ul><li>HTML中的元素、属性及属性值都拥有某些含义</li><li>开发者应该遵循语义来编写HTML</li></ul><h4 id="为什么语义化很重要？"><a href="#为什么语义化很重要？" class="headerlink" title="为什么语义化很重要？"></a>为什么语义化很重要？</h4><ul><li>提升代码可读性、可维护性</li><li>搜索引擎优化</li><li>提升无障碍性</li></ul><h4 id="扩展HTML"><a href="#扩展HTML" class="headerlink" title="扩展HTML"></a>扩展HTML</h4><ul><li><p><code>meta</code> 如：如何编码、页面关键词、页面介绍、页面缩放、电话号码自动识别、360浏览器指定内核、指定IE渲染模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--指定 HTTP Header--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-security-policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SEO 搜索引擎优化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"关键词"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"页面介绍"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--移动设备 Viewport--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--关闭 ios 电话号码自动识别--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telphone=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--360 浏览器指定内核--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--指定 IE 渲染模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>data-*</code>:<code>dataset</code>属性是一个map，其中存放<code>data-*</code>东西。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-id</span>=<span class="string">"1"</span>&gt;</span>水果1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-id</span>=<span class="string">"2"</span>&gt;</span>水果2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-id</span>=<span class="string">"3"</span>&gt;</span>水果3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>microdata</code> </p><ul><li><code>HTML5</code>中的一个规范</li><li><code>itemscope</code> 属性描述的是：在此标签内的东西是一个实体。<code>itemtype=&quot; &quot;</code>属性描述的是：再次标签内的东西的实体类型。<code>itemprop=&quot; &quot;</code>属性描述的是：该实体内的具体属性是啥。</li><li>在HTML 中 通过属性嵌入格式化数据</li><li>提供给搜索引擎、浏览器（插件）使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>microdata<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Person"</span>&gt;</span></span><br><span class="line">    Hello, my name is</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>Xiao Xiao<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    I am a</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"jobTitle"</span>&gt;</span>Graduate Student<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    at the</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"University"</span>&gt;</span>UESTC<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    My friends call me</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"additionalName"</span>&gt;</span>Xiao<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    You can visit my homepage at</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.csdn.net/sunxiaofre"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span>blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">itemprop</span>=<span class="string">"address"</span> <span class="attr">itemscopt</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/PostalAddress"</span>&gt;</span></span><br><span class="line">        I live at</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"addressCountry"</span>&gt;</span>China<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"addressLocality"</span>&gt;</span>SiChuan<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"addressStreet"</span>&gt;</span>XiJie<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>RDFa</p></li><li><code>JSON-LD</code> json类型的数据组织形式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>JSON-LD<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/ld+json"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="undefined">            "@context": "http://schema.org",</span></span><br><span class="line"><span class="undefined">            "@type": "Person",</span></span><br><span class="line"><span class="undefined">            "name": "Xiao Xiao",</span></span><br><span class="line"><span class="undefined">            "jobTitle": "Graduate Student",</span></span><br><span class="line"><span class="undefined">            "University": "UESTC",</span></span><br><span class="line"><span class="undefined">            "additionalName": "Xiao",</span></span><br><span class="line"><span class="undefined">            "url": "http://blog.csdn.net/sunxiaofre",</span></span><br><span class="line"><span class="undefined">            "address": &#123;</span></span><br><span class="line"><span class="undefined">                "@type": "PostalAddress",</span></span><br><span class="line"><span class="undefined">                "addressCountry": "China",</span></span><br><span class="line"><span class="undefined">                "addressLocality": "SiChuan",</span></span><br><span class="line"><span class="undefined">                "addressStreet": "XiJie"</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://developers.google.com/schemas" target="_blank" rel="noopener">Google Schemas</a></li><li><a href="https://schema.org" target="_blank" rel="noopener">Schema.org</a></li></ul><h3 id="HTML编程规范"><a href="#HTML编程规范" class="headerlink" title="HTML编程规范"></a>HTML编程规范</h3><ul><li>Google Coding Style</li><li>W3C Validator</li></ul><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul><li>Emmet</li><li>markdown</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;全局属性&quot;&gt;&lt;a href=&quot;#全局属性&quot; class=&quot;headerlink&quot; title=&quot;全局属性&quot;&gt;&lt;/a&gt;全局属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;accesskey&lt;/code&gt; &amp;amp; &lt;code&gt;tabindex&lt;/code&gt; 与键
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="html" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>表单</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/06/21/%E8%A1%A8%E5%8D%95/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/06/21/表单/</id>
    <published>2018-06-21T09:23:55.000Z</published>
    <updated>2018-09-05T06:30:33.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用form获取让用户提供数据"><a href="#使用form获取让用户提供数据" class="headerlink" title="使用form获取让用户提供数据"></a>使用form获取让用户提供数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/echo"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>USER: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uesename"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>PASSWORD: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>LOGIN<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GET与POST"><a href="#GET与POST" class="headerlink" title="GET与POST"></a>GET与POST</h3><ul><li>获取还是修改 <ul><li><code>get</code>：从服务器获取东西；</li><li><code>post</code>：向服务器提交东西。</li></ul></li><li>数据传输方式的区别： <ul><li><code>get</code>：把字段数据放到url中提交，一次性将数据发送给服务器；</li><li><code>post</code>：不会把数据放到路径url中，而是将数据以某种形式进行编码，将编码后的内容放到HTTP的body中提交。需要分两次才能发送给服务器。<code>HTTP</code>分两次发送，第一次发送<code>head</code>，第二次发送<code>body</code>。</li><li>发送的<code>位置不同</code>而已，都没有做加密解密的操作。只不过get方式放在url中在浏览器的url中可以看到,而post看不到。</li></ul></li></ul><h3 id="URL-Encode（URL编码）"><a href="#URL-Encode（URL编码）" class="headerlink" title="URL Encode（URL编码）"></a>URL Encode（URL编码）</h3><ul><li><code>空格 =&gt; %20</code> （空格会默认<code>替换</code>为加号+）</li><li><code>! =&gt; %21</code></li><li><code>&quot; =&gt; %22</code></li><li><code># =&gt; %23</code></li><li><code>$ =&gt; %24</code></li><li><code>% =&gt; %25</code></li><li><code>’ =&gt; %27</code></li><li><code>+ =&gt; %2B</code></li></ul><h3 id="HTTP-method"><a href="#HTTP-method" class="headerlink" title="HTTP method"></a>HTTP method</h3><ul><li>GET</li><li>POST</li><li>HEAD：只返回head中的东西。</li><li>PUT :放置</li><li>DELETE：删除。</li><li>OPTIONS：返回http有哪些<code>headers</code>的选项。如查看是否允许跨域。</li></ul><h3 id="单行多行文本框"><a href="#单行多行文本框" class="headerlink" title="单行多行文本框"></a>单行多行文本框</h3><ul><li><code>name</code>就是发送数据到服务器的<code>key</code>。<code>value</code>给用户一个默认值。</li><li><code>placeholder</code>提示词</li><li><code>autofocus</code> 聚焦</li><li><code>password</code> 密码<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>  <span class="attr">placeholder</span>=<span class="string">"提示文字"</span> <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="输入验证"><a href="#输入验证" class="headerlink" title="输入验证"></a>输入验证</h3><blockquote><p>尽早提示用户错误输入。<code>required</code>表示此项必须填写， <code>minlength</code>,<code>maxlength</code> <code>pattern</code>正则表达式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/echo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">minlength</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">maxlength</span>=<span class="string">"12"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">placeholder</span>=<span class="string">"3-12位"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">pattern</span>=<span class="string">"1\d&#123;10&#125;"</span> <span class="attr">placeholder</span>=<span class="string">"输入手机号"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><ul><li>在可用性上做一些辅助</li><li>对手机上键盘的布局有影响</li><li>对输入自行进行验证，提高可用性</li><li>type=”search”</li><li>type=”email”</li><li>type=”url”</li><li>type=”submit”</li></ul><h3 id="novalidate"><a href="#novalidate" class="headerlink" title="novalidate"></a>novalidate</h3><blockquote><p>去掉系统自带的验证。根据自己的业务需要用<code>JavaScript</code>自己实现一个验证。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">novalidate</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="radio-单选框"><a href="#radio-单选框" class="headerlink" title="radio 单选框"></a>radio 单选框</h3><blockquote><p>从<code>一组数据</code>中选择其中<code>一个</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你最喜欢的水果是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"barries"</span>&gt;</span> 草莓</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"banana"</span>&gt;</span> 香蕉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span> 芒果</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"dragon"</span>&gt;</span> 火龙果</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="checkbox-复选框"><a href="#checkbox-复选框" class="headerlink" title="checkbox 复选框"></a>checkbox 复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你最喜欢的水果是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"barries"</span>&gt;</span> 草莓</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"banana"</span>&gt;</span> 香蕉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"mango"</span>&gt;</span> 芒果</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"dragon"</span>&gt;</span> 火龙果</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><ul><li>可用性提升</li><li>在使用 <code>radio</code> 和 <code>checkbox</code> 时，点击文字也可以进行选择，而不是只能点击框才能选择。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你最喜欢的水果是？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"barries"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"barries"</span> <span class="attr">id</span>=<span class="string">"barries"</span>&gt;</span> 草莓<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"banana"</span> <span class="attr">id</span>=<span class="string">"banana"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"banana"</span>&gt;</span> 香蕉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"mango"</span> <span class="attr">id</span>=<span class="string">"mango"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mango"</span>&gt;</span> 芒果<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fruit"</span> <span class="attr">value</span>=<span class="string">"dragon"</span> <span class="attr">id</span>=<span class="string">"dragon"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"dragon"</span>&gt;</span> 火龙果<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 关联input 支持读屏软件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>请输入你的名字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="select标签"><a href="#select标签" class="headerlink" title="select标签"></a>select标签</h3><blockquote><p>当选项特别特别多时，可用下拉框来表示选项，使页面简洁。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以多选 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">mutiple</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 当前显示在页面中的选项的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 分组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多选</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>想去的城市：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"1-4"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"5-8"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"7"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"8"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"9-12"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"9"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"10"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span>11<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"12"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3><blockquote><p>某些数据需要从页面上提交，但是不希望在页面上展示出来，此时用<code>hidden</code>。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"secret"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h3><ul><li><code>enctype=&quot;multipart/form-data&quot;</code>属性、<code>multipart</code>将文件分段传输</li><li><code>mutiple</code> ：可以同时选择多文件</li><li><code>accept=&quot;image/*&quot;</code>只支持图片上传<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>您的姓名： <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"fullname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>请上传简历<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span> <span class="attr">name</span>=<span class="string">"resume"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="date-amp-time"><a href="#date-amp-time" class="headerlink" title="date &amp; time"></a>date &amp; time</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>date: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>datetime-local: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>month: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"month"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>week: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>time: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="number-amp-range"><a href="#number-amp-range" class="headerlink" title="number &amp; range"></a>number &amp; range</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--number &amp; range--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"heightAndWeight"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>身高(m)：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">"0.5"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">max</span>=<span class="string">"2.5"</span> <span class="attr">step</span>=<span class="string">"0.01"</span> <span class="attr">name</span>=<span class="string">"height"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">value</span>=<span class="string">"1.7"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- html数据的展示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span> <span class="attr">for</span>=<span class="string">"height"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>体重(kg)：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"10"</span> <span class="attr">max</span>=<span class="string">"200"</span> <span class="attr">step</span>=<span class="string">"0.1"</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">value</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span> <span class="attr">for</span>=<span class="string">"weight"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>BMI<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span> <span class="attr">for</span>=<span class="string">"weight height"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> form = <span class="built_in">document</span>.querySelector(<span class="string">'#heightAndWeight'</span>);</span></span><br><span class="line"><span class="javascript">    form.addEventListener(<span class="string">'input'</span>, update);</span></span><br><span class="line"><span class="undefined">    update();</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> data = <span class="keyword">new</span> FormData(form);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> height = <span class="built_in">parseFloat</span>(data.get(<span class="string">'height'</span>));</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> weight = <span class="built_in">parseFloat</span>(data.get(<span class="string">'weight'</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'[for="weight"]'</span>).value = weight;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'[for="weight height"]'</span>).value = getBMI(height, weight);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getBMI</span>(<span class="params">height, weight</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>(weight/<span class="built_in">Math</span>.pow(height, <span class="number">2</span>)).toFixed(<span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--button--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 默认事type="submit"  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>默认submit提交表单数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>button点击这种行为，不提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>reset重置表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="回车提交"><a href="#回车提交" class="headerlink" title="回车提交"></a>回车提交</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--回车提交 自动触发type="submit" 的click事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fullname"</span> <span class="attr">value</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert(1)"</span>&gt;</span>不指定type<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert(2)"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实际用途：尽量不取消<code>回车提交</code>的功能,一般将<code>submit</code>事件定义到<code>form</code>上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"ana"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> <span class="keyword">from</span> = <span class="built_in">document</span>.querySelector(<span class="string">"form"</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">from</span>.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            e.preventDefault();</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">'1'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控件状态"><a href="#控件状态" class="headerlink" title="控件状态"></a>控件状态</h3><ul><li><code>readonly：</code>会提交到服务器上，但页面上无法进行修改。</li><li><code>disabled：</code>不会提交到服务器上</li></ul><h3 id="表单设计"><a href="#表单设计" class="headerlink" title="表单设计"></a>表单设计</h3><ul><li>帮助用户不出错，能选不填，给出提示</li><li>尽早提示错误</li><li>扩大选择／点击区域</li><li>控件较多时要分组</li><li>分清主要动作和次要动作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用form获取让用户提供数据&quot;&gt;&lt;a href=&quot;#使用form获取让用户提供数据&quot; class=&quot;headerlink&quot; title=&quot;使用form获取让用户提供数据&quot;&gt;&lt;/a&gt;使用form获取让用户提供数据&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="html" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>表格</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/06/21/%E8%A1%A8%E6%A0%BC/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/06/21/表格/</id>
    <published>2018-06-21T09:06:56.000Z</published>
    <updated>2018-09-05T06:30:33.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><ul><li><code>th</code>不仅可以出现在<code>thead</code>中，也可以出现在<code>tbody</code>中，只要认为此单元格是表头性质的，就可以用<code>th</code>。<code>tr</code>表示行，<code>td</code>表示列。</li><li>部分错误的嵌套，浏览器会尽可能补全缺失的部分<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>浏览器及其引擎<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>浏览器<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>渲染引擎<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaScript 引擎<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Blink<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>V8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Opera<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Blink<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>V8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Gecko<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>SpiderMonkey<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="table.png" alt="table"></p><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><ul><li>合并行 <code>rowspan</code>：一个单元行占几行。</li><li>合并列 <code>colspan</code>：一个单元格占几列。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--合并行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>浏览器<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>渲染引擎<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaScript 引擎<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>Blink<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>V8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Opera<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;Blink&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;V8&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>Gecko<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;SpiderMonkey&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="表格说明"><a href="#表格说明" class="headerlink" title="表格说明"></a>表格说明</h3><ul><li>表头<code>caption</code>必须是table的第一个元素。</li></ul><h3 id="列组"><a href="#列组" class="headerlink" title="列组"></a>列组</h3><ul><li>colgroup<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>浏览器及其引擎<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">class</span>=<span class="string">"browser"</span> <span class="attr">style</span>=<span class="string">"background: #a7c7dc;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">class</span>=<span class="string">"engine"</span> <span class="attr">span</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"background: #f0ad4e;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>浏览器<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>渲染引擎<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>JavaScript 引擎<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Chrome<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>Blink<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>V8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Opera<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;Blink&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;V8&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Firefox<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>Gecko<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;td&gt;SpiderMonkey&lt;/td&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基本格式&quot;&gt;&lt;a href=&quot;#基本格式&quot; class=&quot;headerlink&quot; title=&quot;基本格式&quot;&gt;&lt;/a&gt;基本格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;th&lt;/code&gt;不仅可以出现在&lt;code&gt;thead&lt;/code&gt;中，也可以出现在&lt;code&gt;tb
      
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="html" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>连接与图片</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/06/21/%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%9B%BE%E7%89%87/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/06/21/连接与图片/</id>
    <published>2018-06-21T08:44:12.000Z</published>
    <updated>2018-09-05T06:30:33.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><p>省略协议</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据当前页面的协议 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//www.baidu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>省略协议和host</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据当前页面的协议和host --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>相对路径与绝对路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发时一般用省略协议和host的绝对路径 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"a/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../../index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/a/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>页面内跳转：锚点 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#idName"</span>&gt;</span>连接到本页面id=idName的元素所在处<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接到本页面顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>链接目标</p><ul><li><code>target:_self</code> 当前窗口</li><li><code>target:_blank</code> 新窗口</li><li><code>target:abc</code> 随意一个值,指定同一个值会共用同一个页面</li></ul></li></ul><p><img src="href.jpg" alt="链接"></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">"替代文字"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>图片说明<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="指定图片宽高："><a href="#指定图片宽高：" class="headerlink" title="指定图片宽高："></a>指定图片宽高：</h4><ul><li>不指定宽高：原图大小显示</li><li>指定宽度：按比例缩放到指定宽度</li><li>指定高度：按比例缩放到指定高度</li><li>指定宽高：强制按指定宽高显示</li></ul><h4 id="常用图片格式："><a href="#常用图片格式：" class="headerlink" title="常用图片格式："></a>常用图片格式：</h4><ul><li><code>jpg</code>：照片，色彩丰富的图片（常用）</li><li><code>png</code>：色彩较少时使用，png24可以半透明（常用）</li><li><code>gif</code>：色彩较少时使用，gjf无法半透明，可以多帧做动画（较少用）</li><li><code>webp</code>：有些浏览器不支持</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;省略协议&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 根据当前页面的协议 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//www.baidu.com&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;省略协议和host&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 根据当前页面的协议和host --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/index.html&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端基础" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
      <category term="html" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/html/"/>
    
  </entry>
  
</feed>
