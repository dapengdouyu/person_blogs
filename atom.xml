<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大鹏的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangyapeng0222.github.io/person_blogs/"/>
  <updated>2019-01-14T08:51:42.839Z</updated>
  <id>https://zhangyapeng0222.github.io/person_blogs/</id>
  
  <author>
    <name>dapeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack-tapable</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2019/01/14/webpack-tapable/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2019/01/14/webpack-tapable/</id>
    <published>2019-01-14T06:50:58.000Z</published>
    <updated>2019-01-14T08:51:42.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack的插件机制"><a href="#webpack的插件机制" class="headerlink" title="webpack的插件机制"></a>webpack的插件机制</h2><p>webpack实现插件机制的大体方式是:</p><ul><li><strong>创建</strong> - webpack在其内部对象上创建各种钩子；</li><li><strong>注册</strong> - 插件将自己的方法注册到对应钩子上，交给webpack；</li><li><strong>调用</strong> - webpack编译过程中，会适时地触发相应钩子，因此也就触发了插件的方法</li></ul><h2 id="tapable"><a href="#tapable" class="headerlink" title="tapable"></a>tapable</h2><p><strong>Webpack</strong>本质上是一种<code>事件流</code>的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是<strong>Tapable</strong>，<strong>webpack</strong>中最核心的负责<code>编译</code>的<strong>Compiler</strong>和负责<code>创建</code><strong>bundle</strong>的<strong>Compilation</strong>都是Tapable的实例</p><h2 id="tapable用法"><a href="#tapable用法" class="headerlink" title="tapable用法"></a>tapable用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">    SyncHook,</span><br><span class="line">    SyncBailHook,</span><br><span class="line">    SyncWaterfallHook,</span><br><span class="line">    SyncLoopHook,</span><br><span class="line">    AsyncParallelHook,</span><br><span class="line">    AsyncParallelBailHook,</span><br><span class="line">    AsyncSeriesHook,</span><br><span class="line">    AsyncSeriesBailHook,</span><br><span class="line">    AsyncSeriesWaterfallHook</span><br><span class="line"> &#125; = <span class="built_in">require</span>(<span class="string">"tapable"</span>);</span><br></pre></td></tr></table></figure><p><img src="http://b.zhangyapeng.club/tapable%20(1" alt="tapable (1)-2019114145412">-2019114145412.png)</p><p>看起来起来功能和 <code>EventEmit</code> 类似，先注册事件，然后触发事件。不过 <code>Tapable</code> 的功能要比 <code>EventEmit</code> 强大。从官方介绍中，可以看到 <code>Tapable</code> 提供了很多类型的 <code>Hook</code>，分为<code>同步</code>和<code>异步</code>两个大类(异步中又区分异步<code>并行</code>和异步<code>串行</code>)，而根据事件执行的终止条件的不同，由衍生出 <code>Bail</code>/<code>Waterfall</code>/<code>Loop</code> 类型。</p><p><img src="http://b.zhangyapeng.club/167f458ac2b1e527-2019114145946.webp" alt="167f458ac2b1e527-2019114145946"></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://b.zhangyapeng.club/167f458d6ff8424f-201911415344.webp" alt="167f458d6ff8424f-201911415344"></h2><ul><li><strong>BasicHook</strong>: 执行每一个，不关心函数的返回值，有 SyncHook、AsyncParallelHook、AsyncSeriesHook。</li><li><strong>BailHook</strong>: 顺序执行 Hook，遇到第一个结果 <code>result !== undefined</code> 则返回，不再继续执行。有：SyncBailHook、AsyncSeriseBailHook, AsyncParallelBailHook。</li><li><strong>WaterfallHook</strong>: 类似于 reduce，如果前一个 Hook 函数的结果 <code>result !== undefined</code>，则 result 会作为后一个 Hook 函数的第一个参数。既然是顺序执行，那么就只有 Sync 和 AsyncSeries 类中提供这个Hook：SyncWaterfallHook，AsyncSeriesWaterfallHook</li><li><strong>LoopHook</strong>: 不停的循环执行 Hook，直到所有函数结果 <code>result === undefined</code>。同样的，由于对串行性有依赖，所以只有 SyncLoopHook 和 AsyncSeriseLoopHook （PS：暂时没看到具体使用 Case）</li></ul><h2 id="SyncHook"><a href="#SyncHook" class="headerlink" title="SyncHook"></a>SyncHook</h2><hr><p>串行同步执行,不关心返回值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="comment">// 创建一个同步 Hook，指定参数</span></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> SyncHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">queue.call(<span class="string">'zfpx'</span>);</span><br></pre></td></tr></table></figure></p><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[]</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task)&#123;</span><br><span class="line">    <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call(...args)&#123;</span><br><span class="line">          <span class="keyword">this</span>.tasks.forEach(<span class="function"><span class="params">val</span>=&gt;</span>val(...args))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SyncBailHook"><a href="#SyncBailHook" class="headerlink" title="SyncBailHook"></a>SyncBailHook</h2><hr><p>串行同步执行，有一个返回值不为<code>null</code>则跳过剩下的逻辑</p><ul><li><p><strong>break</strong>是跳出当前循环就是最近的一次循环，继续执行外循环，</p></li><li><p><strong>continue</strong>是指结束本次循环，这次循环后边的不执行了，继续最内层循环的循环</p></li><li><p><strong>break</strong>是跳到了外层循环，</p></li><li><p><strong>return</strong>则终止该方法，后边的都不执行了。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncBailHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> SyncBailHook([<span class="string">'name'</span>]);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Wrong'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.call(<span class="string">'zfpx'</span>);</span><br></pre></td></tr></table></figure><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[]</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call(...args)&#123;</span><br><span class="line">        <span class="comment">//   for(var val of this.tasks)&#123;</span></span><br><span class="line">        <span class="comment">//       let ret= val(...args)</span></span><br><span class="line">        <span class="comment">//       if(ret) break;</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">0</span>,ret=<span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">do</span>&#123;</span><br><span class="line">            ret=<span class="keyword">this</span>.tasks[i++](...args)</span><br><span class="line">          &#125;<span class="keyword">while</span>(!ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SyncWaterfallHook"><a href="#SyncWaterfallHook" class="headerlink" title="SyncWaterfallHook"></a>SyncWaterfallHook</h2><hr><p>串行同步执行,瀑布流,类似于<code>reduce</code>，将前一个结果当值 <code>result !== undefined</code>复制给下一个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncWaterfallHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> SyncWaterfallHook([<span class="string">'name'</span>]);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name,age,<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data,<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.call(<span class="string">'zfpx'</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure></p><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[]</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call(...args)&#123;</span><br><span class="line">    <span class="keyword">const</span> [first,...tasks]=<span class="keyword">this</span>.tasks</span><br><span class="line">        <span class="keyword">let</span> firstarg=args</span><br><span class="line">      tasks.reduce(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(prev)&#123;</span><br><span class="line">              firstarg=prev</span><br><span class="line">            <span class="keyword">return</span> next(prev)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> next(...firstarg)</span><br><span class="line">          &#125;</span><br><span class="line">         </span><br><span class="line">      &#125;,first(...args))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SyncLoopHook"><a href="#SyncLoopHook" class="headerlink" title="SyncLoopHook"></a>SyncLoopHook</h2><hr><p>监听函数返回<code>true</code>表示继续循环，返回<code>undefine</code>表示结束循环<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;SyncLoopHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> SyncLoopHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count++);</span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">queue.call(<span class="string">'zfpx'</span>);</span><br></pre></td></tr></table></figure></p><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SyncLoopHook</span></span>&#123;</span><br><span class="line">     <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[]</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call(...args)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.forEach(<span class="function">(<span class="params">val,index</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> ind=<span class="number">0</span>,ret=<span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">do</span>&#123;</span><br><span class="line">                 ret=<span class="keyword">this</span>.tasks[ind++](...args)</span><br><span class="line">             &#125;<span class="keyword">while</span>(ret &amp;&amp; ind&lt;=index)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h2><hr><p>异步并行执行钩子</p><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncParallelHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[]</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync(...args)&#123;</span><br><span class="line">         <span class="keyword">let</span> callback=args.pop();</span><br><span class="line">        <span class="keyword">this</span>.tasks.forEach(<span class="function"><span class="params">task</span>=&gt;</span>task(...args))</span><br><span class="line">         callback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="tapAsync"><a href="#tapAsync" class="headerlink" title="tapAsync"></a>tapAsync</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncParallelHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapAsync(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[]</span><br><span class="line">    &#125;</span><br><span class="line">    tapAsync(name,task)&#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync(...args)&#123;</span><br><span class="line">         <span class="keyword">let</span> callback=args.pop();</span><br><span class="line">         <span class="keyword">let</span> i=<span class="number">0</span>,length = <span class="keyword">this</span>.tasks.length;</span><br><span class="line">        <span class="keyword">this</span>.tasks.forEach(<span class="function"><span class="params">task</span>=&gt;</span>task(...args,done))</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(++i==length)&#123;</span><br><span class="line">                callback(err)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="tapPromise"><a href="#tapPromise" class="headerlink" title="tapPromise"></a>tapPromise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncParallelHook&#125;=<span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncParallelHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapPromise(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.promise(<span class="string">'zfpx'</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapPromise(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    promise(...args) &#123;</span><br><span class="line">     <span class="keyword">let</span> promises = <span class="keyword">this</span>.tasks.map(<span class="function"><span class="params">task</span> =&gt;</span> task(...args));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result=[]</span><br><span class="line">            <span class="keyword">let</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">                promises[i].then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                    result[i]=data;</span><br><span class="line">                    <span class="keyword">if</span>(++count===promise.length)&#123;</span><br><span class="line">                        resolve(result)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h2><p>带保险的异步并行执行钩子</p><h3 id="tap-1"><a href="#tap-1" class="headerlink" title="tap"></a>tap</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123;AsyncParallelBailHook&#125; = require('tapable');</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync() &#123;</span><br><span class="line">        <span class="keyword">let</span> args=<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">let</span> callback=args.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.tasks.length;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> ret=<span class="keyword">this</span>.tasks[i](...args);</span><br><span class="line">            <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">                <span class="keyword">return</span> callback(ret);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue=<span class="keyword">new</span> AsyncParallelBailHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Wrong"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapAsync-1"><a href="#tapAsync-1" class="headerlink" title="tapAsync"></a>tapAsync</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123;AsyncParallelBailHook&#125; = require('tapable');</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapAsync(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync() &#123;</span><br><span class="line">        <span class="keyword">let</span> args=<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">let</span> finalCallback=args.pop();</span><br><span class="line">        <span class="keyword">let</span> count=<span class="number">0</span>,total=<span class="keyword">this</span>.tasks.length;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">done</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> finalCallback(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (++count == total) &#123;</span><br><span class="line">                    <span class="keyword">return</span> finalCallback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;total;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> task=<span class="keyword">this</span>.tasks[i];</span><br><span class="line">            task(...args,done);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue=<span class="keyword">new</span> AsyncParallelBailHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapAsync(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    callback(<span class="string">'Wrong'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    callback();</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    callback();</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapPromise-1"><a href="#tapPromise-1" class="headerlink" title="tapPromise"></a>tapPromise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123;AsyncParallelBailHook&#125; = require('tapable');</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncParallelBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapPromise(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    promise() &#123;</span><br><span class="line">        <span class="keyword">let</span> args=<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">let</span> promises = <span class="keyword">this</span>.tasks.map(<span class="function"><span class="params">task</span> =&gt;</span> task(...arguments));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncParallelBailHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapPromise(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">            reject();</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">queue.tapPromise(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">queue.promise(<span class="string">'zfpx'</span>).then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;,err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="AsyncSeriesHook"><a href="#AsyncSeriesHook" class="headerlink" title="AsyncSeriesHook"></a>AsyncSeriesHook</h2><hr><p>异步串行钩子</p><h3 id="tap-2"><a href="#tap-2" class="headerlink" title="tap"></a>tap</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tap(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync(...args) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;total;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> task=<span class="keyword">this</span>.tasks[i];</span><br><span class="line">            task(...args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="tapAsync-2"><a href="#tapAsync-2" class="headerlink" title="tapAsync"></a>tapAsync</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapAsync(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync() &#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">let</span> finalCallback = args.pop();</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>, length = <span class="keyword">this</span>.tasks.length;</span><br><span class="line">        <span class="keyword">let</span> next = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> task = <span class="keyword">this</span>.tasks[index++];</span><br><span class="line">            <span class="keyword">if</span> (task) &#123;</span><br><span class="line">                task(...args, next);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finalCallback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapAsync(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">   &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapPromise-2"><a href="#tapPromise-2" class="headerlink" title="tapPromise"></a>tapPromise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapPromise(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    promise() &#123;</span><br><span class="line">         <span class="comment">//first是第一个函数， tasks是剩下的函数</span></span><br><span class="line">        <span class="keyword">let</span> [first, ...tasks] = <span class="keyword">this</span>.tasks;</span><br><span class="line">        <span class="keyword">return</span> tasks.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.then(<span class="function"><span class="params">()</span> =&gt;</span> b());</span><br><span class="line">        &#125;, first(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue=<span class="keyword">new</span> AsyncSeriesHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapPromise(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">           resolve();</span><br><span class="line">       &#125;,<span class="number">1000</span>)</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.promise(<span class="string">'zfpx'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="AsyncSeriesBailHook"><a href="#AsyncSeriesBailHook" class="headerlink" title="AsyncSeriesBailHook"></a>AsyncSeriesBailHook</h2><h3 id="tap-3"><a href="#tap-3" class="headerlink" title="tap"></a>tap</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesBailHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesBailHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Wrong"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tabAsync"><a href="#tabAsync" class="headerlink" title="tabAsync"></a>tabAsync</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123;AsyncSeriesBailHook&#125;=require('tapable');</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesBailHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapAsync(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync() &#123;</span><br><span class="line">        <span class="keyword">let</span> args=<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">let</span> callback=args.pop();</span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">0</span>,size = <span class="keyword">this</span>.tasks.length;</span><br><span class="line">        <span class="keyword">let</span> next=<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span>  callback(err);</span><br><span class="line">            <span class="keyword">let</span> task=<span class="keyword">this</span>.tasks[i++];</span><br><span class="line">            task?task(...args,next):callback();</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesBailHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapAsync(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">       callback(<span class="string">'wrong'</span>);</span><br><span class="line">   &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapPromise-3"><a href="#tapPromise-3" class="headerlink" title="tapPromise"></a>tapPromise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesBailHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesBailHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapPromise(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">       setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">           <span class="comment">//resolve();</span></span><br><span class="line">           reject();</span><br><span class="line">       &#125;,<span class="number">1000</span>)</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">            resolve();</span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.promise(<span class="string">'zfpx'</span>).then(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="AsyncSeriesWaterfallHook"><a href="#AsyncSeriesWaterfallHook" class="headerlink" title="AsyncSeriesWaterfallHook"></a>AsyncSeriesWaterfallHook</h2><h3 id="tap-4"><a href="#tap-4" class="headerlink" title="tap"></a>tap</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesWaterfallHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesWaterfallHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tap(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>,data);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tap(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>,data);</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,err=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd</span><br></pre></td></tr></table></figure><h3 id="tapAsync-3"><a href="#tapAsync-3" class="headerlink" title="tapAsync"></a>tapAsync</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let &#123;AsyncSeriesBailHook&#125;=require('tapable');</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesWaterfallHook</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks=[];</span><br><span class="line">    &#125;</span><br><span class="line">    tapAsync(name,task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync() &#123;</span><br><span class="line">        <span class="keyword">let</span> args=<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">let</span> callback=args.pop();</span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">0</span>,size = <span class="keyword">this</span>.tasks.length;</span><br><span class="line">        <span class="keyword">let</span> next=<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span>  callback(err);</span><br><span class="line">            <span class="keyword">let</span> task=<span class="keyword">this</span>.tasks[i++];</span><br><span class="line">            <span class="keyword">if</span> (task) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">0</span>) &#123;</span><br><span class="line">                    task(...args,next);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    task(data,next);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                callback(err,data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesWaterfallHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapAsync(<span class="string">'1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name,callback</span>)</span>&#123;</span><br><span class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">       callback(<span class="literal">null</span>,<span class="number">1</span>);</span><br><span class="line">   &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">        callback(<span class="literal">null</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapAsync(<span class="string">'3'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">        callback(<span class="literal">null</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">queue.callAsync(<span class="string">'zfpx'</span>,(err,data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err,data);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="tapPromise-4"><a href="#tapPromise-4" class="headerlink" title="tapPromise"></a>tapPromise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;AsyncSeriesWaterfallHook&#125; = <span class="built_in">require</span>(<span class="string">'tapable'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSeriesWaterfallHook</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks = [];</span><br><span class="line">    &#125;</span><br><span class="line">    tapPromise(name, task) &#123;</span><br><span class="line">        <span class="keyword">this</span>.tasks.push(task);</span><br><span class="line">    &#125;</span><br><span class="line">    promise(...args) &#123;</span><br><span class="line">        <span class="comment">//first是第一个函数， tasks是剩下的函数</span></span><br><span class="line">        <span class="keyword">let</span> [first, ...tasks] = <span class="keyword">this</span>.tasks;</span><br><span class="line">        <span class="keyword">return</span> tasks.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a.then(<span class="function">(<span class="params">data</span>) =&gt;</span> b(data));</span><br><span class="line">        &#125;, first(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> AsyncSeriesWaterfallHook([<span class="string">'name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'cost'</span>);</span><br><span class="line">queue.tapPromise(<span class="string">'1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(name, <span class="number">1</span>);</span><br><span class="line">            resolve(<span class="number">1</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'2'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data, <span class="number">2</span>);</span><br><span class="line">            resolve(<span class="number">2</span>);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.tapPromise(<span class="string">'3'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data, <span class="number">3</span>);</span><br><span class="line">            resolve(<span class="number">3</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">queue.promise(<span class="string">'zfpx'</span>).then(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">'cost'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="tapable-1"><a href="#tapable-1" class="headerlink" title="tapable"></a>tapable</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;Tapable,SyncHook&#125; = <span class="built_in">require</span>(<span class="string">"tapable"</span>);</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> Tapable();</span><br><span class="line">t.hooks = &#123;</span><br><span class="line">    myHook: <span class="keyword">new</span> SyncHook()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> called = <span class="number">0</span>;</span><br><span class="line">t.plugin(<span class="string">"my-hook"</span>, () =&gt; called++);</span><br><span class="line">t.hooks.myHook.call();</span><br><span class="line">t.plugin(<span class="string">"my-hook"</span>, () =&gt; called += <span class="number">10</span>);</span><br><span class="line">t.hooks.myHook.call();</span><br><span class="line"><span class="built_in">console</span>.log(called);</span><br></pre></td></tr></table></figure><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/alienzhou/webpack-internal-plugin-relation" target="_blank" rel="noopener">webpack-internal-plugin-relation</a></li><li><a href="https://juejin.im/post/5c25f920e51d45593b4bc719" target="_blank" rel="noopener">webpack系列之二Tapable</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack的插件机制&quot;&gt;&lt;a href=&quot;#webpack的插件机制&quot; class=&quot;headerlink&quot; title=&quot;webpack的插件机制&quot;&gt;&lt;/a&gt;webpack的插件机制&lt;/h2&gt;&lt;p&gt;webpack实现插件机制的大体方式是:&lt;/p&gt;
&lt;ul&gt;

      
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack/"/>
    
      <category term="tapable" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/tapable/"/>
    
  </entry>
  
  <entry>
    <title>webpack-bundle-源码</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2019/01/11/webpack-bundle-%E6%BA%90%E7%A0%81/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2019/01/11/webpack-bundle-源码/</id>
    <published>2019-01-11T07:49:58.000Z</published>
    <updated>2019-01-11T09:38:35.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack打包基础源码"><a href="#webpack打包基础源码" class="headerlink" title="webpack打包基础源码"></a>webpack打包基础源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpack 启动函数</span></span><br><span class="line"> <span class="comment">//  模块的缓存</span></span><br><span class="line"> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// webpack自己实现的在浏览器里能够执行的require方法</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 看看此模块是否在缓存中</span></span><br><span class="line"> <span class="keyword">if</span>(installedModules[moduleId]) &#123;</span><br><span class="line">            <span class="comment">// 如果缓存有的话，则取它缓存的模块的对象的exports属性并返回</span></span><br><span class="line"> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 创建一个新的模块，并且放置到缓存</span></span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"> i: moduleId,</span><br><span class="line"> l: <span class="literal">false</span>,</span><br><span class="line"> exports: &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 执行模块函数,传入参数 </span></span><br><span class="line">        <span class="comment">//  1 module.exports=this 2.module 模块对象  3.module.exports 模块的导出对象 4.require方法</span></span><br><span class="line"> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 把模块标识 为已加载 loaded=true</span></span><br><span class="line"> <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 返回模块的导出对象</span></span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 把modules挂载到require的m属性</span></span><br><span class="line"> __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 把模块的缓存挂载到require的c属性上</span></span><br><span class="line"> __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 定义(define)一个getter方法 1导出对象 2名称 3 getter</span></span><br><span class="line"> __webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  判断对象有没有某个属性 exports.hasOwnProperty(name)</span></span><br><span class="line"> <span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">        <span class="comment">//给exports对象定义name属性，值是可枚举的，get</span></span><br><span class="line">             <span class="built_in">Object</span>.defineProperty(exports, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</span><br><span class="line">         <span class="comment">//   exports[name]</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象的Symbol.toStringTag属性，指向一个方法</span></span><br><span class="line"><span class="comment">     * 在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型</span></span><br><span class="line"><span class="comment">     * 也就是说，这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串</span></span><br><span class="line"><span class="comment">     * (&#123;[Symbol.toStringTag]: 'Foo'&#125;.toString())  "[object Foo]"</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 在导出对象上定义__esModule属性</span></span><br><span class="line">    <span class="comment">//如果此exports对象__esModule属性为true的话，表示这是一个es6的模块</span></span><br><span class="line"> __webpack_require__.r = <span class="function"><span class="keyword">function</span>(<span class="params">exports</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">            <span class="comment">// 如果是支持es6的Symbol属性的话，那么定义属性 exports[Symbol.toStringTag] ='Module'</span></span><br><span class="line">             <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123; <span class="attr">value</span>: <span class="string">'Module'</span> &#125;);</span><br><span class="line">            <span class="comment">//  exports.toString = "[object Module]"</span></span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">//  exports['__esModule'] = true;</span></span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// create a fake namespace object</span></span><br><span class="line"> <span class="comment">// mode &amp; 1: value is a module id, require it</span></span><br><span class="line"> <span class="comment">// mode &amp; 2: merge all properties of value into the ns</span></span><br><span class="line"> <span class="comment">// mode &amp; 4: return value when already ns object</span></span><br><span class="line"> <span class="comment">// mode &amp; 8|1: behave like require</span></span><br><span class="line"> __webpack_require__.t = <span class="function"><span class="keyword">function</span>(<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line"> <span class="keyword">if</span>(mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line"> <span class="keyword">if</span>((mode &amp; <span class="number">4</span>) &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line"> <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"> __webpack_require__.r(ns);</span><br><span class="line"> <span class="built_in">Object</span>.defineProperty(ns, <span class="string">'default'</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: value &#125;);</span><br><span class="line"> <span class="keyword">if</span>(mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">'string'</span>) <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> value) __webpack_require__.d(ns, key, <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="keyword">return</span> value[key]; &#125;.bind(<span class="literal">null</span>, key));</span><br><span class="line"> <span class="keyword">return</span> ns;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取默认导出函数为了兼容性 参数就是module对象</span></span><br><span class="line">     __webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123; <span class="comment">//hello</span></span><br><span class="line">    <span class="comment">//先拿到一个getter,如果是es模块，返回模块的default,否则返回自身</span></span><br><span class="line"> <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">'default'</span>]; &#125; :</span><br><span class="line">             <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>; &#125;;</span><br><span class="line">    <span class="comment">//var getter =function() &#123; return 'hello'; &#125;;</span></span><br><span class="line">    <span class="comment">//给getter上定义一个a属性，值为getter</span></span><br><span class="line">    <span class="comment">//该模块的a属性 = 模块本身</span></span><br><span class="line">         __webpack_require__.d(getter, <span class="string">'a'</span>, getter);</span><br><span class="line">    <span class="comment">// get a()&#123;return 'a'&#125;   obj['a']</span></span><br><span class="line">    <span class="comment">// getter['a'] = getter;</span></span><br><span class="line">    <span class="comment">//(function() &#123; return 'hello'; &#125;)['a'] =  (function() &#123; return 'hello'; &#125;)</span></span><br><span class="line"> <span class="keyword">return</span> getter;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// // Object.prototype.hasOwnProperty.call</span></span><br><span class="line">    <span class="comment">//判断对象有没有某个属性</span></span><br><span class="line"> __webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//webpack的公开路径  webpack publicPath</span></span><br><span class="line"> __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 加载入口模块并且返回导出对象 s就是入口标识符</span></span><br><span class="line"> <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">//modules是一个对象，有属性和值，属性就是此模块的ID，其实就是相对于根目录的相对路径</span></span><br><span class="line"> (&#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">"./src/index.js"</span>:</span><br><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"console.log('1')"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h3 id="webpack打包懒加载源码"><a href="#webpack打包懒加载源码" class="headerlink" title="webpack打包懒加载源码"></a>webpack打包懒加载源码</h3><p>./src/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>).addEventListener(<span class="string">"click"</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">"./a.js"</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>bundle.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123; <span class="comment">//webpack的启动函数</span></span><br><span class="line">   <span class="comment">// 安装一个JSONP的回调为了加载chunk代码块</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">webpackJsonpCallback</span>(<span class="params">data</span>) </span>&#123;<span class="comment">//data=[[0],additionalModules]</span></span><br><span class="line">     <span class="keyword">var</span> chunkIds = data[<span class="number">0</span>];<span class="comment">//第一个元素是chunkId的数组</span></span><br><span class="line">     <span class="keyword">var</span> moreModules = data[<span class="number">1</span>];<span class="comment">//这个chunk里包含的额外更多的模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 把这次取出来的更多的模块添加到modules对象中</span></span><br><span class="line">     <span class="comment">// 然后把所有的chunkIds标识为已加载，并且执行回调函数</span></span><br><span class="line">     <span class="keyword">var</span> moduleId, chunkId, i = <span class="number">0</span>,</span><br><span class="line">       resolves = [];</span><br><span class="line">     <span class="keyword">for</span> (; i &lt; chunkIds.length; i++) &#123;<span class="comment">//循环本次取出来的chunkIds</span></span><br><span class="line">       chunkId = chunkIds[i];<span class="comment">//先取出一个chunkId</span></span><br><span class="line">       <span class="keyword">if</span> (installedChunks[chunkId]) &#123;<span class="comment">//如果说有值的话</span></span><br><span class="line">         <span class="comment">//把这个installedChunks[chunkId]的0元素，promise resovle方法添加resolves数组中去</span></span><br><span class="line">         resolves.push(installedChunks[chunkId][<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       installedChunks[chunkId] = <span class="number">0</span>;<span class="comment">//加载完成</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//循环迭代新模块并且</span></span><br><span class="line">     <span class="keyword">for</span> (moduleId <span class="keyword">in</span> moreModules) &#123;</span><br><span class="line">         <span class="comment">//把新的模块对象的上的属性全部合并或者说拷贝到老的modules对象上</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(moreModules, moduleId)) &#123;</span><br><span class="line">         modules[moduleId] = moreModules[moduleId];</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//如果parentJsonpFunction有值的话，调用它,其实就是jsonArray.push方法</span></span><br><span class="line">    <span class="comment">//  如果没值说明先加载异步模块,window["webpackJsonp"]已经添加了该数组</span></span><br><span class="line">     <span class="keyword">if</span> (parentJsonpFunction) parentJsonpFunction(data);</span><br><span class="line">    <span class="comment">//依次调用resolve方法，让每个promise都成功</span></span><br><span class="line">     <span class="keyword">while</span> (resolves.length) &#123;</span><br><span class="line">        <span class="comment">//缓存的异步模块直接提示成功  resolve()</span></span><br><span class="line">       resolves.shift()();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块的缓存</span></span><br><span class="line">   <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个对象，用来存放加载过的和加载中的代码</span></span><br><span class="line">    <span class="comment">//chunk=undefined 表示未加载</span></span><br><span class="line">    <span class="comment">// chunk=null 表示预加载或者预获取</span></span><br><span class="line">    <span class="comment">//chunk=promise 的话表示加载中</span></span><br><span class="line">    <span class="comment">//chunk=0 表示已加载或者说加载完成</span></span><br><span class="line">   <span class="keyword">var</span> installedChunks = &#123;</span><br><span class="line">     <span class="string">"main"</span>: <span class="number">0</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 用来生成脚本路径的函数</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">jsonpScriptSrc</span>(<span class="params">chunkId</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">".bundle.js"</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// require方法</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 检查模块是否在缓存</span></span><br><span class="line">     <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">       <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 创建一个新模块并且放到缓存中</span></span><br><span class="line">     <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">       i: moduleId,</span><br><span class="line">       l: <span class="literal">false</span>,</span><br><span class="line">       exports: &#123;&#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 执行模块函数，给module.exports赋值</span></span><br><span class="line">     modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 把模块设置为已加载</span></span><br><span class="line">     <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 返回模块的导出对象</span></span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个文件只包含入口chunk</span></span><br><span class="line">  <span class="comment">//这个代码块加载函数是为了加载额外的模块</span></span><br><span class="line"><span class="comment">//   chunkId=0</span></span><br><span class="line">   __webpack_require__.e = <span class="function"><span class="keyword">function</span> <span class="title">requireEnsure</span>(<span class="params">chunkId</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> promises = [];<span class="comment">//创建一个空的promise数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 先取出此chunkID对应的值 ,第一次的肯定是没有值</span></span><br><span class="line">     <span class="keyword">var</span> installedChunkData = installedChunks[chunkId];</span><br><span class="line">     <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>) &#123; <span class="comment">// 0 means "already installed".</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果返回值是一个promise表示正在加载</span></span><br><span class="line">       <span class="keyword">if</span> (installedChunkData) &#123;</span><br><span class="line">         promises.push(installedChunkData[<span class="number">2</span>]);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//   在chunk缓存中创建一个promise</span></span><br><span class="line">         <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  将chunkData的数据赋值为一个数组 1.promise.resolve 2.promise.reject</span></span><br><span class="line">           installedChunkData = installedChunks[chunkId] = [resolve, reject];</span><br><span class="line">         &#125;);</span><br><span class="line">        <span class="comment">//  把installedChunkData[2]赋值为整个promise并且添加到promise数组中去</span></span><br><span class="line">         promises.push(installedChunkData[<span class="number">2</span>] = promise);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 开始代码块的加载</span></span><br><span class="line">         <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>); <span class="comment">//创建一个script脚本</span></span><br><span class="line">         <span class="keyword">var</span> onScriptComplete; <span class="comment">//当脚本完成后</span></span><br><span class="line"></span><br><span class="line">         script.charset = <span class="string">'utf-8'</span>;<span class="comment">//设置脚本的编码</span></span><br><span class="line">         script.timeout = <span class="number">120</span>;<span class="comment">//设置脚本的超时时间</span></span><br><span class="line">         <span class="keyword">if</span> (__webpack_require__.nc) &#123; <span class="comment">//用来安全处理的 nonce</span></span><br><span class="line">           script.setAttribute(<span class="string">"nonce"</span>, __webpack_require__.nc);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">//  拼出一个URL路径度且赋给script.src</span></span><br><span class="line">         script.src = jsonpScriptSrc(chunkId);</span><br><span class="line">        <span class="comment">// 定义加载后的回调函数</span></span><br><span class="line">         onScriptComplete = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">           <span class="comment">//  防止IE下面的内存泄露</span></span><br><span class="line">           script.onerror = script.onload = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 清除定时器.如果是提前执行此函数，则需要先清除定时器</span></span><br><span class="line">           clearTimeout(timeout);</span><br><span class="line">            <span class="comment">//  取得已安装的代码块中的chunk</span></span><br><span class="line">           <span class="keyword">var</span> chunk = installedChunks[chunkId];</span><br><span class="line">           <span class="keyword">if</span> (chunk !== <span class="number">0</span>) &#123;<span class="comment">//如果不等0表示加载失败</span></span><br><span class="line">             <span class="keyword">if</span> (chunk) &#123;</span><br><span class="line">               <span class="keyword">var</span> errorType = event &amp;&amp; (event.type === <span class="string">'load'</span> ? <span class="string">'missing'</span> : event.type);</span><br><span class="line">               <span class="keyword">var</span> realSrc = event &amp;&amp; event.target &amp;&amp; event.target.src;</span><br><span class="line">               <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Loading chunk '</span> + chunkId + <span class="string">' failed.\n('</span> + errorType + <span class="string">': '</span> + realSrc + <span class="string">')'</span>);</span><br><span class="line">               error.type = errorType;</span><br><span class="line">               error.request = realSrc;</span><br><span class="line">               chunk[<span class="number">1</span>](error);<span class="comment">//直接调用chunk[1],把error作为参数传进去，调用promise的reject方法，让promise失败</span></span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//把对应的值置为undefine</span></span><br><span class="line">             installedChunks[chunkId] = <span class="literal">undefined</span>;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">          <span class="comment">//开启了一个定时器，如果说到了120秒之后请求还没有回来，我们就认为超时了，直接执行回调</span></span><br><span class="line">         <span class="keyword">var</span> timeout = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           onScriptComplete(&#123;</span><br><span class="line">             type: <span class="string">'timeout'</span>,</span><br><span class="line">             target: script</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;, <span class="number">120000</span>);</span><br><span class="line">         script.onerror = script.onload = onScriptComplete;</span><br><span class="line">         <span class="comment">//把JSONP脚本添加到head标签</span></span><br><span class="line">         <span class="built_in">document</span>.head.appendChild(script);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises); <span class="comment">//返回一个promise</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line">   __webpack_require__.m = modules;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// expose the module cache</span></span><br><span class="line">   __webpack_require__.c = installedModules;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// define getter function for harmony exports</span></span><br><span class="line">   __webpack_require__.d = <span class="function"><span class="keyword">function</span> (<span class="params">exports, name, getter</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!__webpack_require__.o(exports, name)) &#123;</span><br><span class="line">       <span class="built_in">Object</span>.defineProperty(exports, name, &#123;</span><br><span class="line">         enumerable: <span class="literal">true</span>,</span><br><span class="line">         get: getter</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// define __esModule on exports</span></span><br><span class="line">   __webpack_require__.r = <span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">Symbol</span>.toStringTag) &#123;</span><br><span class="line">       <span class="built_in">Object</span>.defineProperty(exports, <span class="built_in">Symbol</span>.toStringTag, &#123;</span><br><span class="line">         value: <span class="string">'Module'</span></span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">Object</span>.defineProperty(exports, <span class="string">'__esModule'</span>, &#123;</span><br><span class="line">       value: <span class="literal">true</span></span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// create a fake namespace object 创建一个模拟的命名空间</span></span><br><span class="line">   <span class="comment">// mode &amp; 1: value is a module id, require it 模块是一个模块标识符</span></span><br><span class="line">   <span class="comment">// mode &amp; 2: merge all properties of value into the ns 把所有的属性合并到ns上</span></span><br><span class="line">   <span class="comment">// mode &amp; 4: return value when already ns object 当ns对象OK后返回value</span></span><br><span class="line">   <span class="comment">// mode &amp; 8|1: behave like require 和require表现一样</span></span><br><span class="line">   __webpack_require__.t = <span class="function"><span class="keyword">function</span> (<span class="params">value, mode</span>) </span>&#123;</span><br><span class="line">       <span class="comment">//如果说mode是1的话，则用require去加载这个模块</span></span><br><span class="line">     <span class="keyword">if</span> (mode &amp; <span class="number">1</span>) value = __webpack_require__(value);</span><br><span class="line">      <span class="comment">//如果mode是8的话，则直接返回</span></span><br><span class="line">     <span class="keyword">if</span> (mode &amp; <span class="number">8</span>) <span class="keyword">return</span> value;</span><br><span class="line">     <span class="comment">//如果是mode是4的话 直接返回value</span></span><br><span class="line">     <span class="keyword">if</span> ((mode &amp; <span class="number">4</span>) &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; value &amp;&amp; value.__esModule) <span class="keyword">return</span> value;</span><br><span class="line">      <span class="comment">//创建一个空的对象</span></span><br><span class="line">     <span class="keyword">var</span> ns = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">      <span class="comment">//r就是在对象上定义__esModule= true</span></span><br><span class="line">     __webpack_require__.r(ns);<span class="comment">//ns是一个es模块  es.__esModule= true</span></span><br><span class="line">       <span class="comment">//ns的default属性为value</span></span><br><span class="line">     <span class="built_in">Object</span>.defineProperty(ns, <span class="string">'default'</span>, &#123;</span><br><span class="line">       enumerable: <span class="literal">true</span>,</span><br><span class="line">       value: value</span><br><span class="line">     &#125;);</span><br><span class="line">      <span class="comment">// ns['default'] = value;</span></span><br><span class="line">       <span class="comment">//如果mode值是2的话，把value上的所有属性全部拷贝到ns上</span></span><br><span class="line">     <span class="keyword">if</span> (mode &amp; <span class="number">2</span> &amp;&amp; <span class="keyword">typeof</span> value != <span class="string">'string'</span>)</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> value) __webpack_require__.d(ns, key, <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> value[key];</span><br><span class="line">       &#125;.bind(<span class="literal">null</span>, key));</span><br><span class="line">     <span class="keyword">return</span> ns;<span class="comment">//ns = &#123;__esModule:true,default:'video'&#125;</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line">   __webpack_require__.n = <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">'default'</span>];</span><br><span class="line">       &#125; :</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">       &#125;;</span><br><span class="line">     __webpack_require__.d(getter, <span class="string">'a'</span>, getter);</span><br><span class="line">     <span class="keyword">return</span> getter;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line">   __webpack_require__.o = <span class="function"><span class="keyword">function</span> (<span class="params">object, property</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// __webpack_public_path__</span></span><br><span class="line">   __webpack_require__.p = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// on error function for async loading</span></span><br><span class="line">   __webpack_require__.oe = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.error(err);</span><br><span class="line">     <span class="keyword">throw</span> err;</span><br><span class="line">   &#125;;</span><br><span class="line">    <span class="comment">// 刚开始的时候webpackJsonp是undefined,那么就给他一个空数组</span></span><br><span class="line">   <span class="keyword">var</span> jsonpArray = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] || [];</span><br><span class="line">    <span class="comment">//  给数组的push方法绑定数组本身,如果以后有人再调用oldJsonpFunction,就相当于调用jsonpArray.push</span></span><br><span class="line">   <span class="keyword">var</span> oldJsonpFunction = jsonpArray.push.bind(jsonpArray);</span><br><span class="line">    <span class="comment">//让新数组的push方法指向另外一个函数webpackJsonpCallback</span></span><br><span class="line">   jsonpArray.push = webpackJsonpCallback;</span><br><span class="line">   <span class="comment">//拷贝出来一个新的数组 </span></span><br><span class="line">   jsonpArray = jsonpArray.slice();</span><br><span class="line">    <span class="comment">//如果异步函数先加载完成执行的话， window["webpackJsonp"]为一个数组,寻韩执行这个函数 </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);</span><br><span class="line">    <span class="comment">//   window["webpackJsonp"]的push方法赋值给parentJsonpFunction</span></span><br><span class="line">   <span class="keyword">var</span> parentJsonpFunction = oldJsonpFunction;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 加载入口模块并且返回导出对象 s就是入口标识符</span></span><br><span class="line">   <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/index.js"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> (&#123;</span><br><span class="line">   <span class="string">"./src/index.js"</span>:</span><br><span class="line">     (<span class="function"><span class="keyword">function</span> (<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">eval</span>(<span class="string">`document.querySelector("#root").addEventListener("click",()=&gt;&#123;</span></span><br><span class="line"><span class="string">      __webpack_require__.e(0).then(__webpack_require__.t.bind(null,"./src/a.js", 7)).then(res=&gt;res)</span></span><br><span class="line"><span class="string">  &#125;)`</span>);</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>0.bundle<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] = <span class="built_in">window</span>[<span class="string">"webpackJsonp"</span>] || []).push([[<span class="number">0</span>],&#123;</span><br><span class="line"></span><br><span class="line"><span class="string">"./src/a.js"</span>:</span><br><span class="line"></span><br><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"console.log('1')"</span>);</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack打包基础源码&quot;&gt;&lt;a href=&quot;#webpack打包基础源码&quot; class=&quot;headerlink&quot; title=&quot;webpack打包基础源码&quot;&gt;&lt;/a&gt;webpack打包基础源码&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack/"/>
    
      <category term="webpack源码" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>webpack优化</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2019/01/11/webpack%E4%BC%98%E5%8C%96/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2019/01/11/webpack优化/</id>
    <published>2019-01-11T06:42:35.000Z</published>
    <updated>2019-01-11T07:50:31.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="libraryTarget-和-library"><a href="#libraryTarget-和-library" class="headerlink" title="libraryTarget 和 library"></a>libraryTarget 和 library</h2><p>当用 <strong>Webpack</strong> 去构建一个可以被其他模块导入使用的库时需要用到它们</p><ul><li><strong>output.libraryTarget</strong> 配置以何种方式导出库</li><li><strong>output.library</strong> 配置导出库的名称 </li></ul><p><strong>output.libraryTarget</strong> 是字符串的枚举类型，支持以下配置</p><h3 id="var-默认"><a href="#var-默认" class="headerlink" title="var (默认)"></a>var (默认)</h3><p>编写的库将通过<code>var</code>被赋值给通过<code>library</code>指定名称的变量</p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports =  &#123;</span><br><span class="line">    add(a,b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="bundle-js"><a href="#bundle-js" class="headerlink" title="bundle.js"></a>bundle.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculator=(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;&#125;(&#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> ret = calculator.add(<span class="number">1</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ret);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><p>编写的库将通过 <strong>CommonJS</strong> 规范导出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式</span></span><br><span class="line">exports[<span class="string">"calculator"</span>] = (<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;&#125;(&#123;&#125;)</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'npm-name'</span>)[<span class="string">'calculator'</span>].add(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//npm-name是指模块发布到 Npm 代码仓库时的名称</span></span><br></pre></td></tr></table></figure></p><h3 id="commonjs2"><a href="#commonjs2" class="headerlink" title="commonjs2"></a>commonjs2</h3><p>编写的库将通过 <strong>CommonJS</strong> 规范导出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式</span></span><br><span class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;&#125;(&#123;&#125;)</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'npm-name'</span>).add(); <span class="comment">//在 output.libraryTarget 为 commonjs2 时，配置 output.library 将没有意义</span></span><br></pre></td></tr></table></figure></p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>编写的库将通过 <strong>this</strong> 被赋值给通过 <strong>library</strong> 指定的名称，输出和使用的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式</span></span><br><span class="line"><span class="keyword">this</span>[<span class="string">"calculator"</span>]= (<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;&#125;(&#123;&#125;)</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="keyword">this</span>.calculator.add();</span><br></pre></td></tr></table></figure></p><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>编写的库将通过 <strong>window</strong> 被赋值给通过 <strong>library</strong> 指定的名称，即把库挂载到 <strong>window</strong> 上，输出和使用的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式</span></span><br><span class="line"><span class="built_in">window</span>[<span class="string">"calculator"</span>]= (<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;&#125;(&#123;&#125;)</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="built_in">window</span>.calculator.add();</span><br></pre></td></tr></table></figure></p><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>编写的库将通过 <strong>global</strong> 被赋值给通过 <strong>library</strong> 指定的名称，即把库挂载到 <strong>global</strong> 上，输出和使用的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出方式</span></span><br><span class="line">global[<span class="string">"calculator"</span>]= (<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;&#125;(&#123;&#125;)</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">global.calculator.add();</span><br></pre></td></tr></table></figure></p><hr><h2 id="动态链接库DLL"><a href="#动态链接库DLL" class="headerlink" title="动态链接库DLL"></a>动态链接库DLL</h2><p>即把基础模块的代码打包进入<strong>动态链接库</strong>里，比如常用的<strong>react</strong>，<strong>vue</strong>等，当需要导入的模块在动态连接库里的时候，模块不能再次被打包，而是去动态连接库里获取</p><p><code>.dll</code>为后缀的文件称为动态链接库，在一个动态链接库中可以包含给<strong>其他模块调用</strong>的函数和数据</p><ul><li>把基础模块独立出来打包到<strong>单独</strong>的动态连接库里</li><li>当需要<strong>导入</strong>的模块在动态连接库里的时候，模块不能再次被<strong>打包</strong>，而是去动态连接库里<strong>获取</strong></li><li><a href="https://webpack.js.org/plugins/dll-plugin/" target="_blank" rel="noopener">dll-plugin</a></li></ul><h3 id="定义Dll"><a href="#定义Dll" class="headerlink" title="定义Dll"></a>定义Dll</h3><ul><li><strong>DllPlugin插件</strong>： 用于<strong>打包</strong>出一个个动态连接库</li><li><strong>DllReferencePlugin</strong>: 在配置文件中<strong>引入DllPlugin插件</strong>打包好的动态连接库</li></ul><p>创建一个<code>webpack.dll.config.js</code>文件打包常用类库到<code>dll</code>中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> DllPlugin=<span class="built_in">require</span>(<span class="string">'webpack/lib/DllPlugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        react:[<span class="string">'react'</span>,<span class="string">'react-dom'</span>]</span><br><span class="line">    &#125;,<span class="comment">// 把 React 相关模块的放到一个单独的动态链接库</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>),<span class="comment">// 输出的文件都放到 dist 目录下</span></span><br><span class="line">        filename: <span class="string">'[name].dll.js'</span>,<span class="comment">//输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称</span></span><br><span class="line">        library: <span class="string">'_dll_[name]'</span>,<span class="comment">//存放动态链接库的全局变量名称,例如对应 react 来说就是 _dll_react</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> DllPlugin(&#123;</span><br><span class="line">            <span class="comment">// 动态链接库的全局变量名称，需要和 output.library 中保持一致</span></span><br><span class="line">            <span class="comment">// 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值</span></span><br><span class="line">            <span class="comment">// 例如 react.manifest.json 中就有 "name": "_dll_react"</span></span><br><span class="line">            name: <span class="string">'_dll_[name]'</span>,</span><br><span class="line">            <span class="comment">// 描述动态链接库的 manifest.json 文件输出时的文件名称</span></span><br><span class="line">            path: path.join(__dirname, <span class="string">'dist'</span>, <span class="string">'[name].manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --config webpack.dll.config.js --mode development</span><br></pre></td></tr></table></figure><p>在往配置文件 <code>webpack.config.js</code>中加入以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DllReferencePlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/DllReferencePlugin'</span>)</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> DllReferencePlugin(&#123;</span><br><span class="line">    manifest:<span class="built_in">require</span>(<span class="string">'./dist/react.manifest.json'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --config webpack.config.js --mode development</span><br></pre></td></tr></table></figure><p>这样会从<code>dll</code>中获取<code>React</code>，而且不用再次打包<code>React</code>了。可以在<code>HTML</code>中这样使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.dll.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="多进程之HappyPack"><a href="#多进程之HappyPack" class="headerlink" title="多进程之HappyPack"></a>多进程之HappyPack</h3><ul><li>构建需要解析和处理文件,<code>文件读写</code>和<code>计算密集型</code>的操作太多后速度会很慢</li><li><strong>Node.js</strong> 之上的 <strong>Webpack</strong> 是单线程模型</li><li><strong>happypack</strong> 就能让<strong>Webpack</strong>把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i happypack@next -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line">    rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例</span></span><br><span class="line">        use: [<span class="string">'happypack/loader?id=babel'</span>],</span><br><span class="line">        exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 把对 .css 文件的处理转交给 id 为 css 的 HappyPack 实例</span></span><br><span class="line">        use: [<span class="string">'happypack/loader?id=css'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">            <span class="comment">//ID是标识符的意思，ID用来代理当前的happypack是用来处理一类特定的文件的</span></span><br><span class="line">            id: <span class="string">'js'</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                <span class="comment">//options=query都是向插件传递参数的</span></span><br><span class="line">                options: &#123;</span><br><span class="line">                    presets: [[<span class="string">"@babel/preset-env"</span>, &#123; <span class="attr">modules</span>: <span class="literal">false</span> &#125;], <span class="string">"@babel/preset-react"</span>],</span><br><span class="line">                    plugins: [</span><br><span class="line">                        [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;),</span><br><span class="line"><span class="keyword">new</span> Happypack(&#123;</span><br><span class="line">    <span class="comment">//ID是标识符的意思，ID用来代理当前的happypack是用来处理一类特定的文件的</span></span><br><span class="line">    id: <span class="string">'css'</span>,</span><br><span class="line">    use: [MiniCssExtractPlugin.loader, <span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span>],</span><br><span class="line">    threads: <span class="number">4</span>,<span class="comment">//你要开启多少个子进程去处理这一类型的文件</span></span><br><span class="line">    verbose: <span class="literal">true</span><span class="comment">//是否要输出详细的日志 verbose</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p><strong>CDN</strong> 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度</p><p><img src="http://b.zhangyapeng.club/cnd-2019111151424.gif" alt="cnd-2019111151424"></p><ul><li>HTML文件不缓存，放在自己的服务器上，关闭自己服务器的缓存，静态资源的URL变成指向CDN服务器的地址</li><li>静态的<code>JavaScript</code>、<code>CSS</code>、<code>图片</code>等文件开启CDN和缓存，并且文件名带上<code>HASH值</code></li><li>为了<code>并行加载不阻塞</code>，把不同的静态资源分配到不同的<code>CDN服务器</code>上</li></ul><h3 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h3><p>由于 <code>CDN</code> 服务一般都会给资源开启很长时间的缓存，例如用户从 <code>CDN</code> 上获取到了 <code>index.html</code> 这个文件后， 即使之后的发布操作把 <code>index.html</code> 文件给重新覆盖了，但是用户在很长一段时间内还是运行的之前的版本，这会新的导致发布不能立即生效 </p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li>针对 <code>HTML</code> 文件：不开启缓存，把 <code>HTML</code> 放到自己的服务器上，而不是 <code>CDN</code> 服务上，同时关闭自己服务器上的缓存。自己的服务器只提供 <code>HTML</code> 文件和数据接口。</li><li>针对静态的 <code>JavaScript</code>、<code>CSS</code>、<code>图片</code>等文件：开启 <code>CDN</code> 和<code>缓存</code>，上传到 <code>CDN</code> 服务上去，同时给每个文件名带上由文件内容算出的 <code>Hash</code> 值</li><li>带上 <code>Hash</code> 值的原因是文件名会随着文件内容而变化，只要文件发生变化其对应的 <code>URL</code> 就会变化，它就会被<code>重新下载</code>，无论缓存时间有多长。</li><li>启用<code>CDN</code>之后 相对路径，都变成了绝对的指向 <code>CDN</code> 服务的 <code>URL</code> 地址</li></ul><h3 id="域名限制"><a href="#域名限制" class="headerlink" title="域名限制"></a>域名限制</h3><ul><li>同一时刻针对同一个域名的资源并行请求是有<code>限制</code></li><li>可以把这些静态资源分散到不同的 <code>CDN</code> 服务上去</li><li>多个域名后会增加域名解析时间</li><li>可以通过在 <code>HTML head</code> 标签中 加入<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;&quot;&gt;</code>去预解析域名，以降低域名解析带来的延迟</li></ul><h3 id="接入CDN"><a href="#接入CDN" class="headerlink" title="接入CDN"></a>接入CDN</h3><p>要给网站接入 <code>CDN</code>，需要把网页的静态资源上传到 <code>CDN</code> 服务上去，在服务这些静态资源的时候需要通过<code>CDN</code> 服务提供的 <code>URL</code> 地址去访问<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name]_[hash:8].js'</span>,</span><br><span class="line">        publicPath: <span class="string">'http://img.zhufengpeixun.cn'</span></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><p><code>tree shaking</code> 是一个术语，通常用于描述移除 <code>JavaScript</code> 上下文中的未引用代码。这个术语和概念实际上是兴起于 <code>ES2015</code> 模块打包工具 <code>rollup</code>。你可以将应用程序想象成一棵树。绿色表示实际用到的<code>源码</code>和 <code>library</code>，是树上活的树叶。灰色表示无用的代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。但是<code>webpack</code>的<code>Tree Shaking</code>依赖静态的<code>ES6</code>模块化语法即通过<code>import</code>和<code>export</code>导入导出的代码，而且需要引入一个能够删除未引用代码(<code>dead code</code>)的压缩工具(<code>minifier</code>)（例如 <code>UglifyJSPlugin</code>）或者在运行命令的时候用<code>webpack --display-used-exports --optimize-minimize --mode production</code></p><h3 id="不要编译ES6模块"><a href="#不要编译ES6模块" class="headerlink" title="不要编译ES6模块"></a>不要编译ES6模块</h3><ul><li>要让 <code>Tree Shaking</code> 正常工作的前提是交给<code>Webpack</code> 的 <code>JavaScript</code> 代码必须是采用 <code>ES6</code> 模块化语法的</li><li>对于 <code>module.export</code> <code>Webpack</code> 无法分析出哪些代码可以剔除</li><li><code>&quot;modules&quot;: false</code> 的含义是关闭 <code>Babel</code> 的模块转换功能，保留原本的 <code>ES6</code> 模块化语法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use:[&#123;</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">              presets:[[<span class="string">'@babel/preset-env'</span>,&#123;<span class="attr">modules</span>: <span class="literal">false</span> &#125;],<span class="string">'@babel/preset-react'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure><h3 id="显示未使用的导出实例"><a href="#显示未使用的导出实例" class="headerlink" title="显示未使用的导出实例"></a>显示未使用的导出实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --display-used-exports</span><br></pre></td></tr></table></figure><h3 id="剔除用不上的代码"><a href="#剔除用不上的代码" class="headerlink" title="剔除用不上的代码"></a>剔除用不上的代码</h3><p><strong>Webpack</strong>只是分析出了哪些函数用上了哪些没用上，要剔除用不上的代码还得经过<code>UglifyJS</code>去处理<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack --display-used-exports --optimize-minimize</span><br></pre></td></tr></table></figure></p><h3 id="启用压缩"><a href="#启用压缩" class="headerlink" title="启用压缩"></a>启用压缩</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                cache: <span class="literal">true</span>,<span class="comment">//启动缓存</span></span><br><span class="line">                parallel: <span class="literal">true</span>,<span class="comment">//启动并行压缩</span></span><br><span class="line">                <span class="comment">//如果为true的话，可以获得sourcemap</span></span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//压缩css资源的</span></span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深度分析"><a href="#深度分析" class="headerlink" title="深度分析"></a>深度分析</h3><p><a href="https://github.com/vincentdchan/webpack-deep-scope-analysis-plugin" target="_blank" rel="noopener">webpack-deep-scope-analysis-plugin</a><br><img src="http://b.zhangyapeng.club/webpack-deep-scope-analysis-plugin-2019111152823.jpeg" alt="webpack-deep-scope-analysis-plugin-2019111152823"><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash-es'</span>;</span><br><span class="line"><span class="comment">//加法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.isArray(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + _.isArray([]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    isArray,</span><br><span class="line">    add</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebpackDeepScopeAnalysisPlugin = <span class="built_in">require</span>(<span class="string">'webpack-deep-scope-plugin'</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    ...,</span><br><span class="line">    <span class="keyword">new</span> WebpackDeepScopeAnalysisPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h2><h3 id="为什么需要提取公共代码？"><a href="#为什么需要提取公共代码？" class="headerlink" title="为什么需要提取公共代码？"></a>为什么需要提取公共代码？</h3><p>大网站有多个页面，每个页面由于采用相同技术栈和样式代码，会包含很多公共代码，如果都包含进来会有问题</p><ul><li>相同的资源被重复的加载，浪费用户的流量和服务器的成本；</li><li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。 如果能把公共代码抽离成单独文件进行加载能进行优化，可以减少网络传输流量，降低服务器成本</li></ul><h3 id="如何提取"><a href="#如何提取" class="headerlink" title="如何提取"></a>如何提取</h3><ul><li>基础类库，方便长期缓存</li><li>页面之间的公用代码</li><li>各个页面单独生成文件</li><li>webpack版本用的都是<code>commonchunkplugin</code>,webpack4开始使用<a href="https://github.com/webpack/webpack/tree/master/examples/common-chunk-and-vendor-chunk" target="_blank" rel="noopener">common-chunk-and-vendor-chunk</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">       pageA: <span class="string">'./src/pageA'</span>,</span><br><span class="line">       pageB: <span class="string">'./src/pageB'</span>,</span><br><span class="line">       pageC: <span class="string">'./src/pageC'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   output: &#123;</span><br><span class="line">       path: path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">       filename: <span class="string">'[name].js'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   optimization: &#123;</span><br><span class="line">       splitChunks: &#123;</span><br><span class="line">           cacheGroups: &#123;</span><br><span class="line">               commons: &#123;</span><br><span class="line">                   chunks: <span class="string">"initial"</span>,</span><br><span class="line">                             minChunks: <span class="number">2</span>,<span class="comment">//最小重复的次数</span></span><br><span class="line">                             minSize: <span class="number">0</span><span class="comment">//最小提取字节数</span></span><br><span class="line">               &#125;,</span><br><span class="line">               vendor: &#123;</span><br><span class="line">                   test: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                   chunks: <span class="string">"initial"</span>,</span><br><span class="line">                   name: <span class="string">"vendor"</span>,</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   plugins:[</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">           template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">           filename: <span class="string">'pageA.html'</span>,</span><br><span class="line">           chunks: [<span class="string">'pageA'</span>],</span><br><span class="line">           minify: &#123;</span><br><span class="line">               removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;),</span><br><span class="line">       <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">           template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">           filename: <span class="string">'pageB.html'</span>,</span><br><span class="line">           chunks: [<span class="string">'pageB'</span>],</span><br><span class="line">           minify: &#123;</span><br><span class="line">               removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;),</span><br><span class="line">       <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">           template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">           filename: <span class="string">'pageC.html'</span>,</span><br><span class="line">           chunks: [<span class="string">'pageC'</span>],</span><br><span class="line">           minify: &#123;</span><br><span class="line">               removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure><h2 id="开启-Scope-Hoisting"><a href="#开启-Scope-Hoisting" class="headerlink" title="开启 Scope Hoisting"></a>开启 Scope Hoisting</h2><p><code>Scope Hoisting</code> 可以让 <code>Webpack</code> 打包出来的代码文件更小、运行的更快， 它又译作 <strong>“作用域提升”</strong>，是在 Webpack3 中新推出的功能。</p><ul><li>代码体积更小，因为函数申明语句会产生大量代码</li><li>代码在运行时因为创建的函数作用域更少了，内存开销也随之变小</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ModuleConcatenationPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/ModuleConcatenationPlugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 针对 Npm 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件</span></span><br><span class="line">    mainFields: [<span class="string">'jsnext:main'</span>, <span class="string">'browser'</span>, <span class="string">'main'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 开启 Scope Hoisting</span></span><br><span class="line">    <span class="keyword">new</span> ModuleConcatenationPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>hello.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'Hello'</span>;</span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./hello.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></p><p>输出的结果<code>main.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = name = <span class="string">"zfpx"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">函数由两个变成了一个，`</span>hello.js<span class="string">` 中定义的内容被直接注入到了 `</span>main.js<span class="string">` 中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 动态导入和懒加载</span></span><br><span class="line"><span class="string">用户当前需要用什么功能就只加载这个功能对应的代码，也就是所谓的按需加载 在给单页应用做按需加载优化时，一般采用以下原则：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 对网站功能进行划分，每一类一个`</span>chunk<span class="string">`</span></span><br><span class="line"><span class="string">- 对于首次打开页面需要的功能直接加载，尽快展示给用户</span></span><br><span class="line"><span class="string">- 某些依赖大量代码的功能点可以按需加载</span></span><br><span class="line"><span class="string">- 被分割出去的代码需要一个按需加载的时机</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">handler.js</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'你点我啦!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#clickBtn'</span>).addEventListener(<span class="string">'mouseover'</span>,() =&gt; &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./handler'</span>).then(<span class="function"><span class="params">clickMe</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.clickMe=clickMe.default;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"clickBtn"</span> <span class="attr">onclick</span>=<span class="string">"clickMe()"</span>&gt;</span>弹框<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="react-router4-路由懒加载"><a href="#react-router4-路由懒加载" class="headerlink" title="react-router4 路由懒加载"></a>react-router4 路由懒加载</h3><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;HashRouter <span class="keyword">as</span> Router,Route&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Bundle <span class="keyword">from</span> <span class="string">'./Bundle'</span>;</span><br><span class="line"><span class="keyword">let</span> LazyAbout=<span class="function">(<span class="params">props</span>) =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">Bundle</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">load</span>=<span class="string">&#123;()</span>=&gt;</span>import('./About')&#125;/&gt;)</span></span><br><span class="line"><span class="xml">let Home=() =&gt; <span class="tag">&lt;<span class="name">div</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">ReactDOM.render(</span></span><br><span class="line">&lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Route path="/" component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path="/about" component=&#123;LazyAbout&#125;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/Router&gt;,document.getElementById('root'));</span><br></pre></td></tr></table></figure></p><p>Bundle<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Bundle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    state=&#123;<span class="attr">Mod</span>: <span class="literal">null</span>&#125;</span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.props.load().then(<span class="function"><span class="params">mod</span>=&gt;</span><span class="keyword">this</span>.setState(&#123;<span class="attr">Mod</span>: mod.default? mod.default:mod&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> Mod=<span class="keyword">this</span>.state.Mod;</span><br><span class="line">        <span class="keyword">return</span> Mod&amp;&amp;<span class="xml"><span class="tag">&lt;<span class="name">Mod</span>  &#123;<span class="attr">...this.props</span>&#125;/&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><p>About<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> props =&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>About<span class="tag">&lt;/<span class="name">div</span></span></span></span><br></pre></td></tr></table></figure></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.zhufengpeixun.cn/plan/html/26.webpack-2-optimize.html" target="_blank" rel="noopener">webpack demo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;libraryTarget-和-library&quot;&gt;&lt;a href=&quot;#libraryTarget-和-library&quot; class=&quot;headerlink&quot; title=&quot;libraryTarget 和 library&quot;&gt;&lt;/a&gt;libraryTarget 和 l
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack/"/>
    
      <category term="webpack优化" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>webpack-1</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2019/01/08/webpack-1/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2019/01/08/webpack-1/</id>
    <published>2019-01-08T01:34:56.000Z</published>
    <updated>2019-01-11T06:43:34.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p><strong>Webpack</strong>是一个打包模块化 <strong>JavaScript</strong> 的工具，在 <strong>Webpack</strong> 里一切文件皆<strong>模块</strong>，通过 <strong>Loader</strong> 转换文件，通过 <strong>Plugin</strong> 注入钩子，最后输出由多个模块组合成的文件。<strong>Webpack</strong> 专注于构建模块化项目。</p><p>一切文件：<strong>JavaScript</strong>、<strong>CSS</strong>、<strong>SCSS</strong>、<strong>图片</strong>、<strong>模板</strong>，在 <strong>Webpack</strong> 眼中都是一个个模块，这样的好处是能清晰的描述出各个模块之间的<strong>依赖关系</strong>，以方便 <strong>Webpack</strong> 对模块进行组合和打包。 经过 <strong>Webpack</strong> 的处理，最终会输出浏览器能使用的静态资源。</p><p><img src="http://b.zhangyapeng.club/webpack-201919161945.jpeg" alt="webpack-201919161945"></p><h2 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h2><p>构建就是把源代码转换成发布到线上的可执行 <strong>JavaScrip</strong>、<strong>CSS</strong>、<strong>HTML</strong> 代码，包括如下内容。</p><ul><li><strong>代码转换</strong>：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。</li><li><strong>文件优化</strong>：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</li><li><strong>代码分割</strong>：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li><li><strong>模块合并</strong>：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li><li><strong>自动刷新</strong>：监听本地源代码的变化，自动重新构建、刷新浏览器。</li><li><strong>代码校验</strong>：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li><li><strong>自动发布</strong>：更新完代码后，自动构建出线上发布代码并传输给发布系统。</li></ul><h2 id="webpack核心概念"><a href="#webpack核心概念" class="headerlink" title="webpack核心概念"></a>webpack核心概念</h2><ul><li><strong>Entry</strong>：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</li><li><strong>Module</strong>：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。</li><li><strong>Chunk</strong>：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。</li><li><strong>Loader</strong>：模块转换器，用于把模块原内容按照需求转换成新内容。</li><li><strong>Plugin</strong>：扩展插件，在 Webpack 构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要的事情。</li><li><strong>Output</strong>：输出结果，在 Webpack 经过一系列处理并得出最终想要的代码后输出结果。</li></ul><h2 id="webpack执行流程"><a href="#webpack执行流程" class="headerlink" title="webpack执行流程"></a>webpack执行流程</h2><p><strong>Webpack</strong> 启动后会从<strong>Entry</strong>里配置的 <strong>Module</strong> 开始<strong>递归</strong>解析 <strong>Entry</strong> 依赖的所有 <strong>Module</strong>。 每找到一个 <strong>Module</strong>， 就会根据配置的<strong>Loader</strong>去找出对应的转换规则，对 <strong>Module</strong> 进行转换后，再解析出当前 <strong>Module</strong> 依赖的 <strong>Module</strong>。 这些模块会以 <strong>Entry</strong> 为单位进行分组，一个 <strong>Entry</strong> 和其所有依赖的 <strong>Module</strong> 被分到一个组也就是一个 <strong>Chunk</strong>。最后 <strong>Webpack</strong> 会把所有 <strong>Chunk</strong> 转换成文件输出。 在整个流程中 <strong>Webpack</strong> 会在恰当的时机执行 <strong>Plugin</strong> 里定义的逻辑。</p><h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h3 id="基本配置文件"><a href="#基本配置文件" class="headerlink" title="基本配置文件"></a>基本配置文件</h3><ul><li>配置文件<code>webpack.config.js</code><ul><li><strong>entry</strong>：配置入口文件的地址</li><li><strong>output</strong>：配置出口文件的地址</li><li><strong>module</strong>：配置模块,主要用来配置不同文件的加载器</li><li><strong>plugins</strong>：配置插件</li><li><strong>devServer</strong>：配置开发服务器</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>), <span class="comment">//绝对路径</span></span><br><span class="line">        filename:<span class="string">'[name].[hash:8].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">    plugins: [],</span><br><span class="line">    devServer: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-配置开发服务器"><a href="#1-配置开发服务器" class="headerlink" title="1. 配置开发服务器"></a>1. 配置开发服务器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server –D</span><br></pre></td></tr></table></figure><ul><li><strong>contentBase</strong>: 配置开发服务运行时的文件根目录</li><li><strong>host</strong>：开发服务器监听的主机地址</li><li><strong>compress</strong>: 开发服务器是否启动gzip等压缩</li><li><strong>port</strong>：开发服务器监听的端口</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">"dist"</span>), <span class="comment">//静态文件根目录</span></span><br><span class="line">    port: <span class="number">9090</span>, <span class="comment">// 端口</span></span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    overlay: <span class="literal">true</span>,</span><br><span class="line">    compress: <span class="literal">true</span> <span class="comment">// 服务器返回浏览器的时候是否启动gzip压缩</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件<code>package.json</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "build": "webpack --mode development",</span><br><span class="line">    "dev": "webpack-dev-server --open --mode development "</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="什么是Loader"><a href="#什么是Loader" class="headerlink" title="什么是Loader"></a>什么是Loader</h3><p>通过使用不同的<strong>Loader</strong>，<strong>Webpack</strong>可以要把不同的文件都转成<strong>JS</strong>文件,比如<strong>CSS</strong>、<strong>ES6/7</strong>、<strong>JSX</strong>等</p><ul><li><strong>test</strong>：匹配处理文件的扩展名的正则表达式</li><li><strong>use</strong>：loader名称，就是你要使用模块的名称</li><li><strong>include/exclude</strong>:手动指定必须处理的文件夹或屏蔽不需要处理的文件夹</li><li><strong>query</strong>：为loaders提供额外的设置选项</li></ul><h4 id="loader有3种写法"><a href="#loader有3种写法" class="headerlink" title="loader有3种写法"></a>loader有3种写法</h4><h5 id="1-1-loader"><a href="#1-1-loader" class="headerlink" title="1.1 loader"></a>1.1 loader</h5><p>加载CSS文件，CSS文件有可能在node_modules里，比如bootstrap和antd<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">               loader:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="1-2-use"><a href="#1-2-use" class="headerlink" title="1.2 use"></a>1.2 use</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">                use:[<span class="string">'style-loader'</span>,<span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h5 id="1-3-useloader"><a href="#1-3-useloader" class="headerlink" title="1.3 useloader"></a>1.3 useloader</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css-loader用来处理css中url的路径</span></span><br><span class="line"><span class="comment">// style-loader可以把css文件变成style标签插入head中</span></span><br><span class="line"><span class="comment">// 多个loader是有顺序要求的，从右往左写，因为转换的时候是从右往左转换的</span></span><br><span class="line"> <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">                include: path.resolve(__dirname,<span class="string">'src'</span>),<span class="comment">//限制范围，提高打包速度</span></span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        insertAt:<span class="string">'top'</span> <span class="comment">//插入head的最前面</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="string">'css-loader'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="支持加载css文件"><a href="#支持加载css文件" class="headerlink" title="支持加载css文件"></a>支持加载css文件</h4><ul><li><a href="https://www.npmjs.com/package/css-loader" target="_blank" rel="noopener">css-loader</a></li><li><a href="https://www.npmjs.com/package/style-loader" target="_blank" rel="noopener">style-loader</a></li></ul><h4 id="支持图片"><a href="#支持图片" class="headerlink" title="支持图片"></a>支持图片</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i file-loader url-loader -D</span><br></pre></td></tr></table></figure><ul><li><a href="http://npmjs.com/package/file-loader" target="_blank" rel="noopener">file-loader</a> 解决CSS等文件中的引入图片路径问题</li><li><a href="https://www.npmjs.com/package/url-loader" target="_blank" rel="noopener">url-loader</a> 当图片小于limit的时候会把图片BASE64编码，大于limit参数的时候还是使用file-loader 进行拷贝</li></ul><h5 id="js中引入图片"><a href="#js中引入图片" class="headerlink" title="js中引入图片"></a>js中引入图片</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> logo=<span class="built_in">require</span>(<span class="string">'./images/logo.png'</span>);</span><br><span class="line"><span class="keyword">let</span> img=<span class="keyword">new</span> Image();</span><br><span class="line">img.src=logo;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test:<span class="regexp">/\.(jpg|png|bmp|gif|svg|ttf|woff|woff2|eot)/</span>,</span><br><span class="line">    use:[</span><br><span class="line">    &#123;</span><br><span class="line">       loader:<span class="string">'url-loader'</span>,</span><br><span class="line">       options:&#123;<span class="attr">limit</span>:<span class="number">4096</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在CSS中引入图片"><a href="#在CSS中引入图片" class="headerlink" title="在CSS中引入图片"></a>在CSS中引入图片</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">355px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">133px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(./images/logo.png);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分离CSS"><a href="#分离CSS" class="headerlink" title="分离CSS"></a>分离CSS</h4><p>因为CSS的下载和JS可以<strong>并行</strong>,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载</p><ul><li><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">mini-css-extract-plugin</a></li><li>filename 打包入口文件</li><li>chunkFilename 用来打包<code>import(&#39;module&#39;)</code>方法中引入的模块</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure><p>配置webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">       <span class="comment">//参数类似于webpackOptions.output</span></span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].css'</span>,</span><br><span class="line">            chunkFilename:<span class="string">'[id].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">                test: <span class="regexp">/\.css/</span>,</span><br><span class="line">                include: path.resolve(__dirname,<span class="string">'src'</span>),</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: MiniCssExtractPlugin.loader</span><br><span class="line">                &#125;,<span class="string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="压缩JS和CSS"><a href="#压缩JS和CSS" class="headerlink" title="压缩JS和CSS"></a>压缩JS和CSS</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">"uglifyjs-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                cache: <span class="literal">true</span>,<span class="comment">//启动缓存</span></span><br><span class="line">                parallel: <span class="literal">true</span>,<span class="comment">//启动并行压缩</span></span><br><span class="line">                <span class="comment">//如果为true的话，可以获得sourcemap</span></span><br><span class="line">                sourceMap: <span class="literal">true</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">//压缩css资源的</span></span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="css和image存放单独目录"><a href="#css和image存放单独目录" class="headerlink" title="css和image存放单独目录"></a>css和image存放单独目录</h5><ul><li><strong>outputPath</strong> 输出路径</li><li><strong>publicPath</strong>指定的是构建后在html里的路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">        path: path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">        publicPath:<span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#123;</span><br><span class="line">  test:<span class="regexp">/\.(jpg|jpeg|png|bmp|gif|svg|ttf|woff|woff2|eot)/</span>,</span><br><span class="line">  use:[</span><br><span class="line">        &#123;</span><br><span class="line">          loader:<span class="string">'url-loader'</span>,</span><br><span class="line">          options:&#123;</span><br><span class="line">              limit: <span class="number">4096</span>,</span><br><span class="line">              outputPath: <span class="string">'images'</span>,</span><br><span class="line">              publicPath:<span class="string">'/images'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">           filename: <span class="string">'css/[name].css'</span>,</span><br><span class="line">            chunkFilename:<span class="string">'css/[id].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="在HTML中使用图片"><a href="#在HTML中使用图片" class="headerlink" title="在HTML中使用图片"></a>在HTML中使用图片</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-withimg-loader -D</span><br></pre></td></tr></table></figure><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/logo.png"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(html|htm)$/</span>,</span><br><span class="line">    use: <span class="string">'html-withimg-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="编译less-和-sass"><a href="#编译less-和-sass" class="headerlink" title="编译less 和 sass"></a>编译less 和 sass</h4><p>安装less和sass<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i less less-loader -D</span><br><span class="line">npm i node-sass sass-loader -D</span><br></pre></td></tr></table></figure></p><h5 id="编写样式"><a href="#编写样式" class="headerlink" title="编写样式"></a>编写样式</h5><p><strong>less</strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span>orange;</span><br><span class="line"><span class="selector-class">.less-container</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>sass</strong><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>:green;</span><br><span class="line"><span class="selector-class">.sass-container</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>webpack.config.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.less/</span>,</span><br><span class="line">        include: path.resolve(__dirname,<span class="string">'src'</span>),</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">        &#125;,<span class="string">'css-loader'</span>,<span class="string">'less-loader'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss/</span>,</span><br><span class="line">        include: path.resolve(__dirname,<span class="string">'src'</span>),</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">        &#125;,<span class="string">'css-loader'</span>,<span class="string">'sass-loader'</span>]</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></p><h4 id="处理CSS3属性前缀"><a href="#处理CSS3属性前缀" class="headerlink" title="处理CSS3属性前缀"></a>处理CSS3属性前缀</h4><p>为了浏览器的兼容性，有时候我们必须加入<code>-webkit</code>,<code>-ms</code>,<code>-o</code>,<code>-moz</code>这些前缀</p><ul><li><strong>Trident</strong>内核：主要代表为IE浏览器, 前缀为<code>-ms</code></li><li><strong>Gecko</strong>内核：主要代表为Firefox, 前缀为<code>-moz</code></li><li><strong>Presto</strong>内核：主要代表为Opera, 前缀为<code>-o</code></li><li><strong>Webkit</strong>内核：产要代表为Chrome和Safari, 前缀为<code>-webkit</code></li></ul><p>安装<a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">postcss-loader</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure></p><p>postcss.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"plugins"</span>: &#123;</span><br><span class="line">    <span class="comment">// to edit target browsers: use "browserslist" field in package.json</span></span><br><span class="line">    <span class="string">"autoprefixer"</span>: &#123;</span><br><span class="line">      <span class="string">"browsers"</span>: [</span><br><span class="line">        <span class="string">"ie &gt;= 9"</span>,</span><br><span class="line">        <span class="string">"ff &gt;= 30"</span>,</span><br><span class="line">        <span class="string">"chrome &gt;= 34"</span>,</span><br><span class="line">        <span class="string">"safari &gt;= 7"</span>,</span><br><span class="line">        <span class="string">"opera &gt;= 23"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   test:<span class="regexp">/\.css$/</span>,</span><br><span class="line">   use:[MiniCssExtractPlugin.loader,<span class="string">'css-loader'</span>,<span class="string">'postcss-loader'</span>],</span><br><span class="line">   include:path.join(__dirname,<span class="string">'./src'</span>),</span><br><span class="line">   exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="转义ES6-ES7-JSX"><a href="#转义ES6-ES7-JSX" class="headerlink" title="转义ES6/ES7/JSX"></a>转义ES6/ES7/JSX</h4><ul><li>Babel其实是一个编译JavaScript的平台,可以把ES6/ES7,React的JSX转义为ES5</li><li><a href="https://babeljs.io/docs/en/babel-plugin-proposal-decorators" target="_blank" rel="noopener">babel-plugin-proposal-decorators</a></li></ul><p>安装依赖包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel/core @babel/preset-env  @babel/preset-react  -D</span><br><span class="line">npm i @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties -D</span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        options:&#123;</span><br><span class="line">         <span class="string">"plugins"</span>: [</span><br><span class="line">            [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">            [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="string">"loose"</span> : <span class="literal">true</span> &#125;]</span><br><span class="line">         ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    include: path.join(__dirname,<span class="string">'src'</span>),</span><br><span class="line">    exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel runtime"></a>babel runtime</h4><ul><li>babel 在每个文件都插入了辅助代码，使代码体积过大</li><li>babel 对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code></li><li>默认情况下会被添加到每一个需要它的文件中。你可以引入 <code>@babel/runtime</code> 作为一个独立模块，来避免重复引入</li><li><a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime" target="_blank" rel="noopener">babel-plugin-transform-runtime</a></li></ul><p>安装依赖包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/plugin-transform-runtime</span><br><span class="line">npm install --save @babel/runtime</span><br></pre></td></tr></table></figure></p><p><strong>.babelrc</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">   [</span><br><span class="line">         <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="string">"corejs"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"helpers"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"regenerator"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"useESModules"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack打包的时候，会自动优化重复引入公共方法的问题</p><h4 id="ESLint校验代码格式规范"><a href="#ESLint校验代码格式规范" class="headerlink" title="ESLint校验代码格式规范"></a>ESLint校验代码格式规范</h4><ul><li><a href="https://eslint.org/docs/developer-guide/nodejs-api#cliengine" target="_blank" rel="noopener">eslint</a></li><li><a href="https://www.npmjs.com/package/eslint-loader" target="_blank" rel="noopener">eslint-loader</a></li><li><a href="https://eslint.org/docs/user-guide/configuring" target="_blank" rel="noopener">configuring</a></li><li><a href="https://www.npmjs.com/package/babel-eslint" target="_blank" rel="noopener">babel-eslint</a></li><li><a href="https://cloud.tencent.com/developer/chapter/12618" target="_blank" rel="noopener">Rules</a></li><li><a href="https://segmentfault.com/a/1190000008742240" target="_blank" rel="noopener">ESlint 语法检测配置说明</a></li></ul><p>安装依赖包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint eslint-loader babel-eslint --D</span><br></pre></td></tr></table></figure></p><p>.eslintrc.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    root: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//指定解析器选项</span></span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        sourceType: <span class="string">'module'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指定脚本的运行环境</span></span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启用的规则及其各自的错误级别</span></span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="string">"indent"</span>: [<span class="string">"error"</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line">        <span class="string">"quotes"</span>: [<span class="string">"error"</span>, <span class="string">"double"</span>],<span class="comment">//引号类型 </span></span><br><span class="line">        <span class="string">"semi"</span>: [<span class="string">"error"</span>, <span class="string">"always"</span>],<span class="comment">//关闭语句强制分号结尾</span></span><br><span class="line">        <span class="string">"no-console"</span>: <span class="string">"error"</span>,<span class="comment">//禁止使用console</span></span><br><span class="line">        <span class="string">"arrow-parens"</span>: <span class="number">0</span> <span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">//配置加载规则</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                enforce: <span class="string">"pre"</span>, <span class="comment">//在所有loader执行之前执行</span></span><br><span class="line">                include: [path.resolve(__dirname, <span class="string">'src'</span>)], <span class="comment">// 指定检查的目录</span></span><br><span class="line">                options: &#123; <span class="attr">fix</span>: <span class="literal">true</span> &#125; <span class="comment">// 这里的配置项参数将会被传递到 eslint 的 CLIEngine   </span></span><br><span class="line">            &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="对图片进行压缩和优化"><a href="#对图片进行压缩和优化" class="headerlink" title="对图片进行压缩和优化"></a>对图片进行压缩和优化</h4><p><a href="https://www.npmjs.com/package/image-webpack-loader" target="_blank" rel="noopener">image-webpack-loader</a>可以帮助我们对图片进行压缩和优化<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">          test: <span class="regexp">/\.(png|svg|jpg|gif|jpeg|ico)$/</span>,</span><br><span class="line">          use: [</span><br><span class="line">            <span class="string">'file-loader'</span>,</span><br><span class="line">           &#123;</span><br><span class="line">             loader: <span class="string">'image-webpack-loader'</span>,</span><br><span class="line">             options: &#123;</span><br><span class="line">               mozjpeg: &#123;</span><br><span class="line">                 progressive: <span class="literal">true</span>,</span><br><span class="line">                 quality: <span class="number">65</span></span><br><span class="line">               &#125;,</span><br><span class="line">               optipng: &#123;</span><br><span class="line">                 enabled: <span class="literal">false</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               pngquant: &#123;</span><br><span class="line">                 quality: <span class="string">'65-90'</span>,</span><br><span class="line">                 speed: <span class="number">4</span></span><br><span class="line">               &#125;,</span><br><span class="line">               gifsicle: &#123;</span><br><span class="line">                 interlaced: <span class="literal">false</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">               webp: &#123;</span><br><span class="line">                 quality: <span class="number">75</span></span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>在 <strong>webpack</strong> 的构建流程中，<strong>plugin</strong> 用于处理更多其他的一些构建任务</li><li>模块代码转换的工作由 <strong>loader</strong> 来处理</li><li>除此之外的其他任何工作都可以交由 <strong>plugin</strong> 来完成</li></ul><h4 id="自动产出html"><a href="#自动产出html" class="headerlink" title="自动产出html"></a>自动产出html</h4><p>我们希望自动能产出<strong>HTML</strong>文件，并在里面引入产出后的资源<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><ul><li><strong>minify</strong>:是对html文件进行压缩，</li><li><strong>removeAttrubuteQuotes</strong>:是去掉属性的双引号</li><li><strong>hash</strong>:引入产出资源的时候加上查询参数，值为哈希避免缓存</li><li><strong>template</strong>:模版路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">         minify: &#123;</span><br><span class="line">            removeAttributeQuotes:<span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        hash: <span class="literal">true</span>,</span><br><span class="line">        template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">        filename:<span class="string">'index.html'</span></span><br><span class="line">    &#125;)]</span><br></pre></td></tr></table></figure><h4 id="添加商标"><a href="#添加商标" class="headerlink" title="添加商标"></a>添加商标</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'珠峰培训'</span>)</span><br></pre></td></tr></table></figure><h4 id="拷贝静态文件"><a href="#拷贝静态文件" class="headerlink" title="拷贝静态文件"></a>拷贝静态文件</h4><p>有时项目中没有引用的文件也需要打包到目标目录<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i copy-webpack-plugin -D</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">  <span class="keyword">from</span>: path.resolve(__dirname,<span class="string">'src/assets'</span>),<span class="comment">//静态资源目录源地址</span></span><br><span class="line">  to:path.resolve(__dirname,<span class="string">'dist/assets'</span>) <span class="comment">//目标地址，相对于output的path目录</span></span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><h4 id="打包前先清空输出目录"><a href="#打包前先清空输出目录" class="headerlink" title="打包前先清空输出目录"></a>打包前先清空输出目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i  clean-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CleanWebpackPlugin([path.resolve(__dirname,<span class="string">'dist'</span>)])</span><br></pre></td></tr></table></figure><h4 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h4><p><strong>DefinePlugin</strong>创建一些在编译时可以配置的全局常量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">    PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),</span><br><span class="line">    VERSION: <span class="string">"1"</span>,</span><br><span class="line">    EXPRESSION: <span class="string">"12"</span>,</span><br><span class="line">    COPYRIGHT: &#123;</span><br><span class="line">        AUTHOR: <span class="built_in">JSON</span>.stringify(<span class="string">"珠峰培训"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(PRODUCTION);</span><br><span class="line"><span class="built_in">console</span>.log(VERSION);</span><br><span class="line"><span class="built_in">console</span>.log(EXPRESSION);</span><br><span class="line"><span class="built_in">console</span>.log(COPYRIGHT);</span><br></pre></td></tr></table></figure><ul><li>如果配置的值是<strong>字符串</strong>，那么整个字符串会被当成<strong>代码片段</strong>来执行，其结果作为最终变量的值，,类似<code>eval</code>执行的其值</li><li>如果配置的值<strong>不是字符串</strong>，也不是一个<strong>对象字面量</strong>，那么该值会被转为一个字符串，如 <strong>true</strong>，最后的结果是 <strong>‘true’</strong></li><li>如果配置的是一个<strong>对象字面量</strong>，那么该对象的所有 <strong>key</strong> 会以同样的方式去定义</li><li><strong>JSON.stringify(true)</strong> 的结果是 <strong>‘true’</strong></li></ul><h4 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h4><p><strong>IgnorePlugin</strong>用于忽略某些特定的模块，让 <strong>webpack</strong> 不把这些指定的模块打包进去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span>  <span class="string">'moment'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(moment);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale/</span>,/moment$/)</span><br></pre></td></tr></table></figure><ul><li>第一个是匹配引入<strong>模块路径</strong>的正则表达式</li><li>第二个是匹配模块的对应上下文，即所在<strong>目录名</strong></li></ul><hr><h3 id="如何调试打包后的代码"><a href="#如何调试打包后的代码" class="headerlink" title="如何调试打包后的代码"></a>如何调试打包后的代码</h3><p><strong>webpack</strong>通过配置可以自动给我们<strong>source maps</strong>文件,<strong>map</strong>文件是一种对应编译文件和源文件的方法</p><ul><li><strong>source-map</strong>: 在单独文件中生成，可以映射到列</li><li><strong>cheap-module-source-map</strong>: 在单独文件中生成，可以映射到列</li><li><strong>eval-source-map</strong>: 在同一个文件内生成source map，可以映射到列</li><li><strong>cheap-module-eval-source-map</strong>: 在同一个文件内生成source map，不可以映射到列</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool:<span class="string">'eval-source-map'</span></span><br></pre></td></tr></table></figure><h3 id="打包第三方类库"><a href="#打包第三方类库" class="headerlink" title="打包第三方类库"></a>打包第三方类库</h3><h4 id="直接引入"><a href="#直接引入" class="headerlink" title="直接引入"></a>直接引入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line">alert(_.join([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],<span class="string">'@'</span>));</span><br></pre></td></tr></table></figure><h4 id="插件引入"><a href="#插件引入" class="headerlink" title="插件引入"></a>插件引入</h4><ul><li>类似在每个模块下引用<code>import _ from &#39;lodash</code></li><li>函数会自动添加到当前模块的<code>上下文</code>，无需显示声明</li><li>执行上下文，这是一个局部变量</li><li>如果你有一个第三方的插件，依赖全局对象下的属性</li><li><code>jqueryui</code> 他会依赖<code>window.jquery</code>,所以不行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">    _:<span class="string">'lodash'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="expose-loader"><a href="#expose-loader" class="headerlink" title="expose-loader"></a>expose-loader</h4><p>不需要任何其他的插件配合，只要将下面的代码添加到所有的loader之前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"expose-loader?libraryName!./file.js"</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    test: <span class="built_in">require</span>.resolve(<span class="string">"jquery"</span>), </span><br><span class="line">    loader: <span class="string">"expose-loader?jQuery"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"expose-loader?$!jquery"</span>);</span><br></pre></td></tr></table></figure><h4 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h4><p>如果我们想引用一个库，但是又不想<strong>让webpack打包</strong>，并且又不影响我们在程序中以<strong>CMD</strong>、<strong>AMD</strong>或者<strong>window/global</strong>全局等方式进行使用，那就可以通过配置<strong>externals</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jQuery = <span class="built_in">require</span>(<span class="string">"jquery"</span>);</span><br><span class="line"><span class="keyword">import</span> jQuery <span class="keyword">from</span> <span class="string">'jquery'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">   <span class="comment">//  key 模块名 ,value就是真正运行时从window的那个属性上取值</span></span><br><span class="line">   jquery: <span class="string">'jQuery'</span><span class="comment">//如果要在浏览器中运行，那么不用添加什么前缀，默认设置就是global</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h3><p><strong>process.env</strong>属性返回一个包含<strong>用户环境信息</strong>的对象</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><h5 id="Windows配置"><a href="#Windows配置" class="headerlink" title="Windows配置"></a>Windows配置</h5><ul><li><p>临时配置(命令行)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node中常用的到的环境变量是NODE_ENV，首先查看是否存在 </span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV </span><br><span class="line"><span class="comment">#如果不存在则添加环境变量 </span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV=production </span><br><span class="line"><span class="comment">#环境变量追加值 set 变量名=%变量名%;变量内容 </span></span><br><span class="line"><span class="built_in">set</span> path=%path%;C:\web;C:\Tools </span><br><span class="line"><span class="comment">#某些时候需要删除环境变量 </span></span><br><span class="line"><span class="built_in">set</span> NODE_ENV=</span><br></pre></td></tr></table></figure></li><li><p>永久配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右键(此电脑) -&gt; 属性(R) -&gt; 高级系统设置 -&gt; 环境变量(N)...</span><br></pre></td></tr></table></figure></li></ul><h4 id="Linux配置"><a href="#Linux配置" class="headerlink" title="Linux配置"></a>Linux配置</h4><ul><li><p>临时(命令行)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#node中常用的到的环境变量是NODE_ENV，首先查看是否存在</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$NODE_ENV</span></span><br><span class="line"><span class="comment">#如果不存在则添加环境变量</span></span><br><span class="line"><span class="built_in">export</span> NODE_ENV=production</span><br><span class="line"><span class="comment">#环境变量追加值</span></span><br><span class="line"><span class="built_in">export</span> path=<span class="variable">$path</span>:/home/download:/usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="comment">#某些时候需要删除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> NODE_ENV</span><br><span class="line"><span class="comment">#某些时候需要显示所有的环境变量</span></span><br><span class="line">env</span><br></pre></td></tr></table></figure></li><li><p>永久(配置文件)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有用户都生效</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 当前用户生效</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾添加如下格式的环境变量</span></span><br><span class="line"><span class="built_in">export</span> path=<span class="variable">$path</span>:/home/download:/usr/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">export</span> NODE_ENV = product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/etc/profile文件后</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 修改~/.bash_profile文件后</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li></ul><p>因为windows不支持<strong>NODE_ENV=development</strong>的设置方式。</p><p>可以通过<strong>cross-env</strong>实现<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cross-env NODE_ENV=development webpack --mode=development</span><br></pre></td></tr></table></figure></p><hr><h3 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h3><p>如果你有单独的后端开发服务器 <strong>API</strong>，并且希望在同域名下发送 <strong>API</strong> 请求 ，那么代理某些 <strong>URL</strong> 会很有用。</p><h4 id="不修改路径"><a href="#不修改路径" class="headerlink" title="不修改路径"></a>不修改路径</h4><p>请求到 <strong>/api/users</strong> 现在会被代理到请求 <strong><a href="http://localhost:3000/api/users" target="_blank" rel="noopener">http://localhost:3000/api/users</a></strong>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api开头的接口代理到3000端口</span></span><br><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">"/api"</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="修改路径"><a href="#修改路径" class="headerlink" title="修改路径"></a>修改路径</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api开头的接口代理到3000端口</span></span><br><span class="line"><span class="comment">// api/users===&gt;users</span></span><br><span class="line">proxy: &#123;</span><br><span class="line">    <span class="string">"/api"</span>: &#123;</span><br><span class="line">       target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">       pathRewrite:&#123;<span class="string">"^/api"</span>:<span class="string">""</span>&#125;        </span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="before-after"><a href="#before-after" class="headerlink" title="before after"></a>before after</h4><p><strong>before</strong> 在 <strong>webpack-dev-server</strong> 静态资源中间件处理之前，可以用于拦截部分请求返回特定内容，或者实现简单的数据 <strong>mock</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before(app)&#123;</span><br><span class="line">  app.get(<span class="string">'/api/users'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; </span><br><span class="line">    res.json([&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'zfpx1'</span>&#125;])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h4><p><a href="https://www.npmjs.com/package/" target="_blank" rel="noopener">webpack-dev-middleware</a>就是在 <strong>Express</strong> 中提供 <strong>webpack-dev-server</strong> 静态服务能力的一个中间件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-middleware --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>);</span><br><span class="line"><span class="keyword">const</span> webpackOptions = <span class="built_in">require</span>(<span class="string">'./webpack.config'</span>);</span><br><span class="line">webpackOptions.mode = <span class="string">'development'</span>;</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(webpackOptions);</span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;&#125;));</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>webpack-dev-server</strong> 的好处是相对简单，直接安装依赖后执行命令即可</li><li>而使用<strong>webpack-dev-middleware</strong>的好处是可以在既有的<strong>Express</strong> 代码基础上快速添加<strong>webpack-dev-server</strong> 的功能，同时利用 <strong>Express</strong> 来根据需要添加更多的功能，如 <strong>mock</strong> 服务、代理 <strong>API</strong> 请求等</li></ul><h3 id="resolve解析"><a href="#resolve解析" class="headerlink" title="resolve解析"></a>resolve解析</h3><h4 id="extensions"><a href="#extensions" class="headerlink" title="extensions"></a>extensions</h4><p>指定<strong>extension</strong>之后可以不用在<strong>require</strong>或是<strong>import</strong>的时候加<strong>文件扩展名</strong>,会依次尝试添加扩展名进行匹配<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">".js"</span>,<span class="string">".jsx"</span>,<span class="string">".json"</span>,<span class="string">".css"</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><ul><li><strong>配置别名</strong>可以加快webpack查找模块的速度</li><li>每当引入<strong>bootstrap</strong>模块的时候，它会直接引入<strong>bootstrap</strong>,而不需要从<strong>node_modules</strong>文件夹中按模块的查找规则查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bootstrap = path.resolve(__dirname,<span class="string">'node_modules/_bootstrap@3.3.7@bootstrap/dist/css/bootstrap.css'</span>);</span><br><span class="line">resolve: &#123;</span><br><span class="line">    alias:&#123;</span><br><span class="line">       <span class="string">"bootstrap"</span>:bootstrap</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><ul><li>对于直接声明依赖名的模块（如 <strong>react</strong> ），<strong>webpack</strong> 会类似 <strong>Node.js</strong> 一样进行路径搜索，搜索<strong>node_modules</strong>目录</li><li>这个目录就是使用<strong>resolve.modules</strong>字段进行配置的 默认配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">modules: [<span class="string">'node_modules'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果可以确定项目内所有的第三方依赖模块都是在项目根目录下的 <strong>node_modules</strong> 中的话<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">modules: [path.resolve(__dirname, <span class="string">'node_modules'</span>)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="mainFields"><a href="#mainFields" class="headerlink" title="mainFields"></a>mainFields</h4><p>默认情况下<strong>package.json</strong> 文件则按照文件中 <strong>main</strong> 字段的文件名来查找文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  <span class="comment">// 配置 target === "web" 或者 target === "webworker" 时 mainFields 默认值是：</span></span><br><span class="line">  mainFields: [<span class="string">'browser'</span>, <span class="string">'module'</span>, <span class="string">'main'</span>],</span><br><span class="line">  <span class="comment">// target 的值为其他时，mainFields 默认值为：</span></span><br><span class="line">  mainFields: [<span class="string">"module"</span>, <span class="string">"main"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="mainFiles"><a href="#mainFiles" class="headerlink" title="mainFiles"></a>mainFiles</h4><p>当目录下没有 <strong>package.json</strong> 文件时，我们说会默认使用目录下的 <strong>index.js</strong> 这个文件，其实这个也是可以配置的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  mainFiles: [<span class="string">'index'</span>], <span class="comment">// 你可以添加其他默认使用的文件名</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="resolveLoader"><a href="#resolveLoader" class="headerlink" title="resolveLoader"></a>resolveLoader</h4><p><strong>resolve.resolveLoader</strong>用于配置解析 <strong>loader</strong> 时的 <strong>resolve</strong> 配置,默认的配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolveLoader: &#123;</span><br><span class="line">    modules: [ <span class="string">'node_modules'</span> ],</span><br><span class="line">    extensions: [ <span class="string">'.js'</span>, <span class="string">'.json'</span> ],</span><br><span class="line">    mainFields: [ <span class="string">'loader'</span>, <span class="string">'main'</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h3><ul><li><strong>module.noParse</strong> 字段，可以用于配置哪些模块文件的内容不需要被<strong>loaders</strong>解析</li><li>不需要解析依赖（即无依赖） 的第三方大型类库等，可以通过这个字段来配置，以提高整体的构建速度</li><li>使用 <strong>noParse</strong> 进行忽略的<strong>模块文件中</strong>不能使用 <strong>import</strong>、<strong>require</strong>、<strong>define</strong> 等导入机制,因为这些模块加载<strong>并不会被解析</strong>，所以就会报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  noParse: <span class="regexp">/jquery|lodash/</span>, <span class="comment">// 正则表达式</span></span><br><span class="line">  <span class="comment">// 或者使用函数</span></span><br><span class="line">  noParse(content) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/jquery|lodash/</span>.test(content)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>当代码发生修改后可以自动<strong>重新编译</strong></p><ul><li>webpack定时获取文件的更新时间，并跟上次保存的时间进行比对，不一致就表示发生了变化,<strong>poll</strong>就用来配置每秒问多少次</li><li>当检测文件不再发生变化，会先缓存起来，等待一段时间后之后再通知监听者，这个等待时间通过<strong>aggregateTimeout</strong>配置</li><li><strong>webpack</strong>只会监听<strong>entry</strong>依赖的文件</li><li>我们需要尽可能减少需要监听的文件数量和检查频率，当然频率的降低会导致灵敏度下降<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">watch: <span class="literal">true</span>,</span><br><span class="line">watchOptions: &#123;</span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span>, <span class="comment">//忽略不用监听变更的目录</span></span><br><span class="line">    poll:<span class="number">1000</span>, <span class="comment">//每秒询问的文件变更的次数</span></span><br><span class="line">    aggregateTimeout: <span class="number">500</span>, <span class="comment">//防止重复保存频繁重新编译,500毫秒内重复保存不打包</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="区分环境变量"><a href="#区分环境变量" class="headerlink" title="区分环境变量"></a>区分环境变量</h3><ul><li>日常的前端开发工作中，一般都会有<strong>两套</strong>构建环境</li><li>一套开发时使用，构建结果用于本地开发调试，不进行<strong>代码压缩</strong>，打印 <strong>debug</strong> 信息，包含 <strong>sourcemap</strong> 文件</li><li>一套构建后的结果是直接应用于线上的，即代码都是压缩后，运行时不打印 <strong>debug</strong> 信息，静态文件不包括 <strong>sourcemap</strong></li><li>webpack 4.x 版本引入了 <strong>mode</strong> 的概念</li><li>当你指定使用 <strong>production mode</strong> 时，默认会启用各种性能优化的功能，包括<strong>构建结果优化</strong>以及 <strong>webpack 运行性能优化</strong></li><li>而如果是 <strong>development mode</strong> 的话，则会开启 <strong>debug</strong> 工具，运行时打印详细的错误信息，以及更加快速的增量编译构建</li></ul><h4 id="环境差异"><a href="#环境差异" class="headerlink" title="环境差异"></a>环境差异</h4><ul><li>生产环境<ul><li>可能需要分离 <strong>CSS</strong> 成单独的文件，以便多个页面共享同一个 <strong>CSS</strong> 文件</li><li>需要压缩<strong>HTML/CSS/JS</strong> 代码</li><li>需要<strong>压缩图片</strong></li></ul></li><li>开发环境<ul><li>需要生成 <strong>sourcemap</strong> 文件</li><li>需要打印 <strong>debug</strong> 信息</li><li>需要 <strong>live reload</strong> 或者 <strong>hot reload</strong> 的功能…</li></ul></li></ul><h4 id="获取mode参数"><a href="#获取mode参数" class="headerlink" title="获取mode参数"></a>获取mode参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/UglifyJsPlugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function">(<span class="params">env,argv</span>) =&gt;</span> (&#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: argv.mode == <span class="string">'production'</span>?[            </span><br><span class="line">            <span class="keyword">new</span> UglifyJSplugin(&#123;</span><br><span class="line">                  cache: <span class="literal">true</span>,<span class="comment">//启用缓存</span></span><br><span class="line">                  parallel: <span class="literal">true</span>,<span class="comment">// 使用多进程运行改进编译速度</span></span><br><span class="line">                  sourceMap:<span class="literal">true</span><span class="comment">//生成sourceMap映射文件</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(&#123;&#125;)</span><br><span class="line">        ]:[]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="封装log方法"><a href="#封装log方法" class="headerlink" title="封装log方法"></a>封装log方法</h4><p><strong>webpack</strong>时传递的 <strong>mode</strong> 参数，是可以在我们的应用代码运行时，通过 <strong>process.env.NODE_ENV</strong> 这个变量获取<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="拆分配置"><a href="#拆分配置" class="headerlink" title="拆分配置"></a>拆分配置</h4><p>可以把 <strong>webpack</strong> 的配置按照不同的环境拆分成多个文件，运行时直接根据环境变量加载对应的配置即可</p><ul><li>webpack.base.js：基础部分，即多个文件中共享的配置</li><li>webpack.development.js：开发环境使用的配置</li><li>webpack.production.js：生产环境使用的配置</li><li>webpack.test.js：测试环境使用的配置…</li><li><a href="https://github.com/survivejs/webpack-merge" target="_blank" rel="noopener">webpack-merge</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; smart &#125; = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> base = <span class="built_in">require</span>(<span class="string">'./webpack.base.js'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = smart(base, &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="多入口"><a href="#多入口" class="headerlink" title="多入口"></a>多入口</h4><p>有时候我们的页面可以不止一个HTML页面，会有多个页面，所以就需要<strong>多入口</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">'./src/index.js'</span>,</span><br><span class="line">        login: <span class="string">'./src/login.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span>,</span><br><span class="line">        publicPath: <span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            hash: <span class="literal">true</span>,</span><br><span class="line">            template: <span class="string">'./src/index.html'</span>,</span><br><span class="line">            chunks: [<span class="string">'index'</span>],</span><br><span class="line">            filename: <span class="string">'index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            hash: <span class="literal">true</span>,</span><br><span class="line">            chunks: [<span class="string">'login'</span>],</span><br><span class="line">            template: <span class="string">'./src/login.html'</span>,</span><br><span class="line">            filename: <span class="string">'login.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://webpack.docschina.org/configuration/resolve/" target="_blank" rel="noopener">webpack</a></li><li><a href="http://www.zhufengpeixun.cn/plan/html/26.webpack-1-basic.html" target="_blank" rel="noopener">webpackdemo</a></li><li><a href="https://www.cnblogs.com/tugenhua0707/p/9780621.html" target="_blank" rel="noopener">理解webpack之process.env.NODE_ENV详解</a></li><li><a href="https://juejin.im/post/5ab79fa75188255582525400" target="_blank" rel="noopener">webpack4之基础篇</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是webpack&quot;&gt;&lt;a href=&quot;#什么是webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是webpack&quot;&gt;&lt;/a&gt;什么是webpack&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Webpack&lt;/strong&gt;是一个打包模块化 &lt;stro
      
    
    </summary>
    
    
      <category term="webpack系列" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack%E7%B3%BB%E5%88%97/"/>
    
      <category term="webpack实战" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/webpack%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/12/12/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/12/12/跨域/</id>
    <published>2018-12-12T08:36:52.000Z</published>
    <updated>2018-12-17T10:24:01.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域总结"><a href="#跨域总结" class="headerlink" title="跨域总结"></a>跨域总结</h2><h3 id="为什么会出现跨域问题"><a href="#为什么会出现跨域问题" class="headerlink" title="为什么会出现跨域问题"></a>为什么会出现跨域问题</h3><p>出于浏览器的<strong>同源策略</strong>限制，浏览器会拒绝跨域请求。</p><p>严格的说，浏览器并不是<strong>拒绝所有的跨域请求</strong>，实际上拒绝的是跨域的<strong>读</strong>操作。</p><ul><li>通常浏览器允许进行跨域<strong>写</strong>操作（Cross-origin writes），如<code>链接</code>，<code>重定向</code>；</li><li>通常浏览器允许跨域资源<strong>嵌入</strong>（Cross-origin embedding），如 <code>img</code>、<code>script</code> 标签；</li><li>通常浏览器不允许跨域<strong>读</strong>操作（Cross-origin reads）。<code>*</code><ul><li><strong>cookie</strong> <strong>localStorage</strong> </li><li><strong>DOM元素</strong>也有同源策略 <code>iframe</code></li><li><strong>ajax</strong>也不支持跨域</li></ul></li></ul><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>如果两个页面拥有相同的<strong>协议</strong>（protocol），<strong>端口</strong>（port）和<strong>主机</strong>（host），那么这两个页面就属于同一个源（origin）。</p><p><img src="http://b.zhangyapeng.club/同源策略-20181217112324.jpg" alt="同源策略-20181217112324"></p><h3 id="实现跨域的方法"><a href="#实现跨域的方法" class="headerlink" title="实现跨域的方法"></a>实现跨域的方法</h3><ul><li><p><strong>jsonp</strong>只能发送<strong>GET</strong>请求,不支持<strong>post</strong>、<strong>put</strong>、<strong>delete</strong>。不安全,容易手<strong>xss</strong>攻击,不采用</p></li><li><p>利用<strong>script标签</strong>不受跨域限制而形成的一种方案。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url,params,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> script=<span class="built_in">document</span>.createElement(<span class="string">"script"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">window</span>[cb]=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">            resolve(data)</span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">        &#125;</span><br><span class="line">        params=&#123;...params,cb&#125;</span><br><span class="line">        <span class="keyword">let</span> str=<span class="built_in">Object</span>.keys(params).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> item=params[item]</span><br><span class="line">        &#125;).join(<span class="string">"&amp;"</span>)</span><br><span class="line">        script.src=<span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(&#123;</span><br><span class="line">url:<span class="string">'http://localhost:3000/say'</span>,</span><br><span class="line">parms:&#123;</span><br><span class="line">                wd:<span class="string">'我爱你'</span></span><br><span class="line">    &#125;,</span><br><span class="line">cb:<span class="string">'show'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>跨域资源共享标准新增了一组<strong>HTTP</strong>首部字段，允许服务器声明哪些源站有权限访问哪些资源。</p><h4 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h4><hr><h5 id="简单请求（simple-request）"><a href="#简单请求（simple-request）" class="headerlink" title="简单请求（simple request）"></a>简单请求（simple request）</h5><ol><li><p>请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul></li><li><p>HTTP的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值<ul><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text/plain</li></ul></li></ul></li></ol><h5 id="非简单请求（not-so-simple-request）"><a href="#非简单请求（not-so-simple-request）" class="headerlink" title="非简单请求（not-so-simple request）"></a>非简单请求（not-so-simple request）</h5><p>凡是<strong>不同时满足</strong>上面两个条件，就属于非简单请求。</p><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>简单请求只需要<strong>CORS服务端</strong>在接受到携带<strong>Origin</strong>字段的跨域请求后，在<strong>response header</strong>中添加<strong>Access-Control-Allow-Origin</strong>等字段给浏览器做同源判断。</p><p><img src="http://b.zhangyapeng.club/简单请求-20181217152038.png" alt="简单请求-20181217152038"></p><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><p>请求方法是<strong>PUT</strong>或<strong>DELETE</strong>，或者<strong>Content-Type</strong>字段的类型是<strong>application/json</strong>,或者人为设置一些<strong>请求头</strong></p><ol><li><p>进行非简单请求时候,浏览器会首先发出类型为<strong>OPTIONS</strong>的<strong>预检请求</strong>，请求地址相同,</p></li><li><p>服务器收到”<strong>预检</strong>“请求以后，检查了<strong>Origin</strong>、<strong>Access-Control-Request-Method</strong>和<strong>Access-Control-Request-Headers</strong>字段以后，确认允许跨源请求，就可以做出回应。</p></li><li><p>关键的是<strong>Access-Control-Allow-Origin</strong>字段，表示<strong><a href="http://api.bob.com" target="_blank" rel="noopener">http://api.bob.com</a></strong>可以请求数据。该字段也可以设为<strong>星号</strong>，表示同意任意<strong>跨源请求</strong>。</p></li><li><p>如果浏览器否定了<strong>预检</strong>请求，会返回一个正常的HTTP回应，但是没有任何<strong>CORS相关的头信息</strong>字段。这时，浏览器就会<strong>认定</strong>，服务器<strong>不同意预检</strong>请求</p></li><li><p>一旦服务器通过了”<strong>预检</strong>“请求，以后每次浏览器正常的CORS请求，就都跟<strong>简单请求</strong>一样，会有一个<strong>Origin</strong>头信息字段。<strong>服务器的回应</strong>，也都会有一个<strong>Access-Control-Allow-Origin</strong>头信息字段。<strong>Access-Control-Allow-Origin</strong>字段是每次回应都必定包含的!</p></li></ol><p><img src="http://b.zhangyapeng.club/cors-20181217144424.jpg" alt="cors-20181217144424"></p><p>server.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 白名单</span></span><br><span class="line"><span class="keyword">let</span> whitList=[<span class="string">'http://localhost:3000'</span>]</span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> origin=req.headers.origin;</span><br><span class="line">    <span class="keyword">if</span>(whitList.includes(origin))&#123;</span><br><span class="line">        <span class="comment">// 设置那个源可以访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>,origin) <span class="comment">//允许那个源访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>,<span class="string">'name,age'</span>) <span class="comment">//允许携带那个头访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>,<span class="string">'PUT'</span>)<span class="comment">//默认GET POST //允许那个方法访问我</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Max-Age'</span>,<span class="number">6</span>)<span class="comment">//options没6s发送一次 //预检的存活时间</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>,<span class="literal">true</span>); <span class="comment">//cookie //允许携带cookie</span></span><br><span class="line">        res.setHeader(<span class="string">'Access-Control-Expose-Headers'</span>,<span class="string">'name,age'</span>) <span class="comment">//后台给前台发送的头'name'是安全的，前端可以获取到</span></span><br><span class="line">        <span class="keyword">if</span>(req.method===<span class="string">'OPTIONS'</span>)&#123; <span class="comment">// 预检请求</span></span><br><span class="line">            res.end();<span class="comment">//options请求不做任何处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">app.put(<span class="string">"/getData"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.headers) <span class="comment">//请求发过来了,浏览器屏蔽了</span></span><br><span class="line">    res.setHeader(<span class="string">'name'</span>,<span class="string">'zh'</span>)</span><br><span class="line">    res.end(<span class="string">'我不爱你'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3001</span>)</span><br></pre></td></tr></table></figure></p><p>client.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">       <span class="comment">// xhr.open("GET",'http://localhost:3001/getData?wd=1',true) //是否异步</span></span><br><span class="line">       <span class="built_in">document</span>.cookie=<span class="string">'name=zyp'</span> <span class="comment">//cookie不允许跨域</span></span><br><span class="line">       xhr.withCredentials=<span class="literal">true</span> ;<span class="comment">//携带凭证</span></span><br><span class="line">       xhr.open(<span class="string">"POST"</span>,<span class="string">'http://localhost:3001/getData'</span>,<span class="literal">true</span>)</span><br><span class="line">       <span class="comment">// xhr.setRequestHeader('name','zyp')</span></span><br><span class="line">       xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'age'</span>,<span class="string">'1'</span>)</span><br><span class="line">       xhr.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(xhr.readyState===<span class="number">4</span> &amp;&amp; xhr.status&gt;=<span class="number">200</span> &amp;&amp; xhr.status&lt;=<span class="number">300</span> || xhr.status==<span class="number">304</span>)&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">               <span class="built_in">console</span>.log(xhr.getResponseHeader(<span class="string">'name'</span>))</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       xhr.send()</span><br></pre></td></tr></table></figure></p><h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>如果两个网页<strong>不同源</strong>，就无法拿到<strong>对方的DOM</strong>。典型的例子是<strong>iframe窗口</strong>和window.open方法打开的窗口，它们与<strong>父窗口无法通信</strong>。</p><p>比如，父窗口运行下面的命令，如果<strong>iframe</strong>窗口不是同源，就会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myIFrame"</span>).contentWindow.document</span><br><span class="line"><span class="comment">// Uncaught DOMException: Blocked a frame from accessing a cross-origin frame.</span></span><br></pre></td></tr></table></figure></p><p>当你的页面处于最顶层，也就是外层没有<code>iframe</code>包裹你，求这时<code>window === window.parent</code>的返回值。</p><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>如果两个窗口<strong>一级域名相同</strong>，只是<strong>二级域名不同</strong>，那么设置<strong>document.domain</strong>属性，就可以规避同源政策，拿到DOM。</p><p>A网页是<code>http://w1.example.com/a.html</code>，B网页是<code>http://w2.example.com/b.html</code>，那么只要设置相同的<code>document.domain</code>，两个网页就可以共享Cookie。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">'example.com'</span>;</span><br></pre></td></tr></table></figure></p><p>这种方法只适用于 <code>Cookie</code> 和 <code>iframe</code> 窗口，<code>LocalStorage</code> 和 <code>IndexDB</code> 无法通过这种方法，规避同源政策。</p><p>服务器也可以在设置Cookie的时候，指定Cookie的所属域名为一级域名，比如<code>.example.com</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>-Cookie: key=value; domain=.example.com; path=<span class="regexp">/</span></span><br></pre></td></tr></table></figure></p><p>这样的话，二级域名和三级域名不用做任何设置，都可以读取这个Cookie</p><h3 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h3><p><strong>PostMessage</strong>是HTML5为了解决<strong>文档通信</strong>而引入了<strong>跨文档通信</strong> API（Cross-document messaging）这个API为window对象新增了一个<strong>window.postMessage</strong>方法，允许<strong>跨窗口通信</strong>，不论这两个窗口是否<strong>同源</strong>。</p><blockquote><p>它可用于解决以下方面的问题：</p></blockquote><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin, [transfer]);</span><br></pre></td></tr></table></figure><ul><li><p><strong>otherWindow</strong>:<strong>其他窗口</strong>的一个引用，比如<strong>iframe</strong>的<strong>contentWindow</strong>属性、执行<strong>window.open</strong>返回的窗口对象、或者是命名过或数值索引的<strong>window.frames</strong>。</p></li><li><p><strong>message</strong>:html5规范支持任意基本类型或可复制的对象，<code>但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化</code>。</p></li><li><p><strong>targetOrigin</strong>:接收消息的窗口的源（<strong>origin</strong>），即”<code>协议 + 域名 + 端口</code>“。也可以设为<code>*</code>，表示不限制域名，向所有窗口发送，<code>URL</code>会被忽略，所以可以不写，这个参数是为了安全考虑</p></li><li><p><strong>transfer[可选]</strong>：是一串和<strong>message</strong>同时传递的 <strong>Transferable</strong> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权</p></li></ul><p>子窗口向父窗口发送消息的写法类似。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener.postMessage(<span class="string">'Nice to see you'</span>, <span class="string">'http://aaa.com'</span>);</span><br></pre></td></tr></table></figure></p><p>父窗口和子窗口都可以通过<strong>message</strong>事件，监听对方的消息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p><strong>message</strong>事件的事件对象<strong>event</strong>，提供以下三个属性</p><ul><li><strong>event.source</strong>：发送消息的窗口,子窗口可以通过它引用父窗口，然后发送消息</li><li><strong>event.origin</strong>: 消息发向的网址,可以过滤不是发给本窗口的消息</li><li><strong>event.data</strong>: 消息内容</li></ul><h4 id="读写其他窗口-gt-window-open"><a href="#读写其他窗口-gt-window-open" class="headerlink" title="读写其他窗口-&gt;window.open"></a>读写其他窗口-&gt;<a href="https://www.cnblogs.com/milo-xie/p/6569017.html" target="_blank" rel="noopener">window.open</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.html</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> popup = <span class="built_in">window</span>.open(<span class="string">'http://localhost:3001/b.html'</span>);</span><br><span class="line"></span><br><span class="line">        popup.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">//必须要有onload</span></span><br><span class="line">            <span class="comment">// 假设当前页面没有改变location，这条语句会成功添加message到发送队列中去（targetOrigin设置对了）</span></span><br><span class="line">            popup.postMessage(<span class="string">"hello there!"</span>, <span class="string">"http://localhost:3001"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.origin !== <span class="string">"http://localhost:3000"</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(event.data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessage, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.html</span></span><br><span class="line">    <span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.readyState)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">'complete'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'message'</span>)</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMessage, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'in-&gt;message'</span>)</span><br><span class="line">        <span class="keyword">if</span> (event.origin !== <span class="string">"http://localhost:3000"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'message'</span>, event.data);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'origin'</span>, event.source);</span><br><span class="line">        <span class="built_in">document</span>.write(event.data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假设你已经验证了所受到信息的origin (任何时候你都应该这样做), 一个很方便的方式就是把enent.source</span></span><br><span class="line">        <span class="comment">// 作为回信的对象，并且把event.origin作为targetOrigin</span></span><br><span class="line">        event.source.postMessage(<span class="string">"hi there yourself!  the secret response "</span> + <span class="string">"is: rheeeeet!"</span>, event.origin);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="读写其他窗口-gt-iframe"><a href="#读写其他窗口-gt-iframe" class="headerlink" title="读写其他窗口-&gt;iframe"></a>读写其他窗口-&gt;iframe</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/b.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"frame"</span> <span class="attr">onload</span>=<span class="string">"load()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> frame=<span class="built_in">document</span>.getElementById(<span class="string">"frame"</span>)</span></span><br><span class="line"><span class="javascript">            frame.contentWindow.postMessage(<span class="string">'我爱你'</span>,<span class="string">'http://localhost:3001'</span>)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(e.data)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- b.html --&gt;</span><br><span class="line"><span class="built_in">window</span>.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e.data)</span><br><span class="line">            e.source.postMessage(<span class="string">'我不爱你'</span>,e.origin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><p>浏览器窗口有<strong>window.name</strong>属性。这个属性的最大特点是，无论是否<strong>同源</strong>，只要在<strong>同一个窗口</strong>里，前一个网页设置了这个属性，后一个网页可以<strong>读取它</strong>。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>这种方法的优点是，<strong>window.name</strong>容量很大，可以放置非常长的字符串；缺点是必须监听子窗口<strong>window.name</strong>属性的变化，影响网页性能。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ul><li>a和b是同域 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></li><li>c是独立的 <a href="http://localhost:3001" target="_blank" rel="noopener">http://localhost:3001</a></li><li>a获取c的数据</li><li>a先引用c,c把值放到window.name上把a引用的地址改到b</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/c.html"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">onload</span>=<span class="string">"load()"</span> <span class="attr">id</span>=<span class="string">"iframe"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> first=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> iframe=<span class="built_in">document</span>.getElementById(<span class="string">"iframe"</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(first)&#123;</span></span><br><span class="line"><span class="javascript">                iframe.src=<span class="string">'http://localhost:3000/b.html'</span></span></span><br><span class="line"><span class="javascript">                first=<span class="literal">false</span></span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="built_in">console</span>.log(iframe.contentWindow.name) </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- c.html --&gt;</span><br><span class="line"><span class="built_in">window</span>.name=<span class="string">'我爱你'</span></span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p><strong>片段标识符</strong>（fragment identifier）指的是，<code>URL</code>的<code>#</code>号后面的部分，比如<code>http://example.com/x.html#fragment的#fragment</code>。如果只是改变片段标识符，页面不会重新刷新</p><ul><li>a,b同源,c不同源</li><li>目的<code>a</code>想访问<code>c</code></li><li><code>a</code>给<code>c</code>穿一个<code>hash</code>值,<code>c</code>收到<code>hash</code>值后,<code>c</code>把<code>hash</code>值传递给<code>b</code>, <code>b</code>将结果放到<code>a</code>的<code>hash</code>值中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a.html --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:3001/c.html#iloveyou"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="built_in">window</span>.onhashchange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(location.hash)</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>b.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent.parent.location.hash=location.hash</span><br></pre></td></tr></table></figure></p><p>c.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(location.hash)</span><br><span class="line">  <span class="keyword">let</span> iframe=<span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>)</span><br><span class="line">  iframe.src=<span class="string">'http://localhost:3000/b.html'</span>+location.hash+<span class="string">'1'</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe)</span><br></pre></td></tr></table></figure></p><h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p>WebSocket对象提供了用于创建和管理 <code>WebSocket</code> 连接，以及可以通过该连接发送和接收数据的 API。它是基于TCP的全双工通信,即服务端和客户端可以双向进行通讯，并且允许跨域通讯。基本协议有<code>ws://</code>(非加密)和<code>wss://</code>(加密)</p><p>socket.html<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:3000'</span>);</span><br><span class="line"><span class="comment">// 给服务器发消息</span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    socket.send(<span class="string">'hello server'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收服务器回复的消息</span></span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>server.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">let</span> app = express();</span><br><span class="line"><span class="keyword">let</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);<span class="comment">//npm i ws</span></span><br><span class="line"><span class="comment">// 设置服务器域为3000端口</span></span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span>:<span class="number">3000</span>&#125;);</span><br><span class="line"><span class="comment">//连接</span></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 接收客户端传来的消息</span></span><br><span class="line">    ws.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="comment">// 服务端回复消息</span></span><br><span class="line">        ws.send(<span class="string">'hello client'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p><a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.nginx.com%2Fresources%2Fwiki%2F" target="_blank" rel="noopener">Nginx (engine x)</a> 是一个高性能的<a href="https://link.juejin.im/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2FHTTP" target="_blank" rel="noopener">HTTP</a>和<a href="https://link.juejin.im/?target=https%3A%2F%2Fbaike.baidu.com%2Fitem%2F%25E5%258F%258D%25E5%2590%2591%25E4%25BB%25A3%25E7%2590%2586%2F7793488" target="_blank" rel="noopener">反向代理</a>服务器，也是一个<code>IMAP/POP3/SMTP</code>服务器。</p><p>案例：在<code>nginx</code>根目录下创建<code>json/a.json</code>，里面随便放些内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 代表输入/时默认去打开root目录下的html文件夹</span><br><span class="line">location / &#123;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"># 代表输入任意.json后去打开json文件夹</span><br><span class="line"># location 目的地 去哪里找</span><br><span class="line"># ~ 忽略大小写 .匹配所有 * 0-任意字符</span><br><span class="line">location ~.*\.json&#123;</span><br><span class="line">    root json;</span><br><span class="line">    add_header &quot;Access-Control-Allow-Origin&quot; &quot;*&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="http-proxy-middleware"><a href="#http-proxy-middleware" class="headerlink" title="http-proxy-middleware"></a>http-proxy-middleware</h3><p>NodeJS 中间件 <strong>http-proxy-middleware</strong> 实现跨域代理，原理大致与 <code>nginx</code> 相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置 <code>cookieDomainRewrite</code> 参数修改响应头中 <code>cookie</code> 中的域名，实现当前域的 <code>cookie</code> 写入，方便接口登录认证</p><ul><li><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        proxy: [&#123;</span><br><span class="line">            context: <span class="string">'/login'</span>,</span><br><span class="line">            target: <span class="string">'http://www.proxy2.com:8080'</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 当代理某些 https 服务报错时用</span></span><br><span class="line">            cookieDomainRewrite: <span class="string">'www.domain1.com'</span>  <span class="comment">// 可以为 false，表示不修改</span></span><br><span class="line">        &#125;],</span><br><span class="line">        noInfo: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">"http-proxy-middleware"</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">    <span class="string">"/"</span>,</span><br><span class="line">    proxy(&#123;</span><br><span class="line">        <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">        target: <span class="string">"http://www.proxy2.com:8080"</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改响应头信息，实现跨域并允许带 cookie</span></span><br><span class="line">        onProxyRes: <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes, req, res</span>) </span>&#123;</span><br><span class="line">            res.header(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://www.proxy1.com"</span>);</span><br><span class="line">            res.header(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改响应信息中的 cookie 域名</span></span><br><span class="line">        cookieDomainRewrite: <span class="string">"www.proxy1.com"</span> <span class="comment">// 可以为 false，表示不修改</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></li><li><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">"request"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params = qs.parse(req.url.substring(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向前台写 cookie</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">"Set-Cookie"</span>: <span class="string">"l=a123456;Path=/;Domain=www.proxy2.com;HttpOnly"</span> <span class="comment">// HttpOnly：脚本无法读取</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.write(<span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="string">"8080"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.cnblogs.com/milo-xie/p/6569017.html" target="_blank" rel="noopener">window.open之postMessage传参数</a></li><li><a href="https://juejin.im/post/5b5ff1dfe51d4519610e26ec" target="_blank" rel="noopener">跨域总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跨域总结&quot;&gt;&lt;a href=&quot;#跨域总结&quot; class=&quot;headerlink&quot; title=&quot;跨域总结&quot;&gt;&lt;/a&gt;跨域总结&lt;/h2&gt;&lt;h3 id=&quot;为什么会出现跨域问题&quot;&gt;&lt;a href=&quot;#为什么会出现跨域问题&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="跨域" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="前端" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>cypress</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/12/06/cypress/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/12/06/cypress/</id>
    <published>2018-12-06T02:56:09.000Z</published>
    <updated>2018-12-07T02:21:59.942Z</updated>
    
    <content type="html"><![CDATA[<h3 id="e2e-简介"><a href="#e2e-简介" class="headerlink" title="e2e 简介"></a>e2e 简介</h3><p>e2e 测试端对端测试的简称, e2e 即为end to end。</p><p>我不管你逻辑使用什么框架什么逻辑写的，我只想知道浏览器上我要的交互效果，ui展示效果是不是正确的，功能使用上是不是正确的，那么这就叫<strong>E2E测试</strong>。</p><h3 id="e2e的测试对于业务的收益点在哪里呢"><a href="#e2e的测试对于业务的收益点在哪里呢" class="headerlink" title="e2e的测试对于业务的收益点在哪里呢"></a>e2e的测试对于业务的收益点在哪里呢</h3><p>我觉得这个要看项目类型，如果是生命周期比较短的展示型项目，写 <strong>e2e</strong> 的意义不是特别大，但如果是<strong>长期维护迭代</strong>的大型系统，<strong>e2e</strong> 测试不仅很有必要而且是必需。</p><h3 id="目前E2E测试工具有哪些？"><a href="#目前E2E测试工具有哪些？" class="headerlink" title="目前E2E测试工具有哪些？"></a>目前E2E测试工具有哪些？</h3><p>现在有一些测试框架可供选择，<strong>CasperJS</strong>、<strong>Nightwatch</strong> 等等。<strong>CasperJS</strong>只能是无界面浏览器测试，不列入考虑。在 <strong>TestCafe</strong> 和 <strong>Cypress</strong> 中犹豫过，<strong>TestCafe</strong> 支持常见浏览器，支持 <strong>ES6/ES7</strong> 和 <strong>TS</strong>，安装也方便。</p><p>最终选择了<strong>Cypress</strong>，主要是觉得<strong>开箱即用</strong>，文档比较清晰美观，语法用起来比较舒服，最重要的一点是测试跑在 <strong>Chrome</strong> 的标签页里，和平时开发没什么区别。这种情况下其实很适合开发时模拟各种场景，比如新增一个接口，约定好了接口定义但是接口还没好，就可以利用 <strong>Cypress</strong> 来模拟请求开发了。一定程度上也可以实现 <strong>mock</strong> 的功能。同样，测试 <strong>fail</strong> 了也可以直接调试。</p><table><thead><tr><th>项目</th><th>Web</th><th>Star</th></tr></thead><tbody><tr><td><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a></td><td>Chromium (~170Mb Mac, ~282Mb Linux, ~280Mb Win)</td><td>31906</td></tr><tr><td><a href="https://github.com/segmentio/nightmare" target="_blank" rel="noopener">nightmare</a></td><td>Electron</td><td>15502</td></tr><tr><td><a href="https://github.com/nightwatchjs/nightwatch" target="_blank" rel="noopener">nightwatch</a></td><td>WebDriver</td><td>8135</td></tr><tr><td><a href="https://github.com/angular/protractor" target="_blank" rel="noopener">protractor</a></td><td>selenium</td><td>7532</td></tr><tr><td><a href="https://github.com/casperjs/casperjs" target="_blank" rel="noopener">casperjs</a></td><td>PhantomJS</td><td>7180</td></tr><tr><td><a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">cypress</a></td><td>Electron</td><td>5303</td></tr><tr><td><a href="https://github.com/assaf/zombie" target="_blank" rel="noopener">Zombie</a></td><td>不需要</td><td>4880</td></tr><tr><td><a href="https://github.com/DevExpress/testcafe" target="_blank" rel="noopener">testcafe</a></td><td>不需要</td><td>4645</td></tr><tr><td><a href="https://github.com/Codeception/CodeceptJS" target="_blank" rel="noopener">CodeceptJS</a></td><td>webdriverio</td><td>1665</td></tr></tbody></table><p>端到端测试一般都需要一个<strong>Web容器</strong>，来运行前端应用。例如Chromium, Electron, PhantomJS, WebDriver等等。</p><p>从体积角度考虑，这些<strong>Web容器体积</strong>一般都很大。</p><p>从<strong>速度</strong>的角度考虑：PhantomJS, WebDriver &lt; Electon, Chromium。</p><p>而且每个工具的侧重点也不同，建议按照需要去选择。</p><h2 id="优秀的端到端测试工具应该有哪些特点"><a href="#优秀的端到端测试工具应该有哪些特点" class="headerlink" title="优秀的端到端测试工具应该有哪些特点"></a>优秀的端到端测试工具应该有哪些特点</h2><ul><li><strong>安装简易</strong>：我希望它非常容易安装，最好可以一行命令就可以安装完毕</li><li><strong>依赖较少</strong>：我只想做个E2E测试，不想安装<strong>jdk</strong>, python之类的东西</li><li><strong>速度很快</strong>：运行测试用例的速度要快</li><li><strong>报错详细</strong>：详细的报错</li><li><strong>API完备</strong>：鼠标键盘操作接口，DOM查询接口等</li><li><strong>Debug方便</strong>：出错了可以很方便的调试，而不是去猜</li></ul><h2 id="为什么要用Cypress？"><a href="#为什么要用Cypress？" class="headerlink" title="为什么要用Cypress？"></a>为什么要用Cypress？</h2><p><strong>Cypress</strong>基本上拥有了上面的特点之外，还有以下特点</p><ul><li><strong>时光穿梭:</strong> 测试运行时，Cypress会自动截图，你可以轻易的查看每个时间的截图</li><li><strong>Debug友好:</strong> 不需要再去猜测为什么测试有失败了，Cypress提供Chrome DevTools, 所以Debug是非常方便的。</li><li><strong>实时刷新:</strong> Cypress检测测试用例改变后，会自动刷新</li><li><strong>自动等待:</strong> 不需要在使用wait类似的方法等待某个DOM出现，Cypress会自动帮你做这些</li><li><strong>Spies, stubs, and clocks:</strong> 验证和控制函数、服务器响应或计时器的行为。从单元测试中得到的相同功能正好在你的指尖上。</li><li><strong>网络流量控制:</strong> 在不涉及服务器的情况下轻松控制，存根和测试边缘案例。无论你喜欢，你都可以存储网络流量。</li><li><strong>一致的结果:</strong> 我们的架构不使用Selenium或WebDriver。向快速，一致和可靠的无剥落测试问好。</li><li><strong>截图和视频:</strong> 查看失败时自动截取的截图，或无条件运行时整个测试套件的视频。</li></ul><h2 id="Cypress"><a href="#Cypress" class="headerlink" title="Cypress"></a>Cypress</h2><p><strong>cypress</strong> 是目前 <strong>e2e</strong> 很火的一个测试组件，内部绑定了 <strong>macha</strong>、<strong>chai</strong>、<strong>chai-jquery</strong> 之类的断言,为了让代码代码<br>更有说服力，减少提交测试错误，进行<strong>e2e</strong>测试显然是非常有必要的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D cypress</span><br></pre></td></tr></table></figure><p>然后为了方便起见，咱们在<strong>package.json</strong>中写入下面脚本,配置GUI和非GUI(terminal)两种方式来运行cypress:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"e2e-gui"</span>: <span class="string">"cypress open"</span>,</span><br><span class="line">    <span class="attr">"e2e"</span>: <span class="string">"cypress run"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置好后 先运行<code>yarn run e2e</code>或者 <code>npm run e2e[-gui]</code>(中括号意思是可选)来初始化<code>cypress</code>，<strong>生成默认配置</strong>和<strong>目录</strong>。</p><ul><li><strong>fixtures</strong> 文件夹存放自定义 json 文件，</li><li><strong>integration</strong> 文件夹编写测试，</li><li><strong>plugins</strong> 和<strong>support</strong> 是非必须使用的文件夹，需要自定义指令的时候会用到。</li></ul><p>详细目录</p><ul><li><p><strong>cypress.json</strong>(与package.json同级目录): <strong>cypress</strong>提供比较灵活的配置，可以根据自己需要定制行为，以下列一下我对一个项目的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "baseUrl": "http://localhost:8080", // 基础链接，之后在是使用 cy.visit 的时候，只需要访问具体路由例如: cy.visit('/Hello')（webpack-dev-server) </span><br><span class="line">    "integrationFolder": "src", // 自定义"src"为测试文件根目录，默认是"cypress/integration"</span><br><span class="line">    "testFiles": "**/*.cypress.spec.js", // 自定义测试文件的匹配正则，默认是"**/*.*",即所有文件</span><br><span class="line">    "videoRecording": false, // 关闭录屏功能, 如果开启录屏功能，记得将"cypress/screenshots"目录加入".gitignore",防止不小心将录屏加到git中</span><br><span class="line">    "viewportHeight": 800, // 设置测试环境的页面视图的高度</span><br><span class="line">    "viewportWidth": 1600, // 设置测试环境的页面视图的宽度</span><br><span class="line">    "pageLoadTimeout": 3000,//页面家安在超过 3000ms 即为超时。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>cypress/plugins/index.js</strong>: cypress运行环境配置，可以用来配置<strong>webpack</strong>等。以下是配置<strong>webpack</strong>别名范例。默认这里不需要配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参考官方例子地址 https://github.com/cypress-io/cypress-example-recipes/blob/master/examples/preprocessors__typescript-webpack/cypress/plugins/index.js</span></span><br><span class="line"><span class="keyword">const</span> wp = <span class="built_in">require</span>(<span class="string">"@cypress/webpack-preprocessor"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">"../.."</span>, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">on</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        webpackOptions: &#123;</span><br><span class="line">            resolve: &#123;</span><br><span class="line">                alias: &#123;</span><br><span class="line">                    <span class="string">"@"</span>: resolve(<span class="string">"src"</span>),</span><br><span class="line">                    cypress: resolve(<span class="string">"cypress"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    on(<span class="string">"file:preprocessor"</span>, wp(options));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="根据喜好选择某种风格编写测试"><a href="#根据喜好选择某种风格编写测试" class="headerlink" title="根据喜好选择某种风格编写测试"></a>根据喜好选择某种风格编写测试</h2><p><strong>Cypress</strong> 对 <strong>chai</strong>、<strong>Expect.js</strong> 风格的都支持，还拓展了一些断言，</p><h3 id="cy-visit"><a href="#cy-visit" class="headerlink" title="cy.visit"></a>cy.visit</h3><p>这是 <strong>cypress</strong> 里面一个很重要的方法，可以访问一个链接,列入 <strong>example.js</strong> 文件如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Visiting our app before each test removes any state build up from</span></span><br><span class="line">  <span class="comment">// previous tests. Visiting acts as if we closed a tab and opened a fresh one</span></span><br><span class="line">  cy.visit(<span class="string">'https://example.cypress.io/commands/querying'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里就是在前置钩子函数里面访问了<code>https://...../querying这个链接</code>。如果代码需要浏览器调试，比如用户交<br>互点击，用户输入之类的。第一步就是访问：<strong>cy.visit</strong></p><h3 id="cy-get"><a href="#cy-get" class="headerlink" title="cy.get"></a>cy.get</h3><p>还是从 <strong>example_spec.js</strong> 问中说起：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">'cy.get() - query DOM elements'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// https://on.cypress.io/get</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get DOM elements by id</span></span><br><span class="line">  cy.get(<span class="string">'#query-btn'</span>).should(<span class="string">'contain'</span>, <span class="string">'Button'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get DOM elements by class</span></span><br><span class="line">  cy.get(<span class="string">'.query-btn'</span>).should(<span class="string">'contain'</span>, <span class="string">'Button'</span>)</span><br><span class="line"></span><br><span class="line">  cy.get(<span class="string">'#querying .well&gt;button:first'</span>).should(<span class="string">'contain'</span>, <span class="string">'Button'</span>)</span><br><span class="line">  <span class="comment">//              ↲</span></span><br><span class="line">  <span class="comment">// Use CSS selectors just like jQuery</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里定义了一个测试单元，在这个里面做了啥呢？第一步获取 id 为 <strong>query-btn</strong> 这个按钮。接下来 <strong>should</strong> 操作<br>，奉上一张表自行查看:</p><p><img src="http://b.zhangyapeng.club/2245784160-5ae29bd4cc107_articlex-2018126153343.jpg" alt="2245784160-5ae29bd4cc107_articlex-2018126153343"></p><p>从官网截图的表格，详细<a href="https://docs.cypress.io/guides/references/assertions.html#Chai-jQuery" target="_blank" rel="noopener">jquery-chai</a> 文档表格</p><p>所以可以将 <code>cy.get()</code>当<code>$</code>一样来用即可，不过这里返回的不过 <code>jquery</code> 对象罢了，这里返回的事通过 <code>cypress</code> 包装过的对象可以在控制台看到这样的东西,见下图:</p><p><img src="http://b.zhangyapeng.club/cypress-$-2018126154229.jpg" alt="cypress-$-2018126154229"></p><p>是一个用于 <strong>cypress</strong> 所有方法的对象。然后可以操作他的 <strong>api</strong> 了。</p><h3 id="cy-get相似"><a href="#cy-get相似" class="headerlink" title="cy.get相似"></a>cy.get相似</h3><ul><li><strong>cy.contains</strong> 通过文本获取元素</li><li><strong>cy.closet</strong> 见 jqery</li><li><strong>cy.next/cy.nextAll</strong> 可以和 cy.contains 联合使用获取该节点的下一个节点</li><li><strong>cy.prev/cy.prevAll</strong> 同上</li><li><strong>cy.children/cy.parents/cy.parent</strong> 获取子节点/ 所有的父节点 / 父节点</li><li><strong>cy.first/cy.last</strong></li><li><strong>cy.url</strong> 获取当前页面 url</li><li><strong>cy.title</strong> 获取当前页面标题</li><li><a href="https://docs.cypress.io/api/commands/type.html#Key-Combinations" target="_blank" rel="noopener">… API</a></li></ul><h3 id="重名名"><a href="#重名名" class="headerlink" title="重名名"></a>重名名</h3><p><strong>cy.get</strong>还有一个玩法就是 <strong>cy.get(‘@app’)</strong>这种，意思说之前你已经<code>cy.get(&#39;.app&#39;).as(&#39;app&#39;)</code>,不需要再次获<br>取了，直接使用别名就好了</p><h2 id="cypress-交互逻辑"><a href="#cypress-交互逻辑" class="headerlink" title="cypress 交互逻辑"></a>cypress 交互逻辑</h2><h3 id="cy-type"><a href="#cy-type" class="headerlink" title="cy.type"></a>cy.type</h3><p>这<strong>不是</strong>一个可以直接使用的方法，要配合<strong>cy.get</strong>使用的,作用是给空间进行输入。例如:</p><ul><li><p>测试输入例如 <strong>text, textarea</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'input'</span>).type(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure></li><li><p>测试<strong>tabIndex</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"el"</span> tabIndex=<span class="string">"1"</span>&gt;</span><br><span class="line">    This is TabIndex div.</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">cy.get('.el').type('laldkadaljdkljasf') /</span><span class="regexp">/ 这个里面是随机字符串</span></span><br></pre></td></tr></table></figure></li><li><p>测试 <strong>input</strong> 为日期的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'input[type=date]'</span>).type(<span class="string">'2008-8-9'</span>)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://docs.cypress.io/api/commands/type.html#Key-Combinations" target="_blank" rel="noopener">键盘绑定</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">'input'</span>).type(<span class="string">'&#123;shift&#125;&#123;alt&#125;Q'</span>)</span><br><span class="line">cy.get(<span class="string">'input'</span>).type(<span class="string">'&#123;alt&#125;这里是按了一下alt后输入的内容'</span>)</span><br></pre></td></tr></table></figure></li><li><p>对于选择例如 <strong>radio, checkbox</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy</span><br><span class="line">  .get(<span class="string">'input[type=radio]'</span>)</span><br><span class="line">  .as(<span class="string">'radio'</span>)</span><br><span class="line">  .click()</span><br><span class="line">cy.get(<span class="string">'@radio'</span>).should(<span class="string">'be.checked'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="定时"><a href="#定时" class="headerlink" title="定时"></a>定时</h2><h3 id="cy-wait下面是等待-1s"><a href="#cy-wait下面是等待-1s" class="headerlink" title="cy.wait下面是等待 1s"></a><code>cy.wait</code>下面是等待 1s</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.wait(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="cy-clock-和-cy-tick"><a href="#cy-clock-和-cy-tick" class="headerlink" title="cy.clock 和 cy.tick"></a><code>cy.clock</code> 和 <code>cy.tick</code></h3><p>页面代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> seconds = <span class="number">0</span></span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">'#seconds-elapsed'</span>).text(++seconds + <span class="string">' seconds'</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></p><p>测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cy.clock()</span><br><span class="line">cy.visit(<span class="string">'/index.html'</span>)</span><br><span class="line">cy.tick(<span class="number">1000</span>)</span><br><span class="line">cy.get(<span class="string">'#seconds-elapsed'</span>).should(<span class="string">'have.text'</span>, <span class="string">'1 seconds'</span>)</span><br><span class="line">cy.tick(<span class="number">1000</span>)</span><br><span class="line">cy.get(<span class="string">'#seconds-elapsed'</span>).should(<span class="string">'have.text'</span>, <span class="string">'2 seconds'</span>)</span><br></pre></td></tr></table></figure></p><p>迷惑的可以参考:<a href="https://docs.cypress.io/api/commands/clock.html#Now" target="_blank" rel="noopener">地址</a></p><h2 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h2><h3 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'Hooks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// runs once before all tests in the block</span></span><br><span class="line">  &#125;)</span><br><span class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// runs once after all tests in the block</span></span><br><span class="line">  &#125;)</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// runs before each test in the block</span></span><br><span class="line">  &#125;)</span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// runs after each test in the block</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="cy-viewport"><a href="#cy-viewport" class="headerlink" title="cy.viewport()"></a>cy.viewport()</h3><p>可以方便的修改视窗，就像使用 <code>Chrome</code> 模拟不同设备窗口一样。比如设置了 <code>cy.viewport(&#39;iphone-6&#39;)</code> 就会以 <code>iphone6</code> 的大小跑测试。</p><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>类似于全局变量，在根目录下的 <code>cypress.json</code> 中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"foo"</span>: <span class="string">"bar"</span>,</span><br><span class="line">    <span class="string">"some"</span>: <span class="string">"value"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>便可以在测试文件中通过 <code>Cypress.env(&#39;foo&#39;)</code> 来访问。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>后端修改接口时，可能需要修改测试中的接口返回，否则可能会不匹配实际情况。</li><li>Cypress 对多浏览器测试支持并不友好，不能做到像 browserstack 那样测试各个浏览器兼容性。这方面可以看一下 <a href="https://zhuanlan.zhihu.com/p/27929078" target="_blank" rel="noopener">这篇文章</a>。接下来我们也可能使用阿里云移动测试来测试兼容性。</li><li>Cypress 对 <strong>fetch</strong> 的兼容不好，处理方法详见 <a href="http://link.zhihu.com/?target=https%3A//github.com/cypress-io/cypress/issues/95" target="_blank" rel="noopener">issue95</a>。</li></ul><h3 id="关于测试覆盖率"><a href="#关于测试覆盖率" class="headerlink" title="关于测试覆盖率"></a>关于测试覆盖率</h3><p>目前<strong>cypress</strong>没有内置测试覆盖率统计功能，github上有专门的issue在跟踪这个，后续应该会有。issue上也有几个临时方案，目前我倾向使用<strong>chrome</strong>自带的来查看。在<strong>GUI</strong>打开的测试的浏览器中打开<strong>devtools</strong>,切到<strong>Sources</strong>, 按下<code>cmd+shift+p</code>(<strong>windows</strong>用户按<code>ctrl+shift+p</code>)，输入<strong>coverage</strong>，选择重新刷新并统计代码执行覆盖率。<br><img src="http://b.zhangyapeng.club/代码覆盖率-201812616056.gif" alt="代码覆盖率-201812616056"></p><h2 id="网络请求mock例子"><a href="#网络请求mock例子" class="headerlink" title="网络请求mock例子"></a>网络请求<code>mock</code>例子</h2><ul><li><strong>cy.route</strong>的路径匹配是严格的，所以要注意是否需要加通配符。如 <code>cy.route(&#39;/api/search&#39;, [])不会拦截/api/search?keyword=abc</code>，只会拦截<code>/api/search</code>。</li><li><strong>cy.route</strong>的<code>method</code>要注意，默认是<strong>GET</strong>，<code>cy.route(&#39;/api/posts&#39;)</code> 和 <code>cy.route(&#39;POST&#39;, &#39;/api/posts&#39;)</code> 是不一样的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'要啥给啥'</span>, () =&gt; &#123;</span><br><span class="line">     beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        cy.server(); <span class="comment">// 一定要在 cy.route 前调用</span></span><br><span class="line">        cy</span><br><span class="line">            .fixture(<span class="string">'/posts/list.json'</span>) <span class="comment">// 我们在 cypress/fixtures 内创建mock用的数据</span></span><br><span class="line">            .as(<span class="string">'postsData'</span>); <span class="comment">// 给 mock 数据取别名，以后 cy.route 使用</span></span><br><span class="line">        cy</span><br><span class="line">            .route(<span class="string">'/api/posts'</span>, <span class="string">'@postsData'</span>)</span><br><span class="line">            .as(<span class="string">'getPostsRoute'</span>); <span class="comment">// 给请求取别名，以供 cy.wait 使用</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'进入列表页，拦截列表请求接口'</span>, () =&gt; &#123;</span><br><span class="line">        cy.wait(<span class="string">'@getPostsRoute'</span>); <span class="comment">// 等待被拦截的接口请求完成</span></span><br><span class="line"></span><br><span class="line">        cy.get(<span class="string">'.post'</span>).should(<span class="string">'have.length'</span>, <span class="number">10</span>); <span class="comment">// 要有10条数据被渲染到页面上</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际场景例子: 结合上面所有姿势，我们现在测试搜索页面的搜索、操作结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'test search page'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 几个 route 路径变量</span></span><br><span class="line">    <span class="keyword">const</span> searchRoutePath = <span class="string">'/api/items/activities?query=*'</span>;</span><br><span class="line">    <span class="keyword">const</span> deleteActivityRoutePath = <span class="string">'/api/activities/*/items/batch?num_iids[]=*'</span>;</span><br><span class="line">    <span class="keyword">const</span> undoActivityRoutePath = <span class="string">'/api/activities/*/items/undo'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">keyword</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将搜索行为和等待搜索返回封装起来</span></span><br><span class="line">        cy</span><br><span class="line">            .fixture(<span class="string">'items/activities.json'</span>)</span><br><span class="line">            <span class="comment">// 处理mock数据，只返回符合搜索结构的数据</span></span><br><span class="line">            .then(<span class="function"><span class="params">data</span> =&gt;</span> data.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.title.indexOf(keyword) !== <span class="number">-1</span>))</span><br><span class="line">            .as(<span class="string">'searchResult'</span>);</span><br><span class="line">        cy.server();</span><br><span class="line">        cy.route(searchRoutePath, <span class="string">'@searchResult'</span>).as(<span class="string">'searchRoute'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> input = cy.get(<span class="string">'input'</span>);</span><br><span class="line">        input.clear(); <span class="comment">// 清空输入框内文本</span></span><br><span class="line"></span><br><span class="line">        input.type(<span class="string">`<span class="subst">$&#123;keyword&#125;</span>&#123;enter&#125;`</span>);</span><br><span class="line"></span><br><span class="line">        cy.wait(<span class="string">'@searchRoute'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    before(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 进行所有测试前，先访问搜索页</span></span><br><span class="line">        cy.visit(<span class="string">'/activities/search'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should show no data tip when search result is empty'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> text = <span class="string">'not exist'</span>;</span><br><span class="line">        search(text);</span><br><span class="line">        cy.contains(<span class="string">`没有找到关于 <span class="subst">$&#123;text&#125;</span> 的结果`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should remove activity from list when clean successful'</span>, () =&gt; &#123;</span><br><span class="line">        search(<span class="string">'成功'</span>);</span><br><span class="line"></span><br><span class="line">        cy</span><br><span class="line">            .route(<span class="string">'delete'</span>, deleteActivityRoutePath, &#123;</span><br><span class="line">                success: <span class="number">0</span>,</span><br><span class="line">                fail: <span class="number">0</span>,</span><br><span class="line">                waiting: <span class="number">0</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">            .as(<span class="string">'deleteActivityResponse'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// within是让cy执行的context保持在'.activities-search'这个dom节点内</span></span><br><span class="line">        <span class="comment">// 默认cy的执行是以上一个cy命令结果作为context</span></span><br><span class="line">        <span class="comment">// 如 "cy.get('a'); cy.get('span')"，cy会在上一个命令找到的'a'标签中查找'span'</span></span><br><span class="line">        cy.get(<span class="string">'.activities-search'</span>).within(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> items = cy.get(<span class="string">'.result-item'</span>);</span><br><span class="line">            items.should(<span class="string">'have.length'</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">const</span> applyList = items.get(<span class="string">'.apply-list'</span>);</span><br><span class="line"></span><br><span class="line">            applyList.should(<span class="string">'not.be.visible'</span>); <span class="comment">// 每个数据项内详细内容区域是隐藏的</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> toggleBtn = items.get(<span class="string">'.item-apply-count'</span>);</span><br><span class="line">            toggleBtn.click(); <span class="comment">// 点击显示详细内容区</span></span><br><span class="line">            applyList.should(<span class="string">'be.visible'</span>);</span><br><span class="line">            applyList.children().should(<span class="string">'have.length'</span>, <span class="number">1</span>); <span class="comment">// 详细内容区内数据只有1条</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> cleanBtn = cy.contains(<span class="string">'退出'</span>);</span><br><span class="line">            cleanBtn.click(); <span class="comment">// 点击详细内容区里的“退出”按钮</span></span><br><span class="line"></span><br><span class="line">            cy.wait(<span class="string">'@deleteActivityResponse'</span>); <span class="comment">// 等待“退出”请求返回</span></span><br><span class="line">            cy.get(<span class="string">'.apply-list'</span>).should(<span class="string">'be'</span>, <span class="literal">null</span>); <span class="comment">// 退出成功后，详细内容区数据减1，即空</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="cy-request-请求数据，类似ajax"><a href="#cy-request-请求数据，类似ajax" class="headerlink" title="cy.request 请求数据，类似ajax"></a>cy.request 请求数据，类似ajax</h3><ul><li><a href="https://docs.cypress.io/guides/guides/network-requests.html#Testing-Strategies" target="_blank" rel="noopener">network-requests</a></li><li><a href="https://docs.cypress.io/guides/references/assertions.html#Chai" target="_blank" rel="noopener">assertions</a> </li><li><a href="https://docs.cypress.io/examples/examples/recipes.html#Node-Modules" target="_blank" rel="noopener">recipes</a></li><li><a href="https://docs.cypress.io/guides/tooling/intelligent-code-completion.html" target="_blank" rel="noopener">code completion</a> </li></ul><h2 id="总结Cypress写测试的基本思路"><a href="#总结Cypress写测试的基本思路" class="headerlink" title="总结Cypress写测试的基本思路"></a>总结<code>Cypress</code>写测试的基本思路</h2><ul><li>确定是否需要拦截请求，用 <strong>cy.route</strong> 修改请求，按照设计好的测试用例设定 <strong>response</strong>。</li><li>用 <strong>cy.visit</strong> 访问需要测试的页面。</li><li>根据实际情况，一般校验元素可见性、是否是禁用状态、数量、文案是否正确等等。</li><li>运行测试，在控制面板查看测试结果。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://segmentfault.com/a/1190000014665493?utm_source=index-hottest" target="_blank" rel="noopener">前端E2E测试框架 cypress了解一下</a></li><li><a href="https://segmentfault.com/a/1190000014486404" target="_blank" rel="noopener">撩测试MM神器cypress使用入门</a></li><li><a href="https://wdd.js.org/e2e-testing-hacker-news-with-cypress.html" target="_blank" rel="noopener">端到端测试哪家强？不容错过的Cypress</a></li><li><a href="https://segmentfault.com/a/1190000014630097" target="_blank" rel="noopener">cypress进行e2e测试之理论</a></li><li><a href="https://zhuanlan.zhihu.com/p/32666685" target="_blank" rel="noopener">E2E 测试之 Cypress</a></li><li><a href="https://docs.cypress.io/guides/guides/command-line.html" target="_blank" rel="noopener">cypress 官网</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;e2e-简介&quot;&gt;&lt;a href=&quot;#e2e-简介&quot; class=&quot;headerlink&quot; title=&quot;e2e 简介&quot;&gt;&lt;/a&gt;e2e 简介&lt;/h3&gt;&lt;p&gt;e2e 测试端对端测试的简称, e2e 即为end to end。&lt;/p&gt;
&lt;p&gt;我不管你逻辑使用什么框架什
      
    
    </summary>
    
    
      <category term="test" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/test/"/>
    
      <category term="e2e" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/e2e/"/>
    
      <category term="cypress" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/cypress/"/>
    
  </entry>
  
  <entry>
    <title>enzyme</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/12/04/enzyme/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/12/04/enzyme/</id>
    <published>2018-12-04T10:13:24.000Z</published>
    <updated>2018-12-05T07:12:00.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react的单元测试之Enzyme"><a href="#react的单元测试之Enzyme" class="headerlink" title="react的单元测试之Enzyme"></a>react的单元测试之Enzyme</h2><p>React官方已经提供了一个测试工具库：<a href="https://reactjs.org/docs/test-utils.html" target="_blank" rel="noopener">react-dom/test-utils</a><br>只是用起来不够方便，于是有了一些第三方的封装库，比如Airbnb公司的<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">Enzyme</a></p><h2 id="测试项目的配置"><a href="#测试项目的配置" class="headerlink" title="测试项目的配置"></a>测试项目的配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev enzyme</span><br></pre></td></tr></table></figure><p>而enzyme还需要根据React的版本安装适配器，适配器对应表如下：<br>|Enzyme Adapter Package|    React semver compatibility|<br>|—-|—-|<br>|enzyme-adapter-react-16|    ^16.0.0|<br>|enzyme-adapter-react-15|    ^15.5.0|<br>|enzyme-adapter-react-15.4|    15.0.0-0 - 15.4.x|<br>|enzyme-adapter-react-14    |^0.14.0|<br>|enzyme-adapter-react-13    |^0.13.0|</p><p>那么因为我们安装的React版本为^16.2.0<br>所以需要安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev enzyme-adapter-react-16</span><br></pre></td></tr></table></figure></p><h2 id="Enzyme与Jest配合使用"><a href="#Enzyme与Jest配合使用" class="headerlink" title="Enzyme与Jest配合使用"></a>Enzyme与Jest配合使用</h2><p>现在开始用Enzyme为<strong>example.jsx</strong>编写测试代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;assert&#125; <span class="keyword">from</span> <span class="string">'chai'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> Enzyme <span class="keyword">from</span> <span class="string">'enzyme'</span></span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span></span><br><span class="line"><span class="keyword">import</span> Example <span class="keyword">from</span> <span class="string">'../src/example'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;shallow&#125;=Enzyme</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Enzyme的浅渲染测试套件'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'Example组件中按钮的名字为text的值'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> name=<span class="string">'按钮名'</span></span><br><span class="line">    <span class="keyword">let</span> app = shallow(<span class="xml"><span class="tag">&lt;<span class="name">Example</span> <span class="attr">text</span>=<span class="string">&#123;name&#125;</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml">    assert.equal(app.find('button').text(),name)</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure></p><p>如上面代码所示，在使用Enzyme 前需要先适配React对应的版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;)</span><br></pre></td></tr></table></figure></p><p>要使用Jest运行安装文件以 适配<a href="http://airbnb.io/enzyme/docs/installation/" target="_blank" rel="noopener">Enzyme Adapte</a>，请在配置文件中将<a href="http://jestjs.io/docs/en/configuration" target="_blank" rel="noopener">setupTestFrameworkScriptFile</a>设置为字符串和设置文件的路径。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"jest"</span>: &#123;</span><br><span class="line">    <span class="attr">"setupTestFrameworkScriptFile"</span>: <span class="string">"&lt;rootDir&gt;src/setupTests.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> JEST15以后你可以通过安装babel和相关的<code>babel</code>插件就可以了可以<a href="https://github.com/vjwilson/enzyme-example-jest" target="_blank" rel="noopener">参考</a></p><h2 id="Enzyme-的使用之浅渲染shallow"><a href="#Enzyme-的使用之浅渲染shallow" class="headerlink" title="Enzyme 的使用之浅渲染shallow"></a>Enzyme 的使用之浅渲染<code>shallow</code></h2><p><a href="https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md" target="_blank" rel="noopener">Shallow Rendering</a>（浅渲染）指的是，将一个组件渲染成<strong>虚拟DOM对象</strong>，但是只渲染第一层，不渲染所有<strong>子组件</strong>，所以处理速度非常快。它不需要DOM环境，因为根本没有加载进DOM。</p><p>shallow的函数输入组件，返回组件的浅渲染结果，而返回的结果可以用类似jquery的形式获取组件的信息。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;shallow&#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Enzyme Shallow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'App\'s title should be Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> app = shallow(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line">    expect(app.find(<span class="string">'h1'</span>).text()).to.equal(<span class="string">'Todos'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码中，shallow方法返回App的浅渲染，然后<strong>app.find</strong>方法找出h1元素，text方法取出该元素的文本。</p><p>关于<strong>find</strong>方法，有一个注意点，就是它只支持简单选择器，稍微复杂的一点的CSS选择器都不支持。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">component.find(<span class="string">'.my-class'</span>); <span class="comment">// by class name</span></span><br><span class="line">component.find(<span class="string">'#my-id'</span>); <span class="comment">// by id</span></span><br><span class="line">component.find(<span class="string">'td'</span>); <span class="comment">// by tag</span></span><br><span class="line">component.find(<span class="string">'div.custom-class'</span>); <span class="comment">// by compound selector</span></span><br><span class="line">component.find(TableRow); <span class="comment">// by constructor</span></span><br><span class="line">component.find(<span class="string">'TableRow'</span>); <span class="comment">// by display name</span></span><br></pre></td></tr></table></figure></p><h2 id="Enzyme-的使用之mount"><a href="#Enzyme-的使用之mount" class="headerlink" title="Enzyme 的使用之mount"></a>Enzyme 的使用之<code>mount</code></h2><p>mount方法用于将React组件加载为<strong>真实DOM节点</strong>。</p><p>然而真实DOM需要一个浏览器环境，为了解决这个问题，我们可以用到<strong>jsdom</strong>.</p><p>也就是说我们可以用jsdom模拟一个浏览器环境去加载真实的DOM节点。</p><p>首先安装<strong>jsdom</strong>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev jsdom</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mount&#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Enzyme Mount'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'Delete Todo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> app = mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line">    <span class="keyword">let</span> todoLength = app.find(<span class="string">'li'</span>).length;</span><br><span class="line">    app.find(<span class="string">'button.delete'</span>).at(<span class="number">0</span>).simulate(<span class="string">'click'</span>);</span><br><span class="line">    expect(app.find(<span class="string">'li'</span>).length).to.equal(todoLength - <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Enzyme-的使用之render"><a href="#Enzyme-的使用之render" class="headerlink" title="Enzyme 的使用之render"></a>Enzyme 的使用之<code>render</code></h2><p>而Enzyme还提供了一个不需要<code>jsdom</code>模拟环境解决子组件测试的方法：<strong>render</strong>。</p><p>意思就是说render方法将React组件渲染成静态的HTML字符串，然后分析这段HTML代码的结构，返回一个<strong>对象</strong>。它跟shallow方法非常像，主要的不同是采用了第三方HTML解析库<strong>Cheerio</strong>，它返回的是一个<strong>Cheerio实例对象</strong>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Enzyme Render'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'Todo item should not have todo-done class'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> app = render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line">    expect(app.find(<span class="string">'.todo-done'</span>).length).to.equal(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在上面代码中，你可以看到，<strong>render</strong>方法与<strong>shallow</strong>方法的API基本是一致的。 Enzyme的设计就是，让不同的底层处理引擎，都具有同样的API（比如find方法）。</p><h2 id="shallow-render和mount的效率对比"><a href="#shallow-render和mount的效率对比" class="headerlink" title="shallow ,render和mount的效率对比"></a>shallow ,render和mount的效率对比</h2><ul><li>shallow果然最快，这是肯定的，但是因为shallow的局限性，我们可能更想知道render和mount的效率。</li><li>事实证明，render的效率是mount的两倍。</li><li>mount存在的价值是什么，render就可以测试子组件，render还不需要jsdom和额外的配置。</li><li>当然是有价值的，<strong>shallow</strong>和<strong>mount</strong>因为都是dom对象的缘故，所以都是可以<strong>模拟交互</strong>的，比如<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nav = mount(<span class="xml"><span class="tag">&lt;<span class="name">Nav</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml"> nav.find('a').simulate('click')</span></span><br></pre></td></tr></table></figure></li></ul><p>而render是不能的。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>简而言之，Enzyme主要包括三个测试：</p><ul><li><p>一个是浅渲染的shallow，这个生成虚DOM对象，所以渲染最快，然而它并不能测试子组件的相关代码。</p></li><li><p>另一个是DOM渲染mount，它会生成完整的DOM节点，所以可以测试子组件。但是要依赖一个用jsdom模拟的浏览器环境。</p></li><li><p>最后一个是HTML文本渲染render，它会将react组件渲染为html文本，然后在内部通过Cheerio自动生成一个Cheerio对象。</p></li></ul><table><thead><tr><th>渲染方法</th><th>是否可以测试子组件</th><th>是否可以模拟交互</th><th>性能（测试500次）</th></tr></thead><tbody><tr><td>shallow</td><td>否</td><td>是</td><td>116ms</td></tr><tr><td>mount</td><td>是</td><td>是</td><td>421ms</td></tr><tr><td>render</td><td>是</td><td>否</td><td>984ms</td></tr></tbody></table><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>下面是Enzyme的一部分API，你可以从中了解它的大概用法。</p><ul><li>.get(index)：返回指定位置的子组件的DOM节点</li><li>.at(index)：返回指定位置的子组件</li><li>.first()：返回第一个子组件</li><li>.last()：返回最后一个子组件</li><li>.type()：返回当前组件的类型</li><li>.text()：返回当前组件的文本内容</li><li>.html()：返回当前组件的HTML代码形式</li><li>.props()：返回根组件的所有属性</li><li>.prop(key)：返回根组件的指定属性</li><li>.state([key])：返回根组件的状态</li><li>.setState(nextState)：设置根组件的状态</li><li>.setProps(nextProps)：设置根组件的属性</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/vvjiang/p/8599980.html" target="_blank" rel="noopener">react的单元测试之Enzyme</a></li><li><a href="https://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html" target="_blank" rel="noopener">React 测试入门教程</a></li><li><a href="http://www.aliued.com/?p=4095" target="_blank" rel="noopener">React应用下的单元测试</a></li><li><a href="https://www.cnblogs.com/susu8/p/9512393.html" target="_blank" rel="noopener"> jest + enzyme</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react的单元测试之Enzyme&quot;&gt;&lt;a href=&quot;#react的单元测试之Enzyme&quot; class=&quot;headerlink&quot; title=&quot;react的单元测试之Enzyme&quot;&gt;&lt;/a&gt;react的单元测试之Enzyme&lt;/h2&gt;&lt;p&gt;React官方已经提
      
    
    </summary>
    
    
      <category term="enzyme" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/enzyme/"/>
    
      <category term="jest" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/jest/"/>
    
      <category term="react" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Jest</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/12/04/Jest/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/12/04/Jest/</id>
    <published>2018-12-04T07:52:57.000Z</published>
    <updated>2018-12-05T08:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><p><a href="https://facebook.github.io/jest/docs/en/expect.html" target="_blank" rel="noopener">jest</a>是由Facebook发布的开源的、基于<a href="http://jasmine.github.io/" target="_blank" rel="noopener">Jasmine</a>的JavaScript单元测试框架，可以测试 javascipt 和 react。 集成了的Mocha和chai，jsdom，sinon等功能。</p><h3 id="为什么选择Jest？"><a href="#为什么选择Jest？" class="headerlink" title="为什么选择Jest？"></a>为什么选择Jest？</h3><ul><li><p>Jest 可以利用其特有的<a href="https://jestjs.io/docs/zh-Hans/snapshot-testing.html#content" target="_blank" rel="noopener">快照测试</a>功能，通过比对 UI 代码生成的快照文件，实现对 React 等常见框架的自动测试。此外， Jest 的测试用例是并行执行的，而且只执行发生改变的文件所对应的测试，提升了测试速度</p></li><li><p>安装配置简单，非常容易上手，几乎是<strong>零配置</strong>的，通过npm 命令安装就可以直接运行了</p></li><li><p>Jest 内置了测试覆盖率工具<a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="noopener">istanbul</a>，可以通过命令开启或者在 package.json 文件进行更详细的<a href="https://link.juejin.im/?target=http%3A%2F%2Ffacebook.github.io%2Fjest%2Fdocs%2Fzh-Hans%2Fconfiguration.html%23collectcoverage-boolean" target="_blank" rel="noopener">配置</a>。运行 istanbul 除了会再终端展示测试覆盖率情况，还会在项目下生产一个 coverage 目录，内附一个测试覆盖率的报告，让我们可以清晰看到分支的代码的测试情况。</p></li><li><p>集成了<strong>断言库</strong>，不需要再引入第三方的断言库，并且非常完美的支持React组件化测试。</p></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm i jest --save-dev </span><br><span class="line">cnpm i jest -g</span><br></pre></td></tr></table></figure><ul><li>运行命令jest后会自动运行项目下所有<code>.test.js</code>和<code>.spec.js</code>这种格式的文件。</li><li>涉及到运用ES或react的，要与babel相结合，加上<code>.babelrc</code>文件即可，老玩法了。</li><li>jest的配置默认只需要在<code>package.json</code>中配置即可，当然也可以用独立的配置文件。</li><li>我们这里直接将jest的运行范围限定在<code>test</code>文件夹下，而不是全部，所以在<code>package.json</code>中加入如下配置：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">   "testRegex": "/test/.*.test.jsx?$"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jest npm jest </span><br><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置位置"><a href="#配置位置" class="headerlink" title="配置位置"></a>配置位置</h4><ul><li>package.json</li><li>jest.config.js</li><li>命令行<h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4></li><li>testMatch glob规则,识别哪些文件中测试文件</li><li>testRegex 文件正则</li><li>testEnvironment 测试环境</li><li>rootDir 根目录</li><li>moduleFileExtensions 模块文件扩展名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//设置识别哪些文件是测试文件（glob形式），与testRegex互斥，不能同时写</span></span><br><span class="line">    testMatch: [<span class="string">'**/__tests__/**/*.js?(x)'</span>, <span class="string">'**/?(*.)(spec|test).js?(x)'</span>],</span><br><span class="line">    <span class="comment">//设置识别哪些文件是测试文件（正则形式），与testMatch互斥，不能同时写</span></span><br><span class="line">    testRegex: <span class="string">'(/__tests__).*|(\\.|/)(test|spec))\\.jsx?$'</span>,</span><br><span class="line">    <span class="comment">//测试环境，默认值是：jsdom，可修改为node</span></span><br><span class="line">    testEnvironment: <span class="string">'jsdom'</span>,</span><br><span class="line">    <span class="comment">//默认值：当前目录，一般是package.json所在的目录。</span></span><br><span class="line">    rootDir: <span class="string">''</span>,</span><br><span class="line">    <span class="comment">//测试文件的类型</span></span><br><span class="line">    moduleFileExtensions: [<span class="string">'js'</span>, <span class="string">'json'</span>, <span class="string">'jsx'</span>, <span class="string">'node'</span>],</span><br><span class="line">     <span class="comment">// 运行测试前可执行的脚本（比如注册enzyme的兼容）</span></span><br><span class="line">    setupFiles: [<span class="string">'&lt;rootDir&gt;/jest.setup.js'</span>],</span><br><span class="line">     <span class="comment">// 运行环境下的URl</span></span><br><span class="line">    testURL: <span class="string">'http://localhost/'</span>,</span><br><span class="line">    <span class="comment">//转换时需忽略的文件</span></span><br><span class="line">    testPathIgnorePatterns: [<span class="string">'&lt;rootDir&gt;/.next/'</span>, <span class="string">'&lt;rootDir&gt;/node_modules/'</span>], </span><br><span class="line">    <span class="comment">// 如果moduleNameMapper不能满足您的需求，那么可以使用Jest的transform配置选项来指定如何转换资产</span></span><br><span class="line">    transform: &#123;</span><br><span class="line">    <span class="string">'^.+\\.(js|jsx|mjs)$'</span>: <span class="string">'&lt;rootDir&gt;/node_modules/babel-jest'</span>,</span><br><span class="line">    <span class="string">'^.+\\.css$'</span>: <span class="string">'&lt;rootDir&gt;/__test__/css-transform.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否收集测试时的覆盖率信息（默认是false,同package配置的--coverage参数）</span></span><br><span class="line">  collectCoverage: <span class="literal">true</span>, </span><br><span class="line">  <span class="comment">// 哪些文件需要收集覆盖率信息</span></span><br><span class="line">  collectCoverageFrom: [<span class="string">'&lt;rootDir&gt;/src/**/*.&#123;js,jsx,mjs&#125;'</span>], </span><br><span class="line">  <span class="comment">// 输出覆盖信息文件的目录</span></span><br><span class="line">  coverageDirectory: <span class="string">'&lt;rootDir&gt;/test/coverage'</span>, </span><br><span class="line">  <span class="comment">// 统计覆盖信息时需要忽略的文件</span></span><br><span class="line">  coveragePathIgnorePatterns: [<span class="string">'/node_modules/'</span>, <span class="string">'&lt;rootDir&gt;/src/index.jsx'</span>], </span><br><span class="line">  moduleNameMapper: &#123; <span class="comment">// 需要mock处理掉的文件，比如样式文件 &#125;,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>关于<code>transfrom</code>的配置可以<a href="https://jestjs.io/docs/zh-Hans/tutorial-react#custom-transformers" target="_blank" rel="noopener">参考</a></p><h3 id="jest-setup-js"><a href="#jest-setup-js" class="headerlink" title="jest.setup.js"></a>jest.setup.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable import/no-extraneous-dependencies */</span></span><br><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span>;</span><br><span class="line"></span><br><span class="line">configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>和之前介绍的<strong>mocha</strong>和<strong>chai</strong>的功能很像，甚至可以兼容部分<strong>mocha</strong>和<strong>chai</strong>的语法。<br>可以这么写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span></span><br><span class="line"><span class="keyword">import</span> CommentItem <span class="keyword">from</span> <span class="string">'./commentItem'</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'测试评论列表项组件'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这是mocha的玩法，jest可以直接兼容</span></span><br><span class="line">  it(<span class="string">'测试评论内容小于等于200时不出现展开收起按钮'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> propsData = &#123;</span><br><span class="line">      date: <span class="string">'2018-03-04 10:10:11'</span>,</span><br><span class="line">      name: <span class="string">'匿名人'</span>,</span><br><span class="line">      content: <span class="string">'测试标题测试标题测试标题测试标题测试标题测试标题测试标题测试标题测试标题测试标题测试标题测试标题'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> item = shallow(<span class="xml"><span class="tag">&lt;<span class="name">CommentItem</span> &#123;<span class="attr">...propsData</span>&#125; /&gt;</span>)</span></span><br><span class="line"><span class="xml">    //看到这里的断言了吗，实际上和chai的expect是很像的</span></span><br><span class="line"><span class="xml">    expect(item.find('.btn-expand').length).toBe(0);</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  // 这是jest的玩法，推荐用这种</span></span><br><span class="line"><span class="xml">  test('两数相加结果为两个数字的和', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    expect(3).toBe(3);</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="jest的mock"><a href="#jest的mock" class="headerlink" title="jest的mock"></a>jest的<a href="https://facebook.github.io/jest/docs/en/mock-functions.html" target="_blank" rel="noopener">mock</a></h3><p>两种方式的<strong>Mock Function</strong>，一种是利用<strong>Jest</strong>提供的<strong>Mock Function</strong>创建，另外一种是<strong>手动创建来</strong>覆写本身的依赖实现</p><ul><li><strong>Mocks</strong>可以擦除函数的实际实现来测试代码之间的链接</li><li><strong>Mocks</strong>可以捕获对函数的调用( 以及在这些调用中传递的参数) </li><li><strong>manual_mocks</strong>用可mock依赖的模块，放置在相应mocks目录下</li><li>使用<strong>mock function</strong>可以查看函数的调用次数，以及参数</li></ul><h4 id="官网的例子-gt-测试函数-forEach-的内部实现"><a href="#官网的例子-gt-测试函数-forEach-的内部实现" class="headerlink" title="官网的例子-&gt;测试函数 forEach 的内部实现"></a>官网的例子-&gt;测试函数 <code>forEach</code> 的内部实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">items, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; items.length; index++) &#123;</span><br><span class="line">    callback(items[index]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了测试此函数，我们可以使用一个 <code>mock</code> 函数，然后检查 <code>mock</code> 函数的状态来确保回调函数如期调用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockCallback = jest.fn();</span><br><span class="line">forEach([<span class="number">0</span>, <span class="number">1</span>], mockCallback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此模拟函数被调用了两次</span></span><br><span class="line">expect(mockCallback.mock.calls.length).toBe(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次调用函数时的第一个参数是 0</span></span><br><span class="line">expect(mockCallback.mock.calls[<span class="number">0</span>][<span class="number">0</span>]).toBe(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次调用函数时的第一个参数是 1</span></span><br><span class="line">expect(mockCallback.mock.calls[<span class="number">1</span>][<span class="number">0</span>]).toBe(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>几乎所有的<strong>Mock Function</strong>都带有<code>.mock</code>的属性，它保存了此函数被调用的信息。 <code>.mock</code>属性还追踪每次调用时 <code>this</code>的值，所以也让检视<code>this</code> 的值成为可能：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMock = jest.fn();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> myMock();</span><br><span class="line"><span class="keyword">const</span> b = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> bound = myMock.bind(b);</span><br><span class="line">bound();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myMock.mock.instances);</span><br></pre></td></tr></table></figure></p><p>在测试中，需要对函数如何被调用，或者实例化做断言时，这些 mock 成员变量很有帮助意义︰<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个函数只调用一次</span></span><br><span class="line">expect(someMockFunction.mock.calls.length).toBe(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数被第一次调用时的第一个 arg 是 'first arg'</span></span><br><span class="line">expect(someMockFunction.mock.calls[<span class="number">0</span>][<span class="number">0</span>]).toBe(<span class="string">'first arg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数被第一次调用时的第二个 arg 是 'second arg'</span></span><br><span class="line">expect(someMockFunction.mock.calls[<span class="number">0</span>][<span class="number">1</span>]).toBe(<span class="string">'second arg'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数被实例化两次</span></span><br><span class="line">expect(someMockFunction.mock.instances.length).toBe(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数被第一次实例化返回的对象中，有一个 name 属性，且被设置为了 'test’ </span></span><br><span class="line">expect(someMockFunction.mock.instances[<span class="number">0</span>].name).toEqual(<span class="string">'test'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="Mock返回值"><a href="#Mock返回值" class="headerlink" title="Mock返回值"></a>Mock返回值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMock = jest.fn();</span><br><span class="line"><span class="built_in">console</span>.log(myMock());</span><br><span class="line"><span class="comment">// &gt; undefined</span></span><br><span class="line"></span><br><span class="line">myMock</span><br><span class="line">  .mockReturnValueOnce(<span class="number">10</span>)</span><br><span class="line">  .mockReturnValueOnce(<span class="string">'x'</span>)</span><br><span class="line">  .mockReturnValue(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myMock(), myMock(), myMock(), myMock());<span class="comment">//10 'x' true true</span></span><br></pre></td></tr></table></figure><h4 id="Mock内部实现"><a href="#Mock内部实现" class="headerlink" title="Mock内部实现"></a>Mock内部实现</h4><p>使用jest.fn或者mockImplementationOnce 可以完全替换需要mock的函数。<br>如下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMock=jest.fn(<span class="function"><span class="params">cb</span>=&gt;</span>cb(<span class="literal">null</span>,<span class="literal">true</span>))</span><br><span class="line">myMock(<span class="function">(<span class="params">err,val</span>)=&gt;</span><span class="built_in">console</span>.log(val)) <span class="comment">//true</span></span><br><span class="line">myMock(<span class="function">(<span class="params">err,val</span>)=&gt;</span><span class="built_in">console</span>.log(val)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>当需要mock的函数是从其他模块创建的就可以使用mockImplementation<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foo.js</span></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test.js</span></span><br><span class="line">jest.mock(<span class="string">"../foo"</span>)</span><br><span class="line"><span class="keyword">const</span> foo=<span class="built_in">require</span>(<span class="string">"../foo"</span>);</span><br><span class="line"></span><br><span class="line">foo.mockImplementation(<span class="function"><span class="params">()</span>=&gt;</span><span class="number">42</span>)</span><br><span class="line">foo();<span class="comment">//42</span></span><br></pre></td></tr></table></figure></p><h4 id="Mock名字"><a href="#Mock名字" class="headerlink" title="Mock名字"></a>Mock名字</h4><p>可以使用mockName 来给mock函数命名，如果没有命名，输出的日志默认就会打印jest.fn()，加上名字更有利于调试<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mymockFn=jest.fn()</span><br><span class="line">mymockFn.mockReturnValue(<span class="string">"default"</span>).mockName(<span class="string">"add"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="模块的mock"><a href="#模块的mock" class="headerlink" title="模块的mock"></a>模块的mock</h3><ul><li><p>使用jest.mock自动mock </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jest.mock(<span class="string">"./className"</span>)</span><br></pre></td></tr></table></figure></li><li><p>jest.mock()直接在单元测试里面mock 模块</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如我们很多产品代码里面会使用fs文件读取文件, 在单元测试中, 我们并不需要真去调用fs读取文件, 就可以考虑把fs模块mock掉, 如下代码： </span></span><br><span class="line">jest.mock(<span class="string">'fs'</span>,()=&gt;&#123;</span><br><span class="line">    readFileSync:jest.fn()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>在需要mock的模块目录临近建立目录<strong>mocks</strong> </p><ul><li><p>对于用户目录下面的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如我们需要mock目录models下面的user模块，那么我们就需要在models下面新建mocks目录（这里要区分大小写），然后新建文件user.js。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：用这种方式， 需要在单元测试文件中需添加下面的代码才能使此mock生效。 </span></span><br><span class="line">jest.mock(<span class="string">"./mockName"</span>)</span><br></pre></td></tr></table></figure></li><li><p>对于node_modules下面的模块</p></li></ul></li></ul><p>如果我们需要mock的模块是一个Node的模块（如lodash<br>），那么 mocks应该是挨着node_modules目录（除非你手动配置的 roots指向非本项目的root目录），这种就会自动mock了，也就是不需要在单元测试用例里再调用jest.mock(‘module_name’)。</p><p>如果需要mock的模块是scoped模块，那么我们创建的mock的名字需要一致，例如， mock模块名字为 @scope/project-name，那么就需要创建mocks/@scope/project-name.js。</p><p>注意：如果我们需要mock node的核心模块（如fs或者path），那么还是需要显示的调用jest.mock(‘path’) ， 因为核心的node模块默然是不被mock的。<br><img src="https://i.imgur.com/BdJxewT.png" alt="https://i.imgur.com/BdJxewT.png"></p><h3 id="mock文件和css-module的问题"><a href="#mock文件和css-module的问题" class="headerlink" title="mock文件和css module的问题"></a>mock文件和css module的问题</h3><p>如果js文件中引用了css或者本地其他文件，那么就可能测试失败。<br>为了解决这个问题，同时也为了提高测试效率，：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">    "moduleNameMapper": &#123;</span><br><span class="line">     "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "&lt;rootDir&gt;/test/config/fileMock.js",</span><br><span class="line">     "\\.(css|less)$": "identity-obj-proxy"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>而fileMock.js文件内容为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">'test-file-stub'</span>;</span><br></pre></td></tr></table></figure></p><p>然后安装identity-obj-proxy即可：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev identity-obj-proxy</span><br></pre></td></tr></table></figure></p><h3 id="jest与webpack"><a href="#jest与webpack" class="headerlink" title="jest与webpack"></a>jest与webpack</h3><p>这里不多讲了，可以<a href="http://facebook.github.io/jest/docs/en/webpack.html" target="_blank" rel="noopener">参考</a></p><h3 id="jest与别名"><a href="#jest与别名" class="headerlink" title="jest与别名"></a>jest与别名</h3><p>在webpack中经常会用到别名，而jest测试时，如果文件中引用了别名会出现找不到文件的问题。<br>毕竟jest测试时没有经过webpack处理<br>对于以下玩法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;  </span><br><span class="line">    alias: &#123;  </span><br><span class="line">        common: path.resolve(__dirname, <span class="string">'plugins/common/'</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"jest": &#123;</span><br><span class="line">    "testRegex": "./src/test/.*.test.js$",</span><br><span class="line">    "moduleNameMapper": &#123;</span><br><span class="line">      "^common(.*)$": "&lt;rootDir&gt;/plugins/common$1",</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="jest与eslint检测"><a href="#jest与eslint检测" class="headerlink" title="jest与eslint检测"></a>jest与eslint检测</h3><p>如果看了上面的代码会发现我没有引用任何类似于<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> *  <span class="keyword">from</span> <span class="string">'jest'</span></span><br></pre></td></tr></table></figure></p><p>的代码，而那个expect是没有定义的。<br>这段代码直接运行<strong>jest</strong>命令没有任何问题，但是eslint会检测出错，对于这种情况，我们可以再eslint配置文件<strong>.eslintrc</strong>中加入以下代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"env": &#123;</span><br><span class="line">    "jest": true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><h3 id="jest的断言"><a href="#jest的断言" class="headerlink" title="jest的断言"></a>jest的断言</h3><p>jest有自己的<a href="https://facebook.github.io/jest/docs/en/expect.html" target="_blank" rel="noopener">断言玩法</a>。</p><ul><li>相等断言<ul><li>toBe(value)： 比较数字、字符串</li><li>toEqual(value)： 比较对象、数组</li><li>toBeNull()</li><li>toBeUndefined()</li></ul></li><li>包含断言<ul><li>toHaveProperty(keyPath, value)： 是否有对应的属性</li><li>toContain(item)： 是否包含对应的值，括号里写上数组、字符串</li><li>toMatch(regexpOrString)： 括号里写上正则</li></ul></li><li>逻辑断言,在JavaScript中，有六个falsy值：false，0，’’，null， undefined，和NaN。其他一切都是Truthy。<ul><li>toBeTruthy()</li><li>toBeFalsy()</li><li>oBeGreaterThan(number)： 大于</li><li>toBeLessThan(number)： 小于</li></ul></li><li>not 取反<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileAndroidCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ConfigError(<span class="string">'you are using the wrong JDK'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'compiling android goes as expected'</span>, () =&gt; &#123;</span><br><span class="line">  expect(compileAndroidCode).toThrow();</span><br><span class="line">  expect(compileAndroidCode).toThrow(ConfigError);<span class="comment">//判断抛出异常</span></span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure></li></ul><h3 id="DOM测试"><a href="#DOM测试" class="headerlink" title="DOM测试"></a>DOM测试</h3><ul><li>Jest 集成了<a href="https://github.com/jsdom/jsdom" target="_blank" rel="noopener">jsdom</a></li><li>Jest能操作DOM是因为内置了JSDOM</li><li>JSDOM是在node中模拟了DOM环境</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    node.parentNode.removeChild(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">node, type, handler</span>) </span>&#123;</span><br><span class="line">    node.addEventListener(type, handler);</span><br><span class="line">&#125;</span><br><span class="line">exports.remove = remove;</span><br><span class="line">exports.on = on;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; remove, on &#125; = <span class="built_in">require</span>(<span class="string">'../src/dom'</span>);</span><br><span class="line">describe(<span class="string">'dom'</span>, () =&gt; &#123;</span><br><span class="line">    test(<span class="string">'remove'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.innerHTML = <span class="string">'&lt;div id="container"&gt;&lt;span id="hello"&gt;hello&lt;/span&gt;&lt;/div&gt;'</span>;</span><br><span class="line">        <span class="keyword">let</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">        expect(container.nodeName.toLocaleLowerCase()).toBe(<span class="string">'div'</span>);</span><br><span class="line">        <span class="keyword">let</span> hello = <span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>);</span><br><span class="line">        expect(hello.nodeName.toLocaleLowerCase()).toBe(<span class="string">'span'</span>);</span><br><span class="line">        remove(hello);</span><br><span class="line">        <span class="keyword">let</span> hello2 = <span class="built_in">document</span>.getElementById(<span class="string">'hello'</span>);</span><br><span class="line">        expect(hello2).toBeNull();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    test(<span class="string">'on'</span>, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.innerHTML = <span class="string">'&lt;div id="container"&gt;&lt;button id="clickMe"&gt;click&lt;/button&gt;&lt;/div&gt;'</span>;</span><br><span class="line">        <span class="keyword">let</span> clickMe = <span class="built_in">document</span>.getElementById(<span class="string">'clickMe'</span>);</span><br><span class="line">        on(clickMe, <span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">            clickMe.innerHTML = <span class="string">'clicked'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        clickMe.click();</span><br><span class="line">        expect(clickMe.innerHTML).toBe(<span class="string">'clicked'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="代码覆盖率"><a href="#代码覆盖率" class="headerlink" title="代码覆盖率"></a>代码覆盖率</h3><ul><li>line coverage 行覆盖率</li><li>function coverage 函数覆盖率</li><li>branch coverage 分支覆盖率</li><li>statement coverage 语句覆盖率<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx jest --coverage</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试的生命周期"><a href="#测试的生命周期" class="headerlink" title="测试的生命周期"></a>测试的生命周期</h3><p>Jest 测试提供了一些测试的生命周期 API，可以辅助我们在每个 <code>case</code> 的开始和结束做一些处理。 这样，在进行一些和数据相关的测试时，可以在测试前准备一些数据，在测试后，清理测试数据。</p><p>4 个主要的生命周期函数：</p><p>默认情况下，<strong>before</strong> 和 <strong>after</strong> 的块可以应用到<strong>文件中</strong>的每个测试。 此外可以通过 <strong>describe</strong> 块来将测试分组。 当 <strong>before </strong>和<strong>after</strong> 的块在<strong>describe</strong> 块内部时，则其只适用于该 <strong>describe</strong> 块内的测试。</p><ul><li>afterAll(fn, timeout): 当前文件中的所有测试执行完成后执行 fn, 如果 fn 是 promise，jest 会等待 timeout 毫秒，默认 5000</li><li>afterEach(fn, timeout): 每个 test 执行完后执行 fn，timeout 含义同上</li><li>beforeAll(fn, timeout): 同 afterAll，不同之处在于在所有测试开始前执行</li><li>beforeEach(fn, timeout): 同 afterEach，不同之处在于在每个测试开始前执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1 - beforeAll'</span>));</span><br><span class="line">afterAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1 - afterAll'</span>));</span><br><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1 - beforeEach'</span>));</span><br><span class="line">afterEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1 - afterEach'</span>));</span><br><span class="line">test(<span class="string">''</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'1 - test'</span>));</span><br><span class="line">describe(<span class="string">'Scoped / Nested block'</span>, () =&gt; &#123;</span><br><span class="line">  beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'2 - beforeAll'</span>));</span><br><span class="line">  afterAll(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'2 - afterAll'</span>));</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'2 - beforeEach'</span>));</span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'2 - afterEach'</span>));</span><br><span class="line">  test(<span class="string">''</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'2 - test'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 1 - beforeAll</span></span><br><span class="line"><span class="comment">// 1 - beforeEach</span></span><br><span class="line"><span class="comment">// 1 - test</span></span><br><span class="line"><span class="comment">// 1 - afterEach</span></span><br><span class="line"><span class="comment">// 2 - beforeAll</span></span><br><span class="line"><span class="comment">// 1 - beforeEach</span></span><br><span class="line"><span class="comment">// 2 - beforeEach</span></span><br><span class="line"><span class="comment">// 2 - test</span></span><br><span class="line"><span class="comment">// 2 - afterEach</span></span><br><span class="line"><span class="comment">// 1 - afterEach</span></span><br><span class="line"><span class="comment">// 2 - afterAll</span></span><br><span class="line"><span class="comment">// 1 - afterAll</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BeforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before all tests to excute !'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">BeforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before each test !'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">AfterAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after all tests to excute !'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">AfterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after each test !'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Test(<span class="string">'test lifecycle 01'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">1</span> + <span class="number">2</span>).toBe(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Test(<span class="string">'test lifecycle 03'</span>, () =&gt; &#123;</span><br><span class="line">  expect(<span class="number">2</span> + <span class="number">2</span>).toBe(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>所谓<strong>snapshot</strong>，即快照也。通常涉及UI的自动化测试，思路是把某一时刻的标准状态拍个快照，在测试回归的时候进行pixel to pixel的对比。但Jest对React组件的快照则不同，其实是把一个组件给序列化成纯文本， 纯文本的比较，这个真是简单又高效呀。对于一个React组件而言， 传入相同的props，我们是期望得到相同的输出， 这样子一来，通过构造不同的props, 我们即有了不同的测试用例。</p><p>理想状态中，组件若是无<strong>内部状态变化</strong>，测试用例覆盖率应该可以达到<strong>100%</strong>了。当然，仅仅是理想。</p><p>提高代码测试覆盖率</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Link.react.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> STATUS = &#123;</span><br><span class="line">  HOVERED: <span class="string">'hovered'</span>,</span><br><span class="line">  NORMAL: <span class="string">'normal'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._onMouseEnter = <span class="keyword">this</span>._onMouseEnter.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>._onMouseLeave = <span class="keyword">this</span>._onMouseLeave.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      class: STATUS.NORMAL,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseEnter() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">class</span>: STATUS.HOVERED&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _onMouseLeave() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">class</span>: STATUS.NORMAL&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;a</span><br><span class="line">        className=&#123;<span class="keyword">this</span>.state.class&#125;</span><br><span class="line">        href=&#123;<span class="keyword">this</span>.props.page || <span class="string">'#'</span>&#125;</span><br><span class="line">        onMouseEnter=&#123;<span class="keyword">this</span>._onMouseEnter&#125;</span><br><span class="line">        onMouseLeave=&#123;<span class="keyword">this</span>._onMouseLeave&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Link.react-test.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'../Link.react'</span>;</span><br><span class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders correctly'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> tree = renderer.create(</span><br><span class="line">    &lt;Link page=<span class="string">"http://www.facebook.com"</span>&gt;Facebook&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">  ).toJSON();</span></span><br><span class="line"><span class="regexp">  expect(tree).toMatchSnapshot();</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>第一次跑的时候，就会生成一个快照文件，在<code>__snapshots__</code>目录下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exports[<span class="string">`renders correctly 1`</span>] = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;a</span></span><br><span class="line"><span class="string">  className="normal"</span></span><br><span class="line"><span class="string">  href="http://www.facebook.com"</span></span><br><span class="line"><span class="string">  onMouseEnter=&#123;[Function]&#125;</span></span><br><span class="line"><span class="string">  onMouseLeave=&#123;[Function]&#125;</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">  Facebook</span></span><br><span class="line"><span class="string">&lt;/a&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure></p><p>在之后的<code>toMatchSnapshot()</code>调用就会与之比较，如有不同，则是用例失败，会打印出具体差异：<br><img src="https://facebook.github.io/jest/img/content/failedSnapshotTest.png" alt="https://facebook.github.io/jest/img/content/failedSnapshotTest.png"></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h4><p>gulp内部使用了<strong>node-glob</strong>模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p><h4 id="glob规则"><a href="#glob规则" class="headerlink" title="glob规则"></a>glob规则</h4><table><thead><tr><th>匹配符</th><th>说明</th></tr></thead><tbody><tr><td>星</td><td>匹配文件路径中的0个或多个字符，但不会匹配路径分隔符</td></tr><tr><td>**</td><td>匹配路径中的0个或多个目录及其子目录</td></tr><tr><td>[…]</td><td>匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个</td></tr><tr><td>!(pattern pattern pattern)</td><td>匹配任何与括号中给定的任一模式都不匹配的</td></tr><tr><td>?(pattern pattern pattern)</td><td>匹配括号中给定的任一模式0次或1次，类似于js正则中的?</td></tr><tr><td>+(pattern pattern pattern)</td><td>匹配括号中给定的任一模式至少1次，类似于js正则中的+</td></tr><tr><td>(pattern pattern pattern)</td><td>匹配括号中给定的任一模式0次或多次，类似于js正则中的 *</td></tr><tr><td>@(pattern pattern pattern)</td><td>匹配括号中给定的任一模式1次，类似于js正则中的</td></tr></tbody></table><h4 id="glob示例"><a href="#glob示例" class="headerlink" title="glob示例"></a>glob示例</h4><table><thead><tr><th>glob</th><th>匹配</th></tr></thead><tbody><tr><td>*</td><td>能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js</td></tr><tr><td>.</td><td>a.js,style.css,a.b,x.y</td></tr><tr><td>//*.js</td><td>能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js</td></tr><tr><td>**</td><td>能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件</td></tr><tr><td>a/**/z</td><td>能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z</td></tr><tr><td>a/**b/z</td><td>能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录</td></tr><tr><td>?.js</td><td>能匹配 a.js,b.js,c.js</td></tr><tr><td>a??</td><td>能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符</td></tr><tr><td>[xyz].js</td><td>只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符</td></tr><tr><td>[^xyz].js</td><td>能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js</td></tr></tbody></table><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://www.cnblogs.com/Wolfmanlq/p/8012847.html" target="_blank" rel="noopener">前端测试框架Jest系列教程</a></li><li><a href="https://www.cnblogs.com/vvjiang/p/8620847.html" target="_blank" rel="noopener">react的单元测试之jest</a></li><li><a href="https://jestjs.io/" target="_blank" rel="noopener">jest</a></li><li><a href="https://www.cnblogs.com/wang_yb/p/8886859.html" target="_blank" rel="noopener">jest 自动化测试</a></li><li><a href="https://kokokele.github.io/keleblog/#/posts/3" target="_blank" rel="noopener">前端单元测试-jest</a></li><li><a href="https://segmentfault.com/a/1190000011852541" target="_blank" rel="noopener">在VS Code中调试Jest单元测试</a></li><li><a href="https://blog.csdn.net/TMQ1225/article/details/81133855" target="_blank" rel="noopener">Jest基本使用方法以及mock技巧介绍</a></li><li><a href="http://imweb.io/topic/592aab6eff03ef1a4ef15c51" target="_blank" rel="noopener">初尝 Jest 单元测试</a></li><li><a href="https://www.gowhich.com/blog/853" target="_blank" rel="noopener">React 16 Jest快照测试</a></li><li><a href="https://blog.patw.me/archives/1310/write-frontend-unit-tests-with-jest/" target="_blank" rel="noopener">使用 JEST 進行前端單元測試</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Jest&quot;&gt;&lt;a href=&quot;#Jest&quot; class=&quot;headerlink&quot; title=&quot;Jest&quot;&gt;&lt;/a&gt;Jest&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/jest/docs/en/expect.html&quot; 
      
    
    </summary>
    
    
      <category term="单元测试" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="test" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Mocha与chai</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/12/03/Mocha%E4%B8%8Echai/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/12/03/Mocha与chai/</id>
    <published>2018-12-03T07:33:41.000Z</published>
    <updated>2018-12-04T07:50:45.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mocha-的简介"><a href="#Mocha-的简介" class="headerlink" title="Mocha 的简介"></a>Mocha 的简介</h2><p>Mocha是流行的JavaScript测试框架之一，通过它添加和运行测试，从而保证代码质量</p><h3 id="Mocha-的安装与配置"><a href="#Mocha-的安装与配置" class="headerlink" title="Mocha 的安装与配置"></a>Mocha 的安装与配置</h3><p>项目中也安装Mocha<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev mocha</span><br></pre></td></tr></table></figure></p><p>在<strong>package.json</strong>中加入下面脚本<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "mocha"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试模块"><a href="#测试模块" class="headerlink" title="测试模块"></a>测试模块</h3><ul><li>测试脚本里面应该包括一个或多个<strong>describe</strong>块，每个<strong>describe</strong>块应该包括一个或多个<strong>it</strong>块。</li><li><strong>describe</strong>块称为”测试套件”（test suite），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（”加法函数的测试”），第二个参数是一个实际执行的函数。</li><li><strong>it</strong>块称为”测试用例”（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数是测试用例的名称（”1 加 1 应该等于 2”），第二个参数是一个实际执行的函数。</li></ul><h3 id="chai"><a href="#chai" class="headerlink" title="chai"></a>chai</h3><ul><li>Mocha本身不带断言库，所以必须先引入断言库。mocha经常和chai这个<strong>断言库</strong>一起配合使用</li><li>chai支持expect语法和should语法的BDD接近自然语言的写法和常规的asset语法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;expect&#125; = <span class="built_in">require</span>(<span class="string">'chai'</span>);</span><br><span class="line">expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.be.equal(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ul><p><a href="http:/chaijs.com" target="_blank" rel="noopener">相关api参考</a></p><h3 id="mocha-参数"><a href="#mocha-参数" class="headerlink" title="mocha 参数"></a>mocha 参数</h3><ul><li><p>Mocha默认运行<strong>test</strong>子目录里面的测试脚本(后缀名为<code>.test.js</code>（表示测试）或者<code>.spec.js</code>)。所以，一般都会把测试脚本放在<strong>test</strong>目录里面,但是test子目录下面的测试脚本不执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha --recursive</span><br></pre></td></tr></table></figure></li><li><p><code>--help</code>或<code>-h</code>参数，用来查看Mocha的所有命令行参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></li><li><p><code>--reporter</code>参数用来指定测试报告的格式，默认是<strong>spec</strong>格式。使用<a href="http://adamgruber.github.io/mochawesome/" target="_blank" rel="noopener">mochawesome</a>模块，可以生成漂亮的HTML格式的报告</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha --reporter mochawesome</span><br></pre></td></tr></table></figure></li><li><p><code>--watch</code>参数用来监视指定的测试脚本。只要测试脚本有变化，就会自动运行Mocha</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha --watch</span><br></pre></td></tr></table></figure></li><li><p>Mocha允许在test目录下面，放置配置文件<strong>mocha.opts</strong>,把命令行参数写在里面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--reporter tap</span><br><span class="line">--recursive</span><br><span class="line">--growl</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/mochajs/mocha/wiki/compilers-deprecation" target="_blank" rel="noopener">–require</a>参数指定测试脚本的转码器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha --require @babel/register</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>，Babel默认不会对Iterator、Generator、Promise、Map、Set等全局对象，以及一些全局对象的方法（比如Object.assign）转码。如果你想要对这些对象转码，就要安装babel-polyfill。<br>然后，在你的脚本头部加上一行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure></p><ul><li><p>Mocha默认会高亮显示超过75毫秒的测试用例，可以用-s或–slow调整这个参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mocha -t 5000 -s 1000 timeout.test.js</span><br></pre></td></tr></table></figure></li><li><p>Mocha默认每个测试用例最多执行2000毫秒，如果到时没有得到结果，就报错.需要用-t或–timeout参数，改变默认的超时设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mocha -t 5000 timeout.test.js</span><br></pre></td></tr></table></figure></li></ul><h3 id="测试用例的钩子"><a href="#测试用例的钩子" class="headerlink" title="测试用例的钩子"></a>测试用例的钩子</h3><p>Mocha在describe块之中，提供测试用例的四个钩子：<code>before()</code>、<code>after()</code>、<code>beforeEach()</code>和<code>afterEach()</code>。它们会在指定时间执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'hooks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">单元测试框架mocha</a></li><li><a href="https://www.chaijs.com/" target="_blank" rel="noopener">断言库chai</a></li><li><a href="https://npmjs.com/package/supertest" target="_blank" rel="noopener">代理HTTP请求supertest</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mocha-的简介&quot;&gt;&lt;a href=&quot;#Mocha-的简介&quot; class=&quot;headerlink&quot; title=&quot;Mocha 的简介&quot;&gt;&lt;/a&gt;Mocha 的简介&lt;/h2&gt;&lt;p&gt;Mocha是流行的JavaScript测试框架之一，通过它添加和运行测试，从而保证代
      
    
    </summary>
    
    
      <category term="单元测试" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>test-1</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/12/03/test-1/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/12/03/test-1/</id>
    <published>2018-12-03T06:38:34.000Z</published>
    <updated>2018-12-04T07:57:36.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><strong>单元测试</strong>是用来对一个<code>模块</code>、一个<code>函数</code>或者一个<code>类</code>来进行正确性检验的测试工作</li><li><strong>端到端测试(e2e)</strong>是组件之间的配合(功能测试) -（整体,完整，所有功能的测试）</li></ul><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例:"></a>测试用例:</h2><ul><li>输入-&gt; 期待输出的过程</li></ul><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><h3 id="手工测试"><a href="#手工测试" class="headerlink" title="手工测试"></a>手工测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qs.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> arr = str.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> [key, val] = item.split(<span class="string">'='</span>);</span><br><span class="line">        obj[key] = val;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line">exports.parse=parse</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//qs.test.js</span></span><br><span class="line"><span class="built_in">console</span>.log(parse(<span class="string">'name=zyp'</span>).name===<span class="string">'zyp'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(parse(<span class="string">'name=zyp&amp;age=9'</span>).name===<span class="string">'zyp'</span>)</span><br></pre></td></tr></table></figure><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>污染</strong>源代码里混杂了很多测试代码</li><li><strong>零散</strong>杂乱无章，不能分组和分类    </li><li>没有<strong>持久化</strong>,没有存储</li><li><strong>手动</strong>跑测试比较麻烦</li></ul><h3 id="assert断言"><a href="#assert断言" class="headerlink" title="assert断言"></a>assert断言</h3><ul><li><strong>断言</strong>是表达设计人员对于系统应达到状态的一种<strong>预期</strong></li><li>各种语言都内置了<strong>断言</strong>的接口</li><li><strong>断言</strong>是单元测试的核心</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const assert=require("assert")</span></span><br><span class="line"><span class="keyword">const</span> assert=<span class="function">(<span class="params">expression,message</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!expression)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">assert(parse(<span class="string">'name=zyp'</span>).name===<span class="string">'zyp'</span>,<span class="string">'姓名必须是zyp'</span>)</span><br><span class="line">assert(parse(<span class="string">'name=zyp&amp;age=9'</span>).age===<span class="number">9</span>,<span class="string">'年龄必须是9'</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>问题</th><th>解决方案</th></tr></thead><tbody><tr><td>污染 源代码里混杂了很多测试代码</td><td>从源代码中抽离出去</td></tr><tr><td>零散 杂乱无章，不能分组和分类</td><td>整体规划 和设计</td></tr><tr><td>没有持久化 没有存储</td><td>把测试文件单独存放</td></tr><tr><td>手动跑测试比较麻烦</td><td>自动运行并显示结果</td></tr></tbody></table><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><p>正因为这些问题，测试框架应运而生</p><ul><li>通过测试框架，我们可以<strong>分离测试代码</strong>和<strong>源代码</strong></li><li>测试框架可以<strong>自动</strong>运行所有的用例并输出结果</li><li>测试框架可能提高编写测试代码的<strong>效率</strong></li></ul><h3 id="开发模式"><a href="#开发模式" class="headerlink" title="开发模式"></a>开发模式</h3><h4 id="瀑布模式"><a href="#瀑布模式" class="headerlink" title="瀑布模式"></a>瀑布模式</h4><ul><li>分析需求</li><li>调试开发</li><li>测试发布<h4 id="TDD-测试驱动开发"><a href="#TDD-测试驱动开发" class="headerlink" title="TDD(测试驱动开发)"></a>TDD(测试驱动开发)</h4></li><li>在TDD理念中，先有测试代码再有功能逻辑代码</li><li>包括测试用例和断言</li><li>分为模块测试和单元测试</li><li>有其使用场景，不能滥用 (当用户需求<strong>模糊</strong>的时候不能用)</li><li>在实际开发中一般会使用测试框架</li></ul><p>大概的流程是先针对每个功能点抽象出接口代码，然后编写<strong>单元测试代码</strong>，接下来<strong>实现接口</strong>，运行<strong>单元测试代码</strong>，循环此过程，直到整个<strong>单元测试都通过</strong>。</p><ul><li>分析需求</li><li>任务、模块分解</li><li>编写测试用例,尽量穷尽和考虑所有边界</li><li>快速构建代码跑通测试用例</li><li>重构代码</li><li>功能测试、发布</li></ul><h4 id="BDD-行为驱动开发"><a href="#BDD-行为驱动开发" class="headerlink" title="BDD(行为驱动开发)"></a>BDD(行为驱动开发)</h4><ul><li>在TDD中，我们并不能完全保证根据设计所编写的测试就是<strong>用户</strong>所期望的功能。</li><li>BDD将这一部分简单和自然化，用<strong>自然语言</strong>来描述，让<strong>开发</strong>、<strong>测试</strong>、<strong>BA</strong>以及<strong>客户</strong>都能在这个基础上达成一致。</li><li>它鼓励软件项目中的开发这，QA和非技术人员之间的协作。<h3 id="常用测试框架"><a href="#常用测试框架" class="headerlink" title="常用测试框架"></a>常用测试框架</h3></li><li><a href="https://github.com/qunitjs/qunit" target="_blank" rel="noopener">qunit</a> jQuery</li><li><a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a> 支持Node&amp;Browser express.js</li><li><a href="https://github.com/jasmine/jasmine" target="_blank" rel="noopener">jasmine</a> 支持Node&amp;Browser Vue.js</li><li><a href="https://github.com/karma-runner/karma" target="_blank" rel="noopener">karma</a> A Test-Runner 在不同的浏览器中跑测试用例 Angular</li><li><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">jest</a> React<ul><li>零配置</li><li>内置代码覆盖率</li><li>内置Mocks</li></ul></li></ul><p><a href="https://juejin.im/entry/58627476b123db0065c689d3" target="_blank" rel="noopener">TDD与BDD</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单元测试&lt;/strong&gt;是用来对一个&lt;code&gt;模块&lt;/code&gt;、一个&lt;code&gt;函数&lt;/code&gt;或者一个
      
    
    </summary>
    
    
      <category term="单元测试" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="测试" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vue-MVVM实现</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/20/vue-MVVM%E5%AE%9E%E7%8E%B0/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/20/vue-MVVM实现/</id>
    <published>2018-09-20T05:53:33.000Z</published>
    <updated>2018-09-21T07:45:54.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MVVM概括"><a href="#MVVM概括" class="headerlink" title="MVVM概括"></a>MVVM概括</h3><ul><li><strong>MVVM</strong>双向数据绑定,<strong>MVVM</strong>的数据影响视图,视图影响数据</li><li><strong>angular</strong> 脏值检测,而<strong>vue</strong>却是<strong>数据劫持</strong>+<strong>发布订阅模式</strong></li><li>由于<strong>vue</strong>是通过<strong>Object.difineProperty</strong>实现的,所以不见同低版本</li></ul><h3 id="Object-difineProperty-属性描述对象"><a href="#Object-difineProperty-属性描述对象" class="headerlink" title="Object.difineProperty(属性描述对象)"></a>Object.difineProperty(属性描述对象)</h3><ul><li><p>通过<code>var obj={p:&#39;a&#39;}</code>,创建对象,默认情况如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">p</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">'p'</span>)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     configurable:true, //属性是否可删除</span></span><br><span class="line"><span class="comment">//     enumerable:true, //属性是否可枚举</span></span><br><span class="line"><span class="comment">//     value:"a",//值</span></span><br><span class="line"><span class="comment">//     writable:true//属性是否可写</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>Object.defineProperty(obj,&quot;p&quot;,{})</code>,默认情况如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"p"</span>,&#123;&#125;)</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj,<span class="string">"p"</span>)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     value: undefined,</span></span><br><span class="line"><span class="comment">//     writable: false,</span></span><br><span class="line"><span class="comment">//     enumerable: false, </span></span><br><span class="line"><span class="comment">//     configurable: false</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>当<code>set</code>,<code>get</code>添加时,<code>value</code>和<code>writable</code>不能共存，会报错</p></li><li><p>Object.defineProperty的一个bug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">a</span>:<span class="number">1</span> &#125; </span><br><span class="line"><span class="comment">// 注:里面的this指向ogj(person) </span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'a'</span>,&#123; </span><br><span class="line">    get()&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a </span><br><span class="line">        &#125;, </span><br><span class="line">    set(val)&#123; </span><br><span class="line">        <span class="keyword">this</span>.a = val</span><br><span class="line">         &#125; </span><br><span class="line">    &#125;)</span><br><span class="line"> <span class="comment">//我们想当然的这么写. </span></span><br><span class="line"> person.a <span class="comment">//Uncaught RangeError: Maximum call stack size exceeded </span></span><br><span class="line"> <span class="comment">// 什么,溢出了?这是为什么? </span></span><br><span class="line"> <span class="comment">// 哦~原来是这么写的话会造成循环引用,狂call不止 </span></span><br><span class="line"> <span class="comment">// 我们看下流程: // person.a → get.call(person) → this.a → person.a → get.call(person) → this.a......。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据劫持-模拟vue"><a href="#数据劫持-模拟vue" class="headerlink" title="数据劫持(模拟vue)"></a>数据劫持(模拟vue)</h3><ul><li>将vue-data中的数据劫持到Object.defineProperty<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vue=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">'#app'</span>,</span><br><span class="line">    data:&#123; </span><br><span class="line">        a:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mvvm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="comment">//将所有属性挂载到$options上</span></span><br><span class="line">        <span class="keyword">this</span>.$options=options</span><br><span class="line">        <span class="comment">//将data数据挂载到this._data上</span></span><br><span class="line">        <span class="keyword">let</span> data=<span class="keyword">this</span>._data=options.data;</span><br><span class="line">        Vue.observe(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> observe(data)&#123;</span><br><span class="line">        <span class="comment">//数据劫持函数 工厂模式</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> data !== <span class="string">'object'</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observe(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data)&#123;</span><br><span class="line">        <span class="comment">//循环遍历data，将每一个属性都挂载到Object.defineProperty上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="keyword">let</span> val=data[key]</span><br><span class="line">            Vue.observe(val)</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(data,key,&#123;</span><br><span class="line">                enumerable:<span class="literal">true</span>,</span><br><span class="line">                configurable:<span class="literal">true</span>,</span><br><span class="line">                get()&#123;</span><br><span class="line">                    <span class="keyword">return</span> val;</span><br><span class="line">                &#125;,</span><br><span class="line">                set(newval)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(val===newval)&#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    val=newval</span><br><span class="line">                    Vue.observe(newval)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><p>我们现在可以通过<code>vue._data.a</code>来更改数据了,但是我们更需要通过<code>vue.a</code>来更改数据，所以就需要代理一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> proxy(vm,data)&#123;</span><br><span class="line">       <span class="comment">//数据代理</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> k <span class="keyword">in</span> data)&#123;</span><br><span class="line">           <span class="built_in">Object</span>.defineProperty(vm,k,&#123;</span><br><span class="line">               enumerable:<span class="literal">true</span>,</span><br><span class="line">               configurable:<span class="literal">true</span>,</span><br><span class="line">               set(newval)&#123;</span><br><span class="line">                   vm._data[k]=newval</span><br><span class="line">               &#125;,</span><br><span class="line">               get()&#123;</span><br><span class="line">                   <span class="keyword">return</span> vm._data[k]</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="模版编译"><a href="#模版编译" class="headerlink" title="模版编译"></a>模版编译</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> compile(vm)&#123;</span><br><span class="line">    <span class="keyword">let</span> el=vm.$el=<span class="built_in">document</span>.querySelector(vm.$options.el)</span><br><span class="line">     <span class="comment">//将dom操作移入内存中</span></span><br><span class="line">     <span class="keyword">let</span> Fragment =<span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line">     <span class="keyword">let</span> child=<span class="literal">null</span>;</span><br><span class="line">     <span class="keyword">while</span>(child=el.firstChild)&#123;</span><br><span class="line">         Fragment.appendChild(child)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//替换</span></span><br><span class="line">     Vue.replace(vm,Fragment)</span><br><span class="line">     <span class="comment">//插入文档中</span></span><br><span class="line">     el.appendChild(Fragment)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//模板替换</span></span><br><span class="line"> <span class="keyword">static</span> replace(vm,nodes)&#123;</span><br><span class="line">     <span class="keyword">let</span> reg=<span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line">     <span class="built_in">Array</span>.from(nodes.childNodes).forEach(<span class="function">(<span class="params">node</span>)=&gt;</span>&#123;</span><br><span class="line">         <span class="keyword">let</span> content=node.textContent</span><br><span class="line">         <span class="comment">//正则匹配并且时文本节点</span></span><br><span class="line">         <span class="keyword">let</span> res=vm;</span><br><span class="line">         <span class="keyword">if</span>(reg.test(content) &amp;&amp; node.nodeType===<span class="number">3</span>)&#123;</span><br><span class="line">             <span class="keyword">let</span> resArr=<span class="built_in">RegExp</span>.$<span class="number">1.</span>split(<span class="string">"."</span>)</span><br><span class="line">             resArr.forEach(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">                 res=res[val]</span><br><span class="line">             &#125;)</span><br><span class="line">             <span class="built_in">console</span>.log(res)</span><br><span class="line">           node.textContent=content.replace(reg,res)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(node.childNodes)&#123;</span><br><span class="line">             Vue.replace(vm,node)</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>我们已经可以通过模板编译，将数据渲染在页面上了,但是还有一个问题就是，当数据更改时，可以实时的渲染在页面上，这就需要<strong>发布订阅模式</strong>了,<br>所以先写一个发布订阅的例子</p><p><strong>发布订阅</strong>,先有订阅，然后在发布。将数据用一个<strong>数组</strong>存储起来，当发布的时候，遍历整个数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddSub</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs=[]</span><br><span class="line">    &#125;</span><br><span class="line">    on(fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    emit()&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.update())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>规定监听函数上一个<strong>update</strong>方法，便于业务处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fn=fn</span><br><span class="line">    &#125;</span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">this</span>.fn()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w=<span class="keyword">new</span> Watcher(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> add=<span class="keyword">new</span> addSub()</span><br><span class="line">add.on(w)</span><br><span class="line">add.emit()</span><br></pre></td></tr></table></figure></p><h3 id="连接视图和数据"><a href="#连接视图和数据" class="headerlink" title="连接视图和数据"></a>连接视图和数据</h3><p>我们已经了解了发布订阅模式，现在我们来<strong>连接视图</strong>和<strong>数据</strong>吧<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> replace(vm,nodes)&#123;</span><br><span class="line">        <span class="keyword">let</span> reg=<span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span></span><br><span class="line">        <span class="built_in">Array</span>.from(nodes.childNodes).forEach(<span class="function">(<span class="params">node</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> content=node.textContent</span><br><span class="line">            <span class="comment">//正则匹配并且时文本节点</span></span><br><span class="line">            <span class="keyword">let</span> res=vm;</span><br><span class="line">            <span class="keyword">if</span>(reg.test(content) &amp;&amp; node.nodeType===<span class="number">3</span>)&#123;</span><br><span class="line">                res=donum(<span class="built_in">RegExp</span>.$<span class="number">1</span>,res)</span><br><span class="line">             +   <span class="keyword">new</span> Watcher(<span class="built_in">RegExp</span>.$<span class="number">1</span>,vm,<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">             +       node.textContent=content.replace(reg,res)</span><br><span class="line">             +   &#125;)</span><br><span class="line">                node.textContent=content.replace(reg,res)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(node.childNodes)&#123;</span><br><span class="line">                Vue.replace(vm,node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行模板数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">donum</span>(<span class="params">reg,res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> resArr=reg.split(<span class="string">"."</span>)</span><br><span class="line">    resArr.forEach(<span class="function"><span class="params">val</span>=&gt;</span>&#123;</span><br><span class="line">        res=res[val]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observe</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(data)&#123;</span><br><span class="line">        <span class="comment">//循环遍历data，将每一个属性都挂载到Object.defineProperty上</span></span><br><span class="line">        <span class="keyword">let</span> addsub=<span class="keyword">new</span> AddSub()</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="keyword">let</span> val=data[key]</span><br><span class="line">            Vue.observe(val)</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(data,key,&#123;</span><br><span class="line">                enumerable:<span class="literal">true</span>,</span><br><span class="line">                configurable:<span class="literal">true</span>,</span><br><span class="line">                get()&#123;</span><br><span class="line">                  +  AddSub.target &amp;&amp; addsub.on(AddSub.target)</span><br><span class="line">                    <span class="keyword">return</span> val;</span><br><span class="line">                &#125;,</span><br><span class="line">                set(newval)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(val===newval)&#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    val=newval</span><br><span class="line">                    Vue.observe(newval)</span><br><span class="line">                   + addsub.emit()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddSub</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs=[]</span><br><span class="line">    &#125;</span><br><span class="line">    on(fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    emit()&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.update())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//规定监听函数上一个updated方法，便于业务处理</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(reg,vm,fn)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reg=reg;</span><br><span class="line">        <span class="keyword">this</span>.vm=vm</span><br><span class="line">        <span class="keyword">this</span>.fn=fn</span><br><span class="line">        AddSub.target=<span class="keyword">this</span>;</span><br><span class="line">        donum(<span class="keyword">this</span>.reg,<span class="keyword">this</span>.vm) <span class="comment">//强制执行get方法</span></span><br><span class="line">        AddSub.target=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    update() &#123;</span><br><span class="line">        <span class="keyword">let</span> res=donum(<span class="keyword">this</span>.reg,<span class="keyword">this</span>.vm)</span><br><span class="line">        <span class="keyword">this</span>.fn(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(node.nodeType===<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//数据双向绑定 属性</span></span><br><span class="line">           <span class="built_in">Array</span>.from(node.attributes).forEach(<span class="function"><span class="params">attr</span>=&gt;</span>&#123;</span><br><span class="line">               <span class="keyword">let</span> name=attr.name;<span class="comment">// type="text"</span></span><br><span class="line">               <span class="keyword">let</span> exp=attr.value; <span class="comment">//v-model="b"</span></span><br><span class="line">              </span><br><span class="line">               <span class="keyword">if</span>(name.indexOf(<span class="string">"v-"</span>)!==<span class="number">-1</span>)&#123;</span><br><span class="line">                   node.value=vm[exp]</span><br><span class="line">                   <span class="keyword">new</span> Watcher(exp,vm,<span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>)</span>&#123;</span><br><span class="line">                       node.value=newVal</span><br><span class="line">                   &#125;)</span><br><span class="line">                   </span><br><span class="line"></span><br><span class="line">                   node.addEventListener(<span class="string">"input"</span>,(e)=&gt;&#123;</span><br><span class="line">                       vm[exp]=e.target.value</span><br><span class="line">                   &#125;)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><h3 id="computed的实现"><a href="#computed的实现" class="headerlink" title="computed的实现"></a>computed的实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> computed(vm)&#123;<span class="comment">//具有缓存功能</span></span><br><span class="line">        <span class="keyword">let</span> computed=vm.$options.computed</span><br><span class="line">        <span class="built_in">Object</span>.keys(computed).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(computed[key])</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(vm,key,&#123;</span><br><span class="line">                enumerable:<span class="literal">true</span>,</span><br><span class="line">                configurable:<span class="literal">true</span>,</span><br><span class="line">                get:<span class="keyword">typeof</span> computed[key]===<span class="string">'function'</span>?computed[key]:computed[key].get,</span><br><span class="line">                set()&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">           </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://www.w3cplus.com/vue/vue-two-way-binding-object-defineproperty.html" target="_blank" rel="noopener">Vue双向绑定的实现原理Object.defineproperty</a></li><li><a href="https://www.w3cplus.com/vue/vue-two-way-binding.html" target="_blank" rel="noopener">Vue的双向绑定原理及实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MVVM概括&quot;&gt;&lt;a href=&quot;#MVVM概括&quot; class=&quot;headerlink&quot; title=&quot;MVVM概括&quot;&gt;&lt;/a&gt;MVVM概括&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MVVM&lt;/strong&gt;双向数据绑定,&lt;strong&gt;MVVM&lt;/strong
      
    
    </summary>
    
    
      <category term="vue" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/vue/"/>
    
      <category term="MVVM" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>前端设计模式</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/17/%E5%89%8D%E7%AB%AF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/17/前端设计模式/</id>
    <published>2018-09-17T06:31:57.000Z</published>
    <updated>2018-09-20T05:48:21.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li><p>类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类 即 模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象（实例）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">let</span> zhang=<span class="keyword">new</span> People(<span class="string">'zhang'</span>,<span class="number">20</span>)</span><br><span class="line">zhang.eat()</span><br><span class="line">zhang.speak()</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建实例</span></span><br><span class="line"><span class="keyword">let</span> wang=<span class="keyword">new</span> People(<span class="string">'wang'</span>,<span class="number">21</span>)</span><br><span class="line">wang.eat()</span><br><span class="line">wang.speak()</span><br></pre></td></tr></table></figure></li><li><p>继承</p><ul><li>子类继承父类</li><li>父类是公共的，不仅仅服务于单个子类</li><li>继承可以将公共方法抽离出来，提高复用，减少冗余<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        alert(<span class="string">`My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>,age<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,age,number)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age)</span><br><span class="line">        <span class="keyword">this</span>.number=number</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">let</span> xiaoming=<span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>,<span class="number">10</span>,<span class="string">'A1'</span>)</span><br><span class="line">xiaoming.eat()</span><br></pre></td></tr></table></figure><ul><li><p>封装</p><ul><li>数据的权限和保密</li><li>减少耦合，不该外露的不外露</li><li>利用数据、接口的权限管理</li><li>3个属性<ul><li>public 完全开放</li><li>protected 对子类开放</li><li>private 对自己开放</li></ul></li><li>es6不支持，一般认为_开头的属性是private，可以用typescipt 来演示<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> People&#123;</span><br><span class="line">    name</span><br><span class="line">    age</span><br><span class="line">    <span class="keyword">protected</span> weight <span class="comment">//定义 protected 属性 受保护的属性，只能自己访问和子类访问</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.age=age</span><br><span class="line">        <span class="keyword">this</span>.weight=<span class="number">120</span></span><br><span class="line">    &#125;</span><br><span class="line">    eat()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> eat something`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        alert(<span class="string">`MY name is <span class="subst">$&#123;this.name&#125;</span>,age <span class="subst">$&#123;this.age&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> Student <span class="keyword">extends</span> People&#123;</span><br><span class="line">    <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> girlfriend <span class="comment">//定义 private 属性</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name,age,<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age)</span><br><span class="line">        <span class="keyword">this</span>.number=<span class="built_in">number</span></span><br><span class="line">        <span class="keyword">this</span>.girlfriend=<span class="string">'xiaoli'</span></span><br><span class="line">    &#125;</span><br><span class="line">    study()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> study`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    getWeight()&#123;</span><br><span class="line">        alert(<span class="string">`<span class="subst">$&#123;this.weight&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">let</span> xiaoming=<span class="keyword">new</span> Student(<span class="string">'xiaoming'</span>,<span class="number">10</span>,<span class="string">'A1'</span>)</span><br><span class="line">xiaoming.getWeight()</span><br><span class="line"><span class="comment">//console.log(xiaoming.girlfriend) //注意，编译会报错，直接编译不通过</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>多态</p><ul><li>同一接口不同实现</li><li>js应用极少</li><li>需要结合java等语言的接口、重写、重载等功能</li><li>保持子类的开放性和灵活性</li><li>面向接口编程</li><li>（js引用极少，了解即可）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    saysomething()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am A'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am B'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a= <span class="keyword">new</span> A(<span class="string">'a'</span>)</span><br><span class="line">a.saySomething()</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> B(<span class="string">'b)</span></span><br><span class="line"><span class="string">b.saySomething()</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="为何使用面向对象"><a href="#为何使用面向对象" class="headerlink" title="为何使用面向对象"></a>为何使用面向对象</h3><ul><li>程序执行：顺序、判断、循环—结构化</li><li>面向对象– 结构化</li><li>对于计算机，结构化的才是最简单</li><li>编程应该 简单 &amp; 抽象</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><ul><li>Unified Modeling Language 统一建模语言</li><li>类图，UML包含很多种图，和本课相关的是类图</li><li>关系，主要讲解泛化和关联</li><li>演示 ，代码和类图结合</li></ul><h3 id="画图工具"><a href="#画图工具" class="headerlink" title="画图工具"></a>画图工具</h3><ul><li>MS Office visio</li><li><a href="https://www.processon.com" target="_blank" rel="noopener">https://www.processon.com</a><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><img src="http://b.zhangyapeng.club/类图.png" alt="类图"><br><img src="http://b.zhangyapeng.club/类图实例.png" alt="类图实例"></li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li>泛化，表示继承</li><li>关联，表示引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">        <span class="keyword">this</span>.house=house</span><br><span class="line">    &#125;</span><br><span class="line">    saysomething()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,house)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am A'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,house)</span><br><span class="line">    &#125;</span><br><span class="line">    saySomething()&#123;</span><br><span class="line">        alert(<span class="string">'I am B'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,house)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aHouse=<span class="keyword">new</span> House(<span class="string">'beijing'</span>)</span><br><span class="line"><span class="keyword">let</span> a= <span class="keyword">new</span> A(<span class="string">'a'</span>,aHouse)</span><br><span class="line">a.saySomething()</span><br><span class="line"><span class="keyword">let</span> b=<span class="keyword">new</span> B(<span class="string">'b)</span></span><br><span class="line"><span class="string">b.saySomething()</span></span><br></pre></td></tr></table></figure><p><img src="http://b.zhangyapeng.club/类图例子.png" alt="类图例子"></p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="何为设计"><a href="#何为设计" class="headerlink" title="何为设计"></a>何为设计</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><ul><li>即按照哪一种思路或者标准来实现功能</li><li>功能相同，可以有不同设计方案来实现</li><li>伴随着需求增加，设计的作用才能体现出来</li></ul><h4 id="《UNIX-LINUX设计哲学》设计准则"><a href="#《UNIX-LINUX设计哲学》设计准则" class="headerlink" title="《UNIX/LINUX设计哲学》设计准则"></a>《UNIX/LINUX设计哲学》设计准则</h4><ol><li>小即是美</li><li>让每个程序只做好一件事</li><li>快速建立原型</li><li>舍弃高效率而取可移植性</li><li>采用纯文本来存储数据</li><li>充分利用软件的杠杆效应(软件复用)</li><li>使用shell脚本来提高杠杆效应和可移植性</li><li>避免强制性的用户界面</li><li>让每个程序都称为过滤器</li><li>小准则：允许用户定制环境</li><li>小准则：尽量使用操作系统内核小而轻量化</li><li>小准则：使用小写字母并尽量简写</li><li>小准则：沉默是金</li><li>小准则：各部分之和大于整体</li><li>小准则：寻求90%的解决方案</li></ol><h4 id="演示：沉默是金-让每个程序成为过滤器"><a href="#演示：沉默是金-让每个程序成为过滤器" class="headerlink" title="演示：沉默是金+让每个程序成为过滤器"></a>演示：沉默是金+让每个程序成为过滤器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让每个程序成为过滤器</span></span><br><span class="line">ls | grep *.json | grep <span class="string">'package'</span></span><br></pre></td></tr></table></figure><h3 id="S-O-L-I-D-五大设计原则"><a href="#S-O-L-I-D-五大设计原则" class="headerlink" title="S O L I D 五大设计原则"></a>S O L I D 五大设计原则</h3><ul><li><strong>S</strong>: 单一职责原则</li><li><strong>O</strong>: 开放封闭原则</li><li><strong>L</strong>: 李氏置换原则</li><li><strong>I</strong>: 接口独立原则</li><li><strong>D</strong>: 依赖倒置原则</li></ul><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul><h4 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h4><ul><li>对<strong>扩展</strong>开放，对<strong>修改</strong>封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li><li>这是软件设计的终极目标</li></ul><h4 id="李氏置换原则"><a href="#李氏置换原则" class="headerlink" title="李氏置换原则"></a>李氏置换原则</h4><ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li><li>js使用较少（弱类型 &amp;&amp; 继承使用较少）</li></ul><h4 id="接口独立原则"><a href="#接口独立原则" class="headerlink" title="接口独立原则"></a>接口独立原则</h4><ul><li>保持接口的单一独立，避免出现“胖接口”</li><li>JS中没有接口（typescript例外）,使用较少</li><li>类似与单一职责原则，这里更关注接口</li></ul><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现</li><li>JS中使用较少(没有接口 &amp; 弱类型)</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>SO 体现较多，详细介绍</li><li>LID体现较少，但是要了解其用意</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一职责 开放封闭原则</span></span><br><span class="line"><span class="comment">// 加载图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> promise=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> img=<span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">        img.onlad=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        img.src=src</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> src=<span class="string">'http://'</span></span><br><span class="line"><span class="keyword">let</span> result=loadImg(src)</span><br><span class="line">result.then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(img.width)</span><br><span class="line">    <span class="comment">//part1 </span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//part2</span></span><br><span class="line">    <span class="built_in">console</span>.log(img.height)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ex)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="从设计到模式"><a href="#从设计到模式" class="headerlink" title="从设计到模式"></a>从设计到模式</h2><ul><li>设计和模式分开</li><li>从设计到模式</li></ul><h3 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h3><ul><li>创建型<ul><li>工厂模式(工厂方法模式、抽象工厂模式、建造者模式)</li><li>单例模式</li><li>原型模式</li></ul></li><li>结构型<ul><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul></li><li>行为型<ul><li>策略模式</li><li>模板方法模式</li><li><strong>观察者模式</strong></li><li><strong>迭代器模式</strong></li><li>职责连模式</li><li>命令模式</li><li>备忘录模式</li><li><strong>状态模式</strong></li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  打车时，可以打专车或者快车。 任何车都有车牌号和名称</span></span><br><span class="line"><span class="comment"> *  不同车价格不同，快车每公里1元，专车每公里2元</span></span><br><span class="line"><span class="comment"> *  行程开始时，显示车辆信息</span></span><br><span class="line"><span class="comment"> *  行程结束时，显示打车金额（假定行程就5公里）</span></span><br><span class="line"><span class="comment"> *  画出UML类图</span></span><br><span class="line"><span class="comment"> *  用ES6语法写出该示例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(number,name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.number=number</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(number,name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(number,name)</span><br><span class="line">        <span class="keyword">this</span>.price=<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZCar</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(number,name)&#123;</span><br><span class="line">        <span class="keyword">super</span>(number,name)</span><br><span class="line">        <span class="keyword">this</span>.price=<span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trip</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(car)&#123;</span><br><span class="line">        <span class="keyword">this</span>.car=car</span><br><span class="line">    &#125;</span><br><span class="line">    start()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.car.name,<span class="keyword">this</span>.car.number)</span><br><span class="line">    &#125;</span><br><span class="line">    end()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.car.price*<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> car=<span class="keyword">new</span> KCar(<span class="number">100</span>,<span class="string">'桑'</span>)</span><br><span class="line"><span class="keyword">let</span> trip=<span class="keyword">new</span> Trip(car)</span><br><span class="line">trip.start()</span><br><span class="line">trip.end()</span><br></pre></td></tr></table></figure><p><img src="http://b.zhangyapeng.club/前端设计模式_类图_2018918155045.png" alt="前端设计模式_类图_2018918155045"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  某停车场，分3层，每层100车位</span></span><br><span class="line"><span class="comment"> *  每个车位都能监控到车辆的驶入和离开</span></span><br><span class="line"><span class="comment"> *  车辆进入前，显示每层的空余车位数量</span></span><br><span class="line"><span class="comment"> *  车辆进入摄像头可识别车牌号和时间</span></span><br><span class="line"><span class="comment"> *  车辆出来时，出口显示器显示车牌号和停车时长</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  画出UML类图</span></span><br><span class="line"><span class="comment"> *  1. 多少个类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(num)&#123;</span><br><span class="line">        <span class="keyword">this</span>.num=num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//摄像头</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Camera</span></span>&#123;</span><br><span class="line">    shot(car)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            num:car.num,</span><br><span class="line">            inTime:<span class="built_in">Date</span>.now()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span>&#123;</span><br><span class="line">    show(car,inTime)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now()-inTime)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Park</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(floors)&#123;</span><br><span class="line">        <span class="keyword">this</span>.floors=floors || []</span><br><span class="line">        <span class="keyword">this</span>.camera=<span class="keyword">new</span> Camera()</span><br><span class="line">        <span class="keyword">this</span>.screen=<span class="keyword">new</span> Screen()</span><br><span class="line">        <span class="keyword">this</span>.carList=&#123;&#125;<span class="comment">//存储摄像头拍摄返回信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">in</span>(car)&#123;</span><br><span class="line">        <span class="comment">//通过摄像头获取信息</span></span><br><span class="line">        <span class="keyword">const</span> info=<span class="keyword">this</span>.camera.shot(car)</span><br><span class="line">        <span class="comment">//停到某个停车位</span></span><br><span class="line">        <span class="keyword">const</span> i=<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100</span>%<span class="number">100</span>)</span><br><span class="line">        <span class="keyword">const</span> place=<span class="keyword">this</span>.floors[<span class="number">0</span>].places[i]</span><br><span class="line">        place.in()</span><br><span class="line">        info.place=place</span><br><span class="line">        <span class="comment">//记录信息</span></span><br><span class="line">        <span class="keyword">this</span>.carList[car.num]=info</span><br><span class="line">    &#125;</span><br><span class="line">    out(car)&#123;</span><br><span class="line">        <span class="comment">//获取信息</span></span><br><span class="line">        <span class="keyword">const</span> info=<span class="keyword">this</span>.carList[car.num]</span><br><span class="line">        <span class="comment">//将停车为清空</span></span><br><span class="line">        <span class="keyword">const</span> place=info.place</span><br><span class="line">        place.out()</span><br><span class="line">        <span class="comment">// 显示时间</span></span><br><span class="line">        <span class="keyword">this</span>.screen.show(car,info.inTime)</span><br><span class="line">        <span class="comment">//清空记录</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.carList[car.num]</span><br><span class="line">    &#125;</span><br><span class="line">    emptyPlaceNum()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.floors.map(<span class="function">(<span class="params">floor</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;floor.index&#125;</span>层还有<span class="subst">$&#123;floor.emptyPlaceNum()&#125;</span>`</span></span><br><span class="line">        &#125;</span><br><span class="line">           ).join(<span class="string">"\n"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//层</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Floor</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(index,places)&#123;</span><br><span class="line">        <span class="keyword">this</span>.index=index</span><br><span class="line">        <span class="keyword">this</span>.places=places || []</span><br><span class="line">    &#125;</span><br><span class="line">    emptyPlaceNum()&#123;</span><br><span class="line">        <span class="keyword">let</span> num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.places.forEach(<span class="function"><span class="params">p</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.empty)&#123;</span><br><span class="line">                num=num+<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//车位</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.empty=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">in</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.empty=<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    out()&#123;</span><br><span class="line">        <span class="keyword">this</span>.empty=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化停车场</span></span><br><span class="line"><span class="keyword">const</span> floors=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> places=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++ )&#123;</span><br><span class="line">        places[j]=<span class="keyword">new</span> Place()</span><br><span class="line">    &#125;</span><br><span class="line">    floors[i]=<span class="keyword">new</span> Floor(i+<span class="number">1</span>,places)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> park=<span class="keyword">new</span> Park(floors)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化车辆</span></span><br><span class="line"><span class="keyword">const</span> car1=<span class="keyword">new</span> Car(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> car2=<span class="keyword">new</span> Car(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">const</span> car3=<span class="keyword">new</span> Car(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第一辆车进入'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(park.emptyPlaceNum())</span><br><span class="line">park.in(car1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第二俩进入'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(park.emptyPlaceNum())</span><br><span class="line">park.in(car2)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第一俩离开'</span>)</span><br><span class="line">park.out(car1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'第二俩离开'</span>)</span><br><span class="line">park.out(car2)</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><ul><li>将new操作单独封装</li><li>遇到new时，就要考虑是否该使用工厂模式</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li>你去购买汉堡，直接点餐、取餐，不会自己亲手做</li><li>商店要<strong>封装</strong>做汉堡的工作，做好直接给买者</li></ul><h4 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_工厂模式_2018919102219.png" alt="前端设计模式_工厂模式_2018919102219"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span>&#123;</span><br><span class="line">    create(name)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Product(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name</span><br><span class="line">    &#125;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"int1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fun1()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"fun1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fun2()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"fun2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> c1=<span class="keyword">new</span> Creator()</span><br><span class="line"><span class="keyword">let</span> p=c1.create(<span class="string">'p1'</span>)</span><br><span class="line">p.init()</span><br><span class="line">p.fun1()</span><br></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><ul><li>jQuery-$(“div”)<ul><li>$(“div”)和new $(“div”) 有何区别？</li><li>书写麻烦，jQuery 的链式操作将成为噩梦</li><li>一旦jQuery名字变化，将是灾难的</li></ul></li><li><p>React.createElement</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vnode</span>(<span class="title">tag</span>,<span class="title">attrs</span>,<span class="title">children</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...省略内部代码</span></span><br><span class="line">&#125;</span><br><span class="line">React.createElement=<span class="function"><span class="keyword">function</span>(<span class="params">tag,attrs,children</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 可以做验证</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vnode(tag,attrs,children)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vue异步组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"async-example"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve(&#123;</span><br><span class="line">            template:<span class="string">"&lt;div&gt;I am async!&lt;/div&gt;"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h4><ul><li>构造函数和创建者分离</li><li>符合开放封闭原则</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ul><li>系统中被唯一使用</li><li>一个类只有一个实例</li></ul><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><ul><li>登录框</li><li>购物车</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span></span>&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"login)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//实例上没有getInstance方法</span></span><br><span class="line"><span class="string">SingleObject.getInstance=(function()&#123;</span></span><br><span class="line"><span class="string">let intance;</span></span><br><span class="line"><span class="string">return function()&#123;</span></span><br><span class="line"><span class="string">    if(!intance)&#123;</span></span><br><span class="line"><span class="string">        intance=new SingleObject()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return instance</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;)()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//测试</span></span><br><span class="line"><span class="string">let obj1=SingleObject.getInstance()</span></span><br><span class="line"><span class="string">obj1.login()</span></span><br><span class="line"><span class="string">let obj2=SingleObject.getInstance()</span></span><br><span class="line"><span class="string">obj2.login()</span></span><br><span class="line"><span class="string">console.log('obj1===obj2',obj1===obj2)</span></span><br></pre></td></tr></table></figure><h4 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h4><ul><li><p>jQuery只有一个$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jQuery只有一个$</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.jQuery!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.jQuery</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟登录框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="string">'hide'</span></span><br><span class="line">    &#125;</span><br><span class="line">    show()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state===<span class="string">'show'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"已经显示"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="string">'show'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'显示'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    hide()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state===<span class="string">'hide'</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"已经显示"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="string">'hide'</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'隐藏'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LoginForm.getInstance=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!intance)&#123;</span><br><span class="line">            intance=<span class="keyword">new</span> LoginForm()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> login1=LoginForm.getInstance()</span><br><span class="line">login1.show()</span><br><span class="line"><span class="keyword">let</span> login2=LoginForm.getInstance()</span><br><span class="line">login1.hide()</span><br></pre></td></tr></table></figure></li><li><p>其他</p><ul><li>购物车(和登录框类似)</li><li>vuex和redux中的store</li></ul></li></ul><h4 id="设计原则验证"><a href="#设计原则验证" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>符合单一职责原则，只实例化唯一的对象</li><li>没发具体开放封闭原则，但是绝对不违反开放封闭原则</li></ul><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><ul><li>旧接口格式和使用者不兼容</li><li>中间加一个适配转换接口</li></ul><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_转换器_2018919143435.png" alt="前端设计模式_转换器_2018919143435"></p><h4 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_设配器UML_201891914363.png" alt="前端设计模式_设配器UML_201891914363"></p><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span></span>&#123;</span><br><span class="line">    specificRequest()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'德国标准插头'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee=<span class="keyword">new</span> Adaptee()</span><br><span class="line">    &#125;</span><br><span class="line">    requrest()&#123;</span><br><span class="line">        <span class="keyword">let</span> info=<span class="keyword">this</span>.adaptee.specificRequest()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;info&#125;</span>-转换器-中国标准插头`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> target=<span class="keyword">new</span> Target()</span><br><span class="line"><span class="keyword">let</span> res=target.request()</span><br></pre></td></tr></table></figure><h4 id="场景-2"><a href="#场景-2" class="headerlink" title="场景"></a>场景</h4><ul><li><p>封装旧接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自己封装的ajax,使用方式如下</span></span><br><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">'/getDate'</span>,</span><br><span class="line">    type:<span class="string">"post"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        id:<span class="string">"123"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//但是因为历史原因，代码中全是：</span></span><br><span class="line"><span class="comment">//$.ajax(&#123;...&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//做一层适配器</span></span><br><span class="line"><span class="keyword">var</span> $=&#123;</span><br><span class="line">    ajax:<span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ajax(options)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vue computed</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#exaple"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message:<span class="string">"hello"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">        reversedMessage()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="设计原则验证-1"><a href="#设计原则验证-1" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>将旧接口和使用者进行分离</li><li>符合开放封闭原则</li></ul><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><ul><li>为对象添加新功能</li><li>不改变其原有的结构和功能</li></ul><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_装饰器模式_201891915151.png" alt="前端设计模式_装饰器模式_201891915151"><br><strong>手机壳</strong></p><h4 id="UML类图-3"><a href="#UML类图-3" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_装饰器UML_20189191541.png" alt="前端设计模式_装饰器UML_20189191541"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cicle</span></span>&#123;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"画一个圆形"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(cicle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.cicle=cicle</span><br><span class="line">    &#125;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="keyword">this</span>.cicle.draw()</span><br><span class="line">        <span class="keyword">this</span>.setRedBorder(<span class="keyword">this</span>.cicle)</span><br><span class="line">    &#125;</span><br><span class="line">    setRedBorder(cicle)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'设着红色边框'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> cicle=<span class="keyword">new</span> Cicle()</span><br><span class="line">cicle.draw()</span><br><span class="line"><span class="keyword">let</span> dec=<span class="keyword">new</span> Decorator()</span><br><span class="line">dec.draw()</span><br></pre></td></tr></table></figure><h4 id="场景-3"><a href="#场景-3" class="headerlink" title="场景"></a>场景</h4><ul><li><p>es7装饰器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰类 </span></span><br><span class="line">@testDec</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    target.isDec=<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Demo.isDec)</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰类  加参数</span></span><br><span class="line">@testDec(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span> (<span class="params">isDec</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        target.isDec=isDec</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Demo.isDec)</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰类-mixin示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixins</span>(<span class="params">...list</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Object</span>.assign(target.prototype,...list)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Foo=&#123;</span><br><span class="line">    foo()&#123;</span><br><span class="line">        alert(<span class="string">'foo'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@mixins(Foo)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj=<span class="keyword">new</span> MyClass();</span><br><span class="line">obj.foo()<span class="comment">//'foo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.first=<span class="string">'A'</span></span><br><span class="line">        <span class="keyword">this</span>.last=<span class="string">'B'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//装饰方法</span></span><br><span class="line">    @readonly</span><br><span class="line">    name()&#123;<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.last&#125;</span>`</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p= <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(p.name())</span><br><span class="line"><span class="comment">//p.name=function()&#123;&#125; //这里会报错，因为name是只读的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//默认是</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//     value :specifiedFunction,</span></span><br><span class="line">    <span class="comment">//     enumerable:false,</span></span><br><span class="line">    <span class="comment">//     configurable:true,</span></span><br><span class="line">    <span class="comment">//     writable:true</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    descriptor.writable=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> descriptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>core-decorators</p><ul><li>第三方开源lib</li><li>提供常用的装饰器</li></ul></li></ul><h4 id="设计原则验证-2"><a href="#设计原则验证-2" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>将现有对象和装饰器进行分离，两者独立存在</li><li>符合开放封闭原则</li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><ul><li>使用者无权访问目标对象</li><li>中间加代理，通过代理做授权和控制</li></ul><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><ul><li>科学上网</li><li>明星经纪人</li></ul><h4 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_代理模式UML_2018919161620.png" alt="前端设计模式_代理模式UML_2018919161620"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadImg</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fileName)&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileName=fileName</span><br><span class="line">        <span class="keyword">this</span>.loadFromDisk()<span class="comment">//初始化即从硬盘加载，模拟</span></span><br><span class="line">    &#125;</span><br><span class="line">    display()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"display"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    loadFromDisk()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'loading'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImg</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(filename)&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg=<span class="keyword">new</span> ReadImg(filename)</span><br><span class="line">    &#125;</span><br><span class="line">    display()&#123;</span><br><span class="line">        <span class="keyword">this</span>.realImg.display()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> proxyImg=<span class="keyword">new</span> ProxyImg(<span class="string">'1.png'</span>)</span><br><span class="line">proxyImg.display</span><br></pre></td></tr></table></figure><h3 id="场景-4"><a href="#场景-4" class="headerlink" title="场景"></a>场景</h3><ul><li><p>网页事件代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>)</span><br><span class="line">div1.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target=e.target</span><br><span class="line">    <span class="keyword">if</span>(target.nodeName===<span class="string">'A'</span>)&#123;</span><br><span class="line">        alert(target.innerHTML)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>jQuery $.proxy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).addClass(<span class="string">"red"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">"#div1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this不符合要求</span></span><br><span class="line">         $(<span class="keyword">this</span>).addClass(<span class="string">"red"</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以使用$.proxy解决</span></span><br><span class="line">$(<span class="string">"#div1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout($.proxy(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//this不符合要求</span></span><br><span class="line">         $(<span class="keyword">this</span>).addClass(<span class="string">"red"</span>)</span><br><span class="line">    &#125;,<span class="keyword">this</span>),<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>ES6 Proxy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//明星</span></span><br><span class="line"><span class="keyword">let</span> star=&#123;</span><br><span class="line">    name:<span class="string">'zhangxxxx'</span>,</span><br><span class="line">    age:<span class="number">25</span>,</span><br><span class="line">    phone:<span class="string">'130000000'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经纪人</span></span><br><span class="line"><span class="keyword">let</span> agent=<span class="keyword">new</span> <span class="built_in">Proxy</span>(star,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key===<span class="string">'phone'</span>)&#123;</span><br><span class="line">            <span class="comment">//经纪人电话</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'122344231213'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(key===<span class="string">'price'</span>)&#123;</span><br><span class="line">            <span class="comment">//明星不报价，经纪人报价</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">12000</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set(target,key,val)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key===<span class="string">'customPrice'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(val&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">                <span class="comment">//最低10万</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'价格低'</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                target[key]=value</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(agent.name)</span><br></pre></td></tr></table></figure></li></ul><h4 id="设计原则验证-3"><a href="#设计原则验证-3" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>代理类和目标类分离，隔离开目标类和使用者</li><li>符合开放封闭原则</li></ul><h3 id="代理模式-vs-适配器模式"><a href="#代理模式-vs-适配器模式" class="headerlink" title="代理模式 vs 适配器模式"></a>代理模式 vs 适配器模式</h3><ul><li>适配器模式：提供一个不同的接口(如不同版本的插头)</li><li>代理模式：提供一模一样的接口</li></ul><h3 id="代理模式-Vs-装饰器模式"><a href="#代理模式-Vs-装饰器模式" class="headerlink" title="代理模式 Vs 装饰器模式"></a>代理模式 Vs 装饰器模式</h3><ul><li>装饰器模式：扩展功能，原有功能不变且可直接使用</li><li>代理模式： 显示原有功能，但是经过限制或者阉割之后的</li></ul><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><ul><li>为子系统中的一组接口提供了一个高层接口</li><li>使用者使用这个高层接口</li></ul><h4 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h4><ul><li>去医院看病，接待员去挂号，门诊，划价、取药<br>![前端设计模式_外观模式<em>2018919165551]<br>(<a href="http://b.zhangyapeng.club/前端设计模式" target="_blank" rel="noopener">http://b.zhangyapeng.club/前端设计模式</a></em>外观模式_2018919165551.png)</li></ul><h4 id="UML类图-4"><a href="#UML类图-4" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_外观模式UML_2018919165818.png" alt="前端设计模式_外观模式UML_2018919165818"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binfEvent</span>(<span class="params">ele,type,selector,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fn==<span class="literal">null</span>)&#123;</span><br><span class="line">        fn=selector</span><br><span class="line">        selector=<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//****</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">bindEvent(elem,<span class="string">'click'</span>,<span class="string">'#div1'</span>,fn)</span><br><span class="line">bindEvent(elem,<span class="string">'click'</span>,fn)</span><br></pre></td></tr></table></figure><h4 id="设计原则验证-4"><a href="#设计原则验证-4" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>不符合单一职责原则和开放封闭原则，因此谨慎使用，不可滥用</li></ul><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>发布 &amp; 订阅</li><li>一对多</li></ul><h4 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h4><ul><li>点咖啡，点好之后坐等被叫</li></ul><h4 id="UML类图-5"><a href="#UML类图-5" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://b.zhangyapeng.club/前端设计模式_观察者模式_201892013155.png" alt="前端设计模式_观察者模式_201892013155"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主题保存状态，状态变化之后触发所有观察者对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.observers=[]</span><br><span class="line">    &#125;</span><br><span class="line">    getState()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    setState(state)&#123;</span><br><span class="line">        <span class="keyword">this</span>.state=state</span><br><span class="line">    &#125;</span><br><span class="line">    notifyAllObservers()&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span>=&gt;</span>&#123;</span><br><span class="line">            observer.update()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    attach(observer)&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,subject)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.subject=subject</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    update()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1=<span class="keyword">new</span> Observer(<span class="string">'o1'</span>,s)</span><br><span class="line"><span class="keyword">let</span> o2=<span class="keyword">new</span> Observer(<span class="string">'o2'</span>,s)</span><br><span class="line"><span class="keyword">let</span> o3=<span class="keyword">new</span> Observer(<span class="string">'o3'</span>,s)</span><br><span class="line">s.setState(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><h4 id="场景-5"><a href="#场景-5" class="headerlink" title="场景"></a>场景</h4><ul><li><p>网页事件绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>Promise</p></li><li><p>jQuery callback</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbacks=$.Callbacks()</span><br><span class="line">callbacks.add(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info)</span><br><span class="line">&#125;)</span><br><span class="line">callbacks.fire(<span class="string">'gogo'</span>)</span><br></pre></td></tr></table></figure></li><li><p>nodejs 自定义事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter=<span class="built_in">require</span>(<span class="string">"events"</span>).EventEmitter</span><br><span class="line"><span class="keyword">const</span> emitter1=<span class="keyword">new</span> EventEmitter();</span><br><span class="line">emitter.on(<span class="string">"some"</span>,()=&gt;&#123;</span><br><span class="line">    <span class="comment">//监听some事件</span></span><br><span class="line">&#125;)</span><br><span class="line">emitter.emit(<span class="string">"some"</span>)</span><br></pre></td></tr></table></figure></li><li><p>nodejs中：处理http请求；多进程通讯</p></li><li>vue和React组件生命周期触发</li><li>vue watch</li></ul><h4 id="设计原则验证-5"><a href="#设计原则验证-5" class="headerlink" title="设计原则验证"></a>设计原则验证</h4><ul><li>主题和观察者分离，不是主动触发而是被动监听，两者解耦</li><li>符合开放封闭原则</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h2&gt;&lt;h3 id=&quot;什么是面向对象&quot;&gt;&lt;a href=&quot;#什么是面向对象&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="架构" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/06/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/06/前端性能优化/</id>
    <published>2018-09-06T08:46:52.000Z</published>
    <updated>2018-09-18T02:01:09.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h2><ol><li>网络层面</li><li>构建层面</li><li>服务端层面</li><li>浏览器渲染层面</li></ol><p>深入理解<strong>http请求的过程</strong>是前端性能优化的核心</p><h3 id="资源的合并和压缩"><a href="#资源的合并和压缩" class="headerlink" title="资源的合并和压缩"></a>资源的合并和压缩</h3><ul><li>减少http请求数量</li><li>减少请求资源的大小</li></ul><h4 id="压缩实现"><a href="#压缩实现" class="headerlink" title="压缩实现"></a>压缩实现</h4><ul><li>html压缩</li><li>css压缩</li><li>js的压缩和混乱</li></ul><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><ul><li>文件与文件之间有插入的上行请求，增加了N-1个网络延迟受</li><li>丢包问题影响更严重</li><li>经过代理服务器时可能会被断开</li><li>浏览器对于同域名下的静态资源加载数量为5个</li></ul><h5 id="文件合并存在的问题："><a href="#文件合并存在的问题：" class="headerlink" title="文件合并存在的问题："></a>文件合并存在的问题：</h5><ul><li>首屏渲染问题</li><li>缓存失效问题</li></ul><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><ul><li>公共库合并</li><li>不同页面的合并</li><li>见机行事，随机应变</li></ul><h4 id="图片相关的优化的核心概念"><a href="#图片相关的优化的核心概念" class="headerlink" title="图片相关的优化的核心概念"></a>图片相关的优化的核心概念</h4><p><strong>文件大小</strong>、<strong>色彩丰富程度</strong>的权衡</p><ul><li>JPG-有损压缩</li><li>png8-256色+支持透明</li><li>png24-2^24色+不支持透明</li><li>png32-2^24色+支持透明</li></ul><p>每种图片格式都有自己的特点，针对不同的业务场景选择不同的图片格式很重要</p><h5 id="不同格式图片常见的业务场景"><a href="#不同格式图片常见的业务场景" class="headerlink" title="不同格式图片常见的业务场景"></a>不同格式图片常见的业务场景</h5><p>特点：</p><ul><li>jpg有损压缩，压缩率高，不支持透明</li><li>png支持透明，浏览器兼容好</li><li>webp压缩程度更好，在ios webview有兼容性问题 </li><li>svg矢量图，代码内嵌，相对较小，图片样式相对简单的场景</li></ul><p>场景：</p><ul><li>jpg —— 大部分不需要透明图片的业务场景</li><li>png —— 大部分需要透明图片的业务场景</li><li>webp —— 安卓全部</li><li>svg矢量图 —— 图片样式相对简单的业务场景</li></ul><h5 id="进行图片压缩"><a href="#进行图片压缩" class="headerlink" title="进行图片压缩"></a>进行图片压缩</h5><ul><li>针对真实图片情况，舍弃一些相对无关紧要的色彩信息</li><li>css雪碧图</li><li>Image inline(base64)</li></ul><h5 id="CSS雪碧图"><a href="#CSS雪碧图" class="headerlink" title="CSS雪碧图"></a>CSS雪碧图</h5><ul><li>把你的网站上用到的一些图片整合到一张单独的图片中</li><li>优点：减少你的网站的HTTP请求数量</li><li>缺点：整合图片比较大时，一次加载比较慢</li></ul><h5 id="Image-inline"><a href="#Image-inline" class="headerlink" title="Image inline"></a>Image inline</h5><ul><li>将图片的内容内嵌到html当中</li><li>减少你的网站的HTTP请求数量</li></ul><h5 id="使用矢量图"><a href="#使用矢量图" class="headerlink" title="使用矢量图"></a>使用矢量图</h5><ul><li>使用SVG进行矢量图的绘制</li><li>使用iconfont解决icon问题</li></ul><h5 id="在安卓下使用webp"><a href="#在安卓下使用webp" class="headerlink" title="在安卓下使用webp"></a>在安卓下使用webp</h5><p><strong>WebP</strong> 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都非常优秀、稳定和统一。</p><h5 id="使用webp"><a href="#使用webp" class="headerlink" title="使用webp"></a>使用webp</h5><p><strong>\<picture></picture></strong> 标签 <strong>\<picture></picture></strong>是HTML5中的一个新标签，类似<video>它也可以指定多个格式的资源，由浏览器选择自己支持的格式进行加载。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">picture</span> <span class="attr">class</span>=<span class="string">"picture"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span> <span class="attr">type</span>=<span class="string">"image/webp"</span> <span class="attr">srcset</span>=<span class="string">"image.webp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"image.jpg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure></video></p><p>如果浏览器支持WebP格式，就会加载Image.webp，否则会加载Image.jpg。</p><p>即使浏览器不支持<picture>标签，图片仍然会正常显示，只是CSS可能无法正确选取到Picture元素。比如在IE8中，下面的CSS就不会起作用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.picture</span> <span class="selector-tag">img</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></picture></p><p>但是可以这样来给图片写样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure></p><p>即使浏览器使用的是WebP格式的图片，最终还是会应用img元素的样式。</p><p>不过只要使用了，使旧的浏览器支持这个标签，CSS选择器就可以正常使用了。这种方法是最简单的，但是不能作用于CSS中的图片（如背景）</p><p>webp的格式:<a href="http://www.a.jpg_.webp" target="_blank" rel="noopener">http://www.a.jpg_.webp</a></p><h4 id="图片压缩-https-tinypng-com"><a href="#图片压缩-https-tinypng-com" class="headerlink" title="图片压缩:https://tinypng.com/"></a>图片压缩:<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></h4><h3 id="css和js加载与执行"><a href="#css和js加载与执行" class="headerlink" title="css和js加载与执行"></a>css和js加载与执行</h3><h4 id="一个网站在浏览器端是如何进行渲染的呢？"><a href="#一个网站在浏览器端是如何进行渲染的呢？" class="headerlink" title="一个网站在浏览器端是如何进行渲染的呢？"></a>一个网站在浏览器端是如何进行渲染的呢？</h4><p><strong>html页面渲染的过程</strong></p><p><img src="http://b.zhangyapeng.club/html页面加载渲染.png" alt="html页面加载渲染"></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>顺序执行、并发加载</li><li>是否阻塞</li><li>依赖关系</li><li>引入方式</li></ul><h5 id="顺序执行、并发加载"><a href="#顺序执行、并发加载" class="headerlink" title="顺序执行、并发加载"></a>顺序执行、并发加载</h5><ul><li>词法分析</li><li>并发加载</li><li>并发上限</li></ul><h5 id="css阻塞"><a href="#css阻塞" class="headerlink" title="css阻塞"></a>css阻塞</h5><ul><li>css <strong>head中阻塞页面的渲染</strong>、<strong>link标签加载完才渲染</strong></li><li>css阻塞js的执行</li><li>css不阻塞外部脚本的加载</li><li>js可能修改dom,有可能涉及到css修改，是基于前面执行的css来修改</li></ul><h5 id="js阻塞"><a href="#js阻塞" class="headerlink" title="js阻塞"></a>js阻塞</h5><ul><li>直接引入的js阻塞<strong>页面的渲染</strong></li><li>js不阻塞<strong>资源的加载</strong></li><li>js<strong>顺序执行</strong>，阻塞后续js逻辑的执行</li></ul><h5 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h5><ul><li>页面渲染依赖于css的加载</li><li>js的执行顺序的依赖关系</li><li>js逻辑对于dom节点的依赖关系</li></ul><h5 id="js引入方式"><a href="#js引入方式" class="headerlink" title="js引入方式"></a>js引入方式</h5><ul><li>直接引入</li><li>defer</li><li>async</li><li>异步动态引入js</li></ul><h5 id="加载和执行的一些优化点"><a href="#加载和执行的一些优化点" class="headerlink" title="加载和执行的一些优化点"></a>加载和执行的一些优化点</h5><ul><li>css 样式表置顶</li><li>用 link 代替 import</li><li>js 脚本置底</li><li>合理使用 js 的异步加载能力</li></ul><h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4><ul><li>图片进入可视区域之后请求图片资源</li><li>对于电商等图片很多，页面很长的业务场景适用</li><li>减少无效资源的加载</li><li>并发加载的资源过多会阻塞js的加载，影响网站的正常使用</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-origin</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vierHeight=<span class="built_in">document</span>.documentElement.clientHeight<span class="comment">//可是区域的高度</span></span></span><br><span class="line"><span class="undefined">react=item.getBoundingClientReact() 是否在可视区</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- img要设置高度 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h4><ul><li>图片等静态资源在使用之前的提前请求</li><li>资源使用到的时能缓存中加载，提升用户体验</li><li>页面展示的依赖关系维护</li></ul><h4 id="预加载方式"><a href="#预加载方式" class="headerlink" title="预加载方式"></a>预加载方式</h4><ul><li><p>html标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://xxx/jpg"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用Image对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image=<span class="keyword">new</span> Image()</span><br><span class="line">image.src=<span class="string">"http://xxx.jpg"</span></span><br></pre></td></tr></table></figure></li><li><p>使用XMLHttpRequest对象请求</p></li><li><p>preload.js</p></li></ul><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><h4 id="css性能让javascript变慢"><a href="#css性能让javascript变慢" class="headerlink" title="css性能让javascript变慢"></a>css性能让javascript变慢</h4><ul><li><strong>css</strong>:UI渲染单独的进程</li><li><strong>js</strong>:javascript解析的进程</li><li>UI渲染与javascript解析是互斥的执行的</li><li>频繁触发<strong>重绘</strong>与<strong>回流</strong>，会导致UI频繁渲染，最终导致js变慢</li></ul><h4 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h4><ul><li>当<strong>render tree</strong>中的一部分(或全部)因为元素的规模<strong>尺寸</strong>，<strong>布局</strong>，<strong>隐藏</strong>等改变而需要重新<strong>构建</strong>。这就称为回流(reflow)</li><li>当页面<strong>布局</strong>和<strong>几何属性</strong>改变时就需要回流</li></ul><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p>当<strong>render tree</strong>中的一些元素需要更新属性，而这些属性只是影响元素的<strong>外观</strong>，<strong>风格</strong>，而<strong>不</strong>会影响<strong>布局</strong>的，比如<strong>background-color</strong>。则就叫称为重绘。</p><p><strong>注意：</strong></p><ul><li>回流必将引起重绘</li><li>而重绘不一定会引起回流</li></ul><h5 id="触发页面冲布局的属性"><a href="#触发页面冲布局的属性" class="headerlink" title="触发页面冲布局的属性"></a>触发页面冲布局的属性</h5><ul><li>盒子模型相关属性会触发重布局</li><li>定位属性及浮动也会触发重布局</li><li>改变节点内部文字结构也会触发重布局</li></ul><p><img src="http://b.zhangyapeng.club/回流.jpg" alt="回流"></p><h5 id="只触发重绘的属性"><a href="#只触发重绘的属性" class="headerlink" title="只触发重绘的属性"></a>只触发重绘的属性</h5><p><img src="http://b.zhangyapeng.club/重绘.jpg" alt="重绘"></p><h5 id="新建DOM的过程"><a href="#新建DOM的过程" class="headerlink" title="新建DOM的过程"></a>新建DOM的过程</h5><ol><li>获取DOM后分割为多个图层</li><li>对每个图层的节点计算样式结果（Recalculate style–样式重计算）</li><li>为每个节点生成图形和位置（Layout–回流和重布局）</li><li>将每个节点绘制填充到图层位图中（Paint Setup和Paint–重绘）</li><li>图层作为纹理上传至GPU</li><li>符合多个图层到页面上生成最终屏幕图像（Composite Layers–图层重组）</li></ol><p><strong>注意：</strong></p><ul><li>将<strong>频繁重绘回流</strong>的DOM元素单独作为一个<strong>独立图层</strong>，那么这个DOM元素的重绘和回流的影响<strong>只会</strong>在这个图层中。</li><li>因为<strong>合并图层</strong>的时候,也就是<strong>Composite Layers</strong>，会消耗大量的时间，所以尽量少建立图层，除非该图层影响页面性能大的时候。</li></ul><h4 id="如何将DOM元素变成新的独立图层？"><a href="#如何将DOM元素变成新的独立图层？" class="headerlink" title="如何将DOM元素变成新的独立图层？"></a>如何将DOM元素变成新的独立图层？</h4><h4 id="Chrome创建图层的条件"><a href="#Chrome创建图层的条件" class="headerlink" title="Chrome创建图层的条件"></a>Chrome创建图层的条件</h4><ul><li><strong>3D</strong>或透视变换（perspective transform）CSS属性</li><li>使用加速视频解码的<strong>&lt;video></strong>节点</li><li>拥有3D（<strong>WebGL</strong>）上下文或加速的2D上下文的<strong>&lt;canvas></strong>节点</li><li>混合插件（如<strong>Flash</strong>）</li><li>对自己的opacity做<strong>CSS动画</strong>或使用一个动画webkit变换的元素</li><li>拥有<strong>加速CSS过滤器</strong>的元素</li><li>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）</li><li>元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</li></ul><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 两个都可以*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">transfrom</span>:<span class="built_in">translateZ</span>(0);</span><br><span class="line">    <span class="attribute">will-change</span>:transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="开启Layers"><a href="#开启Layers" class="headerlink" title="开启Layers"></a>开启Layers</h5><p><img src="http://b.zhangyapeng.club/laylers.jpg" alt="laylers"></p><h5 id="开启paint-渲染视图"><a href="#开启paint-渲染视图" class="headerlink" title="开启paint(渲染视图)"></a>开启paint(渲染视图)</h5><p><img src="http://b.zhangyapeng.club/Painers.jpg" alt="Painers"></p><p><strong>用例</strong>：<strong>gif</strong>可以使用创建图层，因为gif图会频繁的重绘,但是img标签本身不会创建图层，所以需要我们去创建</p><h4 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h4><ol><li><strong>避免</strong>使用触发重绘、回流的css属性</li><li>将重绘、回流的影响范围限制在<strong>单独的图层</strong>之内</li><li>图层不能被<strong>滥用</strong></li></ol><h4 id="实战优化点"><a href="#实战优化点" class="headerlink" title="实战优化点"></a>实战优化点</h4><ol><li>用<strong>translate</strong>替代<strong>top</strong>改变</li><li>用<strong>opacity</strong>替代<strong>visibility</strong></li><li>不要一条一条地修改 DOM 的样式，预先定义好 class，然后修改 DOM 的 className</li><li><strong>把 DOM 离线后修改</strong>，比如：先把 DOM 给 display:none (有一次<strong>Reflow回流</strong>)，然后你修改100次，然后再把它显示出来</li><li>不要把 <strong>DOM 结点的属性值 (offsetHeight)</strong>放在一个循环里当成<strong>循环</strong>里的变量</li><li>不要使用<strong>table</strong>布局，可能很小的一个小改动会造成整个<strong>table</strong>的重新布局</li><li>动画实现的<strong>速度的选择</strong></li><li>对于<strong>动画</strong>新建图层</li><li>启用<strong>GPU</strong>硬件加速</li></ol><h5 id="GPU加速-WebGL、3d"><a href="#GPU加速-WebGL、3d" class="headerlink" title="GPU加速(WebGL、3d)"></a>GPU加速(WebGL、3d)</h5><ul><li>GPU是并行运算的,对于并行运算的纹理绘制，会非常快</li><li>因为数据在cpu上,如果GPU加速，要把数据从cpu传输到GPU上，如果数据过多，要慎重考虑</li></ul><h3 id="浏览器储存"><a href="#浏览器储存" class="headerlink" title="浏览器储存"></a>浏览器储存</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p><img src="http://b.zhangyapeng.club/cookie.png" alt="cookie"></p><ul><li>因为HTTP请求无状态，所以需要cookie去<strong>维持客户端状态</strong></li><li>cookie的生成方式<ul><li>用于浏览器端和服务器端的交互</li><li>客户端自身数据的存储</li><li>http response header中的set-cookie</li><li>js中可以通过document.cookie可以读写cookie</li></ul></li><li>过期时间<strong>expire</strong><ul><li>仅仅作为浏览器存储（大小<strong>4KB</strong>左右，能力被<strong>localstorage</strong>替代）</li><li><strong>httponly</strong>不支持js的读写</li></ul></li><li>cookie中在相关<strong>域名</strong>下面 —— <strong>cdn的流量损耗</strong><ul><li>cdn的域名和主站的域名要分开</li></ul></li></ul><h4 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h4><ul><li>HTML5设计出来专门用于浏览器存储的</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好</li><li>浏览器本地缓存方案</li></ul><h4 id="SessionStorage"><a href="#SessionStorage" class="headerlink" title="SessionStorage"></a>SessionStorage</h4><ul><li><strong>会话级别</strong>的浏览器存储</li><li>大小为5M左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好</li><li>对于表单信息的维护</li></ul><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><ul><li>IndexedDB 是一种低级API，用于客户端存储<strong>大量结构化数据</strong>。该API使用索引来实现对该数据的高性能搜索。虽然<strong>Web Storage</strong>对于存储较少量的数据很有用，但对于存储更大量的结构化数据来说，这种方法不太有用。IndexedDB提供了一个解决方案。</li><li>为应用创建离线版本</li></ul><h4 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h4><p>PWA (Progressive Web Apps) 是一种 Web App 新模型，并不是具体指某一种前沿的技术或者某一个单一的知识点，我们从英文缩写来看就能看出来，这是一个<strong>渐进式</strong>的 Web App，是通过一系列新的 Web 特性，配合优秀的 UI 交互设计，逐步的增强 Web App 的用户体验。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>可靠</strong>：在没有网络的环境中也能提供基本的页面访问，而不会出现“未连接到互联网”的页面。</li><li><strong>快速</strong>：针对网页渲染及网络数据访问有较好优化。</li><li><strong>融入</strong>（Engaging）：应用可以被增加到手机桌面，并且和普通应用一样有全屏、推送等特性</li></ul><h4 id="检测PWA的支持度"><a href="#检测PWA的支持度" class="headerlink" title="检测PWA的支持度"></a>检测PWA的支持度</h4><ul><li><a href="https://lavas.baidu.com/doc-assets/lavas/vue/more/downloads/lighthouse_2.1.0_0.zip" target="_blank" rel="noopener">lighthouse</a></li></ul><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><ul><li><strong>Service Worker</strong>是一个<strong>脚本</strong>，浏览器独立于当前网页，将其在<strong>后台运行</strong>,为实现一些<strong>不依赖页面</strong>或者<strong>用户交互</strong>的特性打开了一扇大门。在未来这些特性将包括推送消息,背景后台同步， geofencing（地理围栏定位），但它将推出的第一个首要特性，就是<strong>拦截</strong>和<strong>处理网络</strong>请求的能力，包括以编程方式来管理被缓存的响应。</li></ul><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>使用拦截和处理网络请求的能力，去实现一个离线应用</li><li>使用<strong>service Worker</strong>在后台运行同时能和页面通信的能力，去实现大规模后台数据的处理</li></ul><p><img src="http://b.zhangyapeng.club/service.png" alt="service"></p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><p><a href="chrome://serviceworker-internals/" target="_blank" rel="noopener">chrome://serviceworker-internals/</a></p></li><li><p><a href="chrome://inspect/#service-workers" target="_blank" rel="noopener">chrome://inspect/#service-workers</a></p></li></ul><h4 id="测试页面"><a href="#测试页面" class="headerlink" title="测试页面"></a><a href="https://nzv3tos3n.qnssl.com/message/msg-demo.html" target="_blank" rel="noopener">测试页面</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前页</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> msgIpt = <span class="built_in">document</span>.getElementById(<span class="string">'ipt'</span>),</span><br><span class="line">            showArea = <span class="built_in">document</span>.getElementById(<span class="string">'show'</span>),</span><br><span class="line">            sendBtn = <span class="built_in">document</span>.getElementById(<span class="string">'sendBtn'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        navigator.serviceWorker.register(<span class="string">'service-worker3.js'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        navigator.serviceWorker.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            showArea.innerHTML = showArea.innerHTML + (<span class="string">'&lt;li&gt;'</span> + event.data.message + <span class="string">'&lt;/li&gt;'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        sendBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            navigator.serviceWorker.controller.postMessage(msgIpt.value);</span><br><span class="line">            msgIpt.value = <span class="string">''</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//servers-work</span></span><br><span class="line">self.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = self.clients.matchAll()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">clientList</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> senderID = event.source ? event.source.id : <span class="string">'unknown'</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!event.source) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'event.source is null; we don\'t know the sender of the '</span> +</span><br><span class="line">                    <span class="string">'message'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clientList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (client.id === senderID) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                client.postMessage(&#123;</span><br><span class="line">                    client: senderID,</span><br><span class="line">                    message: event.data</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (event.waitUntil) &#123;</span><br><span class="line">        event.waitUntil(promise);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.waitUntil(self.clients.claim());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p><img src="http://b.zhangyapeng.club/cache.png" alt="cache"><br><img src="http://b.zhangyapeng.club/cache策略.png" alt="cache策略"></p><h4 id="httpHeader"><a href="#httpHeader" class="headerlink" title="httpHeader"></a>httpHeader</h4><ul><li>response</li><li>request<ul><li>max-age</li><li>s-max-age</li><li>private</li><li>public</li><li>no-cache</li><li>no-store</li></ul></li></ul><h5 id="max-age"><a href="#max-age" class="headerlink" title="max-age"></a>max-age</h5><ul><li><strong>cache-control</strong>最大过期时间,优先级更高<strong>http1.1</strong></li><li><strong>expires</strong>http1.0 过期时间 优先级低</li><li>返回200</li></ul><h5 id="s-maxage"><a href="#s-maxage" class="headerlink" title="s-maxage"></a>s-maxage</h5><ul><li>优先级比<strong>max-age</strong>高</li><li>只能指定<strong>public设备</strong>的缓存，就是定义<strong>cdn</strong>的缓存时间<ul><li><strong>private缓存设备</strong>指代<strong>浏览器</strong>，只能当前用户访问的缓存设备</li><li><strong>public缓存设备</strong>例如cdn缓存设备，可以支持多用户访问缓存信息</li></ul></li></ul><p><img src="http://b.zhangyapeng.club/max-age.png" alt="max-age"></p><p><img src="http://b.zhangyapeng.club/s-max-age.png" alt="s-max-age"></p><h5 id="no-cahce"><a href="#no-cahce" class="headerlink" title="no-cahce"></a>no-cahce</h5><ul><li>不会像<strong>max-age</strong>一样，不往服务器发请求，而直接读取本地缓存</li><li>会让浏览器发请求到服务器，让服务器判断当前缓存是否可用，和<strong>last-modified</strong>配合使用<br><img src="http://b.zhangyapeng.club/no-cahce.png" alt="no-cahce"></li></ul><h5 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h5><p>配置<strong>no-store</strong>就不使用任何缓存策略</p><h5 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h5><ul><li>缓存过期时间,用来指定资源到期的时间，是服务器端的具体时间点</li><li>告诉浏览器在过期时间前浏览器可以直接从浏览器缓存中读取数据，而无需再次请求</li></ul><p><img src="http://b.zhangyapeng.club/expires.jpg" alt="expires"></p><h4 id="协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）"><a href="#协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）" class="headerlink" title="协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）"></a>协商缓存（客户端和服务端协商的结果）（缓存304，没匹配上缓存200）</h4><h5 id="Last-Modifed-IF-Modified-Since"><a href="#Last-Modifed-IF-Modified-Since" class="headerlink" title="Last-Modifed/IF-Modified-Since"></a>Last-Modifed/IF-Modified-Since</h5><ul><li>基于客户端和服务器端协商的缓存机制</li><li>last-modified—-response header</li><li>if-modified-since—-request header</li><li>需要与<strong>cache-control</strong>共同使用,<strong>max-age</strong>没有过期先走<strong>max-age</strong></li></ul><p><img src="http://b.zhangyapeng.club/last-modified.png" alt="last-modified"></p><p>####### last-modified有什么缺点？</p><ul><li>某些服务端不能获取精确的修改时间</li><li>文件修改时间改了，但是文件内容却没有变</li><li>毫秒级别的修改不能区分</li></ul><h5 id="Etag-If-None-Match"><a href="#Etag-If-None-Match" class="headerlink" title="Etag/If-None-Match"></a>Etag/If-None-Match</h5><ul><li>文件内容的hash值</li><li>etag–response header</li><li>if-none-match—request header</li><li>需要与<strong>cache-control</strong>共同使用</li><li>如果同时有<strong>etag</strong>和<strong>last-modified</strong>存在，在发送请求的时候会一次性的发送给服务器，没有优先级，服务器会比较这两个信息（在具体实现上，大多数做法针对这种情况只会比对<strong>etag</strong>）。服务器在输出上，如果输出了<strong>etag</strong>就没有必要再输出<strong>last-modified</strong>（实际上大多数情况会都输出）。<br><img src="http://b.zhangyapeng.club/etag.png" alt="etag"></li></ul><h4 id="分级缓存策略"><a href="#分级缓存策略" class="headerlink" title="分级缓存策略"></a>分级缓存策略</h4><h6 id="浏览器输入-url-之后敲下回车，刷新-F5-与强制刷新-Ctrl-F5-，又有什么区别？"><a href="#浏览器输入-url-之后敲下回车，刷新-F5-与强制刷新-Ctrl-F5-，又有什么区别？" class="headerlink" title="浏览器输入 url 之后敲下回车，刷新 F5 与强制刷新(Ctrl + F5)，又有什么区别？"></a>浏览器输入 url 之后敲下回车，刷新 F5 与强制刷新(Ctrl + F5)，又有什么区别？</h6><p>实际上浏览器输入<strong>url</strong>之后敲下<strong>回车</strong>就是先看本地<strong>cache-control</strong>、<strong>expires</strong>的情况，<strong>刷新</strong>(F5)就是忽略先看本地<strong>cache-control</strong>、<strong>expires</strong>的情况，带上条件<strong>If-None-Match</strong>、<strong>If-Modified-Since</strong>，<strong>强制刷新</strong>(Ctrl + F5)就是不带条件的访问。</p><p>值得注意的是，如果是 浏览器输入<strong>url</strong>之后敲下回车 你在<strong>network</strong>里面看到的状态往往是<strong>200</strong>，但是大小是<strong>0</strong>。这是因为这个<strong>200</strong>是上次访问资源返回的状态码。</p><p>如果你是一位开发者，还是建议在 Chrome 里面开启<strong>Disable Cache</strong>.</p><p><img src="http://b.zhangyapeng.club/分级缓存.png" alt="分级缓存"></p><p><strong>查看缓存</strong>:</p><ul><li><a href="http://qqbrowser://view-http-cache/" target="_blank" rel="noopener">http://qqbrowser://view-http-cache/</a></li><li><a href="chrome://about/" target="_blank" rel="noopener">chrome://about/</a></li></ul><h4 id="服务端性能优化"><a href="#服务端性能优化" class="headerlink" title="服务端性能优化"></a>服务端性能优化</h4><ul><li>vue渲染面临的问题<ul><li>首屏加载问题<ul><li>下载vue.js</li><li>执行vue.js</li><li>生成html页面</li></ul></li><li>以前没有前端框架时<ul><li>用jsp/php在<strong>服务器端进行数据的填充</strong></li><li>发送给客户端就是已经<strong>填充好数据</strong>的html</li></ul></li><li>使用Juqery异步加载数据</li><li>使用React和Vue前端框架</li></ul></li></ul><h5 id="vue性能进行提升方案"><a href="#vue性能进行提升方案" class="headerlink" title="vue性能进行提升方案"></a>vue性能进行提升方案</h5><ul><li>构建层模板编译</li><li>数据无关的<strong>prerender</strong>的方式</li><li>服务端渲染</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端性能优化&quot;&gt;&lt;a href=&quot;#前端性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端性能优化&quot;&gt;&lt;/a&gt;前端性能优化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网络层面&lt;/li&gt;
&lt;li&gt;构建层面&lt;/li&gt;
&lt;li&gt;服务端层面&lt;/li&gt;
&lt;li&gt;浏览器渲染
      
    
    </summary>
    
    
      <category term="性能优化" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/09/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/09/05/浏览器渲染/</id>
    <published>2018-09-05T07:43:59.000Z</published>
    <updated>2018-09-06T08:11:58.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h3><p>有这样几个问题，我们来思考一下：</p><ol><li>我们平常浏览的网页是否是应用</li><li>在操作系统中的应用是如何运行的</li><li>浏览器究竟是什么</li><li>webkit和浏览器的关系</li><li>浏览器是如何呈现页面的</li><li>经典问题：从浏览器的地址输入一个网址直到网页内容呈现完毕，发生了哪些事情</li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p>浏览器是用户访问互联网最重要的接口</p><p>本质上,浏览器是方便一般互联网用户通过界面解析和发送HTTP协议的软件</p><h4 id="浏览器历史"><a href="#浏览器历史" class="headerlink" title="浏览器历史"></a>浏览器历史</h4><ol><li>1991年，第一个浏览器WorldWideWeb(后改为Nexus),功能简单，不支持图片</li><li>1993年，Mosaic浏览器出现，可以显示图片，为了区分浏览器是否显示图片，出现了<strong>UserAgent</strong></li><li>1994年，Mozilla浏览器出现,也就是后面大名鼎鼎的网景浏览器Netscape,它的UserAgent为<strong>Mozilla/1.0</strong></li><li>1995年，IE浏览器出现，为了抢夺市场，UserAgent为<strong>Mozilla/1.22</strong></li><li>1998年，网景浏览器失利，成立Mozilla组织</li><li>2003年，网景公司解散，Mozilla基金会成立，这个组织推进了后来的Firefox</li><li>Mozilla开发了Geoko,变成了Firefox，他的UserAgent<strong>Mozilla/5.0</strong></li><li>群雄并起，众多公司的浏览器的UserAgent上都带有<strong>Mozilla</strong></li><li>chrome和safari出现，占有了很大的份额</li></ol><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><ul><li><p>最初的浏览器做了哪些事情</p><ol><li>创建一个TCP连接</li><li>发送一个文本协议(请求头)</li><li>解析页面的操作(不解析图片)</li></ol></li><li><p>User-Agent的起初意义</p><ol><li>告诉服务器,当前浏览器的版本，系统</li><li>起初为了区分浏览器是否支持图片</li></ol></li></ul><h4 id="查看用户代理"><a href="#查看用户代理" class="headerlink" title="查看用户代理"></a>查看用户代理</h4><ol><li>打开chrome浏览器的控制台</li><li>在控制台输入<code>navigator.userAgent</code></li><li>会发现类似的字符串<code>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36</code></li></ol><h4 id="用户代理的作用"><a href="#用户代理的作用" class="headerlink" title="用户代理的作用"></a>用户代理的作用</h4><ol><li>判断浏览器类型，采用兼容方案</li><li>判断是否为移动端</li><li>标识H5容器，方便调用H5容器特定接口</li><li>要注意<code>userAgent</code>伪装成本很低，不要过于依赖</li></ol><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>对于操作系统来说，<strong>内核</strong>是操作系统的核心，是第一层基于硬件的软件扩充，提供最核心最基础的服务</p><p>应用程序通过内核进行<strong>系统调用</strong>来使用计算机的硬件，内核代码简介高效,并且基本没有bug,由于是最底层的服务，一点微小的错误也会造成整个系统的崩溃。好处当然也显而易见，基于一个稳定的内核，开发者可以构建适合不同场景的操作系统和应用软件</p><p>对于浏览器来说，同样存在<strong>浏览器内核</strong>，与操作系统内核相似，浏览器内核需要提供API给浏览器开发者使用，同时提供最核心的功能，如<code>加载和渲染网页</code>，<code>调用操作系统所提供的服务</code></p><p>对于浏览器厂商来说，高效使用和开发浏览器内核是核心问题。对于web开发者来说，理解浏览器内核的基本机制，才能开发出高性能的web应用</p><h3 id="浏览器内核知识"><a href="#浏览器内核知识" class="headerlink" title="浏览器内核知识"></a>浏览器内核知识</h3><h4 id="浏览器内核定义"><a href="#浏览器内核定义" class="headerlink" title="浏览器内核定义"></a>浏览器内核定义</h4><p>我们可以初步认为浏览器中<strong>负责将表示页面的字符串转变成可视化的图像的模块</strong>就是<strong>浏览器内核</strong></p><h3 id="回到”从输入URL…”的问题"><a href="#回到”从输入URL…”的问题" class="headerlink" title="回到”从输入URL…”的问题"></a>回到”从输入URL…”的问题</h3><p>我们将输入URL到远程内容返回之前的阶段略过，从<code>Response</code>开始：<br>使用Node.js的TCP模块来获取，远程主机究竟给我们返回了什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> desPort = <span class="number">80</span></span><br><span class="line"><span class="keyword">const</span> desHost = <span class="string">'123.57.205.204'</span></span><br><span class="line"><span class="keyword">let</span> allBuffer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> client = net.createConnection(desPort, desHost, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'connected to server!'</span>)</span><br><span class="line">  client.write(<span class="string">`GET / HTTP/1.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCache-Control: no-cache\r\nConnection: keep-alive\r\nCookie: __cfduid=dcc794c22f91c478f5c0e21bd2a4dc4a71535945679; __root_domain_v=.zhufengpeixun.cn; _qddaz=QD.54jl6y.ec9qho.jllqeote; pgv_pvi=4490024960; tencentSig=320538624; IESESSION=alive; pgv_si=s8736718848; Hm_lvt_418b1c90fa35dc210dd5d2284d9f9f29=1535945692,1535963228,1536047064,1536110767; Hm_lvt_5ca1e1efc366a109d783a085499d59d9=1535964808,1536111794; Hm_lpvt_5ca1e1efc366a109d783a085499d59d9=1536111794; Hm_lpvt_418b1c90fa35dc210dd5d2284d9f9f29=1536140224; _qdda=3-1.1; _qddab=3-vgg4fx.jloy87b0; _qddamta_2852156370=3-0\r\nHost: www.zhufengpeixun.cn\r\nPragma: no-cache\r\n</span></span><br><span class="line"><span class="string">  Upgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36\r\n\r\n`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!allBuffer) &#123;</span><br><span class="line">    allBuffer = data</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    allBuffer = Buffer.concat([allBuffer, data])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> htmlContent = allBuffer.toString()</span><br><span class="line">  <span class="keyword">const</span> ws = fs.createWriteStream(</span><br><span class="line">    path.join(__dirname, <span class="string">'zhufeng.html'</span>)</span><br><span class="line">  )</span><br><span class="line">  ws.write(htmlContent)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>几个问题:</p><ol><li>以上这段代码的逻辑</li><li>返回的字符串该如何解析</li><li>想让返回的字符串呈现为图像，怎么做 </li></ol><h4 id="远程主机响应"><a href="#远程主机响应" class="headerlink" title="远程主机响应"></a>远程主机响应</h4><h5 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h5><p>请求报文格式：</p><ul><li>起始行:[方法][空格][请求URL][空格][HTTP版本][换行符]</li><li>首部:[首部名称][;][可选空格][首部内容][换行符]</li><li>首部结束:[换行符]</li><li>实体</li></ul><p>响应报文格式:</p><ul><li>起始行：[HTTP版本][空格][状态码][空格][原因短语][换行符]</li><li>首部:[首部名称][;][可选空格][首部内容][换行符]</li><li>首部结束:[换行符]</li><li>实体</li></ul><p>换行符:\r\n</p><h3 id="响应组成"><a href="#响应组成" class="headerlink" title="响应组成"></a>响应组成</h3><p>响应内容解析如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 302 Found</span><br><span class="line">Location: https://www.baidu.com/error.html</span><br><span class="line">Server: bfe</span><br><span class="line">Date: Wed, 05 Sep 2018 10:10:32 GMT</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line"># 实体内容 当前为html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">....</span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure></p><h3 id="网页内容的组成"><a href="#网页内容的组成" class="headerlink" title="网页内容的组成"></a>网页内容的组成</h3><ul><li>doctype:提供浏览器html版本信息，html解析器用那个版本解析</li><li>head:html头部<ul><li>meta:元数据信息<ul><li>charset:此特性声明当前文档所使用的字符编码</li><li>http-equiv:客户端行为，如渲染模式，缓存等</li><li>name[keywords]:搜索引擎使用</li><li>name[description]:搜索引擎使用</li><li>name[viewport]:<strong>浏览器视口设置</strong></li></ul></li><li>link</li><li>script:需要在body前完成加载或运行的脚本</li></ul></li><li>body:html实体<ul><li>script:需要在body解析时加载或运行的脚本</li></ul></li></ul><h3 id="问题-X-UA-Compatible是什么"><a href="#问题-X-UA-Compatible是什么" class="headerlink" title="问题:X-UA-Compatible是什么"></a>问题:X-UA-Compatible是什么</h3><p><code>X-UA-Compatible</code>是针对<code>IE8</code>新加的一个设置，对于<code>IE8之前</code>的浏览器是不识别的，这个区别与<code>content=&quot;IE=7&quot;</code>在无论页面是否包含<code>&lt;!DOCTYPE&gt;</code>指令，都像是使用了 <code>Windows Internet Explorer 7</code>的标准模式。而<code>content=&quot;IE=EmulateIE7&quot;</code>模式遵循&lt;!DOCTYPE&gt;指令。对于多数网站来说，它是首选的兼容性模式。</p><p>为了避免制作出的页面在IE8下面出现错误，建议直接将IE8使用IE7进行渲染。也就是直接在页面的header的meta标签中加入如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="渲染需要做的工作"><a href="#渲染需要做的工作" class="headerlink" title="渲染需要做的工作"></a>渲染需要做的工作</h3><p><img src="浏览器渲染.jpg" alt="浏览器渲染.jpg"></p><p>上图表示了渲染引擎的一般渲染过程，虚线表示该阶段所依赖的外部模块（不属于渲染引擎）</p><p>重要组件</p><ul><li>html解释器:解释HTML文本解释器，html文本-&gt;DOM树</li><li>css解释器：遇到级联样式时,需要使用级联样式表解释器，为DOM对象计算出样式信息</li><li>Javascript引擎:遇到js代码时,需要使用Javascript解释器，并使得js代码有调用DOM接口和CSSOM接口的能力</li><li>布局:结合CSS,<strong>计算</strong>出每个DOM对象的<strong>大小位置</strong>信息</li><li>绘图:将经过布局计算的DOM节点<strong>绘制成图像</strong></li></ul><p>以上重要组件组成了渲染引擎：<br><img src="渲染引擎.jpg" alt="渲染引擎.jpg"></p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>几个问题：</p><ol><li>通过响应的内容，我们可以看到内容中还存在许多外联资源，浏览器是如何处理的？</li><li>著名的优化:”css放在头部，js放在尾部”,为什么？</li><li>浏览器在渲染之前或者之后还需要做那些事情</li><li>移动端的浏览器和pc端的浏览器是否相同</li></ol><h4 id="浏览器内核架构"><a href="#浏览器内核架构" class="headerlink" title="浏览器内核架构"></a>浏览器内核架构</h4><h4 id="回答上一节"><a href="#回答上一节" class="headerlink" title="回答上一节"></a>回答上一节</h4><ol><li>不同的外联资源，webkit中有不同的资源加载器。当浏览器解析到URL地址时，调用特定的资源加载器，如果不是特殊资源，加载过程不会阻碍渲染过程</li><li>一般来说css资源不会阻碍渲染过程，但Javascript资源在的浏览器中，会阻碍渲染过程的进行。如果放置在头部，渲染过程会<strong>暂停</strong>,造成”白屏”.但现代浏览器的优化已经做的很好了，<strong>preload</strong>，所以当渲染被阻塞时，浏览器会开启新的线程继续渲染。</li><li>渲染之前需要加载资源，渲染之后在DOM或者css变化后，重新进行布局计算和重渲染操作</li><li>功能基本相同，但所运用的操作系统不同，渲染机制有差异</li></ol><h4 id="内核架构"><a href="#内核架构" class="headerlink" title="内核架构"></a>内核架构</h4><p>根据上面的问题回答我们会发现，webkit仅仅包含渲染功能是不够的，因为它需要获取网络资源，支持不同的浏览器，支持不用的操作系统，同样还要包含调试工具。</p><p>所以我们应该给出一张更全的webkit架构图:<br><img src="webkit架构图.jpg" alt="webkit架构图.jpg"><br>虚线框表示该部分模块在不同浏览器使用webkit的实现是不一样的，实线框是基本一致的。</p><h4 id="Chromium架构"><a href="#Chromium架构" class="headerlink" title="Chromium架构"></a>Chromium架构</h4><p>基于webkit内核就可以构建浏览器应用，了解著名的chromium浏览器对我们的web开发也有很多启发</p><p>几个问题</p><ol><li>除去webkit内核完成的功能，浏览器的工作有哪些？</li><li>进程是什么？</li><li>IPC是什么？</li><li>线程是什么？</li><li>线程同步是什么？</li></ol><h4 id="现代浏览器的工作？"><a href="#现代浏览器的工作？" class="headerlink" title="现代浏览器的工作？"></a>现代浏览器的工作？</h4><ul><li>资源管理</li><li>多页面管理：也就是多个标签页的管理</li><li>插件和扩展：如flash,油猴，chrome扩展程序</li><li>账户和同步</li><li>安全机制</li><li>多系统支持</li></ul><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><ul><li>进程：对CPU,主存，IO设备的抽象，操作系统对一个正在进行的程序的抽象</li><li>线程：组成进程的执行单元</li><li>进程通信：进程间传输数据（交换信息）</li><li>线程同步</li></ul><h4 id="进程通讯的方式"><a href="#进程通讯的方式" class="headerlink" title="进程通讯的方式"></a>进程通讯的方式</h4><h4 id="线程同步的方式"><a href="#线程同步的方式" class="headerlink" title="线程同步的方式"></a>线程同步的方式</h4><p><img src="进程.jpg" alt="进程.jpg"></p><h4 id="Chromium的多进程架构"><a href="#Chromium的多进程架构" class="headerlink" title="Chromium的多进程架构"></a>Chromium的多进程架构</h4><p>chromium的模块：<br><img src="chromium.jpg" alt="chromium.jpg"><br>主要进程介绍：</p><ul><li>Browser进程：主进程,负责浏览器页面，页面管理等</li><li>render进程：渲染进程</li><li>NPAPI插件进程</li><li>GPU进程：当GPU硬件加速打开时才会创建</li></ul><p>多进程架构的目的所在：</p><ul><li>职责分离，故障范围小</li><li>隔离性</li><li>性能</li></ul><h4 id="javascript中的进程和线程"><a href="#javascript中的进程和线程" class="headerlink" title="javascript中的进程和线程"></a>javascript中的进程和线程</h4><ul><li>单线程</li></ul><h3 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h3><p>总共分两步：</p><ol><li>加载：加载渲染所必须的html代码</li><li>渲染：将html代码绘制成图像结果</li></ol><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><h5 id="资源加载机制"><a href="#资源加载机制" class="headerlink" title="资源加载机制"></a>资源加载机制</h5><h6 id="资源加载器"><a href="#资源加载器" class="headerlink" title="资源加载器"></a>资源加载器</h6><p>分为三类：</p><ol><li>特定资源加载器：针对每种资源类型的特定加载器，仅加载某一种资源。对应设计模式中 的单例模式</li><li>缓存资源加载器：与常规的缓存逻辑相同，特定加载器先通过缓存资源加载器来查找是否有缓存资源，如果在资源缓存池中存在缓存资源，则取出以便使用；若不存在，发送请求给网络模块</li><li>通用资源加载器：由于加载资源大多属于网络请求，而网络请求的逻辑是可以被特定资源加载器所共享的，所以通用资源加载器只能负责通过网路获得目标资源的数据，但不负责进一步解析</li></ol><h5 id="资源缓存"><a href="#资源缓存" class="headerlink" title="资源缓存"></a>资源缓存</h5><ol><li>page Cache：页面缓存</li><li>Memory Cache：内存缓存</li><li>Disk Cache:磁盘缓存</li></ol><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><h4 id="网络栈"><a href="#网络栈" class="headerlink" title="网络栈"></a>网络栈</h4><p><img src="网络栈.jpg" alt="网络栈.jpg"></p><ol><li>确定请求类型，协议</li><li>判断是否需要建立网络连接</li><li>建立HTTP事务</li><li>建立TCP socket连接</li><li>套接字连接</li></ol><h4 id="预先加载"><a href="#预先加载" class="headerlink" title="预先加载"></a>预先加载</h4><ol><li>DNS预取 <strong>dns-prefetch</strong></li><li>资源的预取</li><li>TCP preconnect</li></ol><h4 id="TCP-相关"><a href="#TCP-相关" class="headerlink" title="TCP 相关"></a>TCP 相关</h4><p>请参考之前的网络课程</p><h4 id="如何提高加载速度"><a href="#如何提高加载速度" class="headerlink" title="如何提高加载速度"></a>如何提高加载速度</h4><ol start="3"><li>合并请求：nginx模块，sprite雪碧图 <strong>移动端TCP请求建立慢</strong></li><li>缓存:from cache(memory,disk),localstorage，本地缓存策略，HTTP头(结合业务)</li><li>tcp 网络连接优化：tcp调优，HTTP/2,keep-alive</li><li>硬件：加大带宽，使用cdn(对象存储)</li><li>资源大小：gzip,webp，image压缩，cookie体积</li><li>预加载： dns预取 、多个cdn域名<strong>Chrome在同域名下读资源只能读5个</strong> 、异步读取js</li></ol><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><h6 id="HTML-解释器"><a href="#HTML-解释器" class="headerlink" title="HTML 解释器"></a>HTML 解释器</h6><h6 id="解释过程"><a href="#解释过程" class="headerlink" title="解释过程"></a>解释过程</h6><p>资源的变换</p><ol><li>字节流</li><li>字符流</li><li>Tokens</li><li>节点</li><li>DOM数</li></ol><p>流程：</p><ol><li>词法分析</li><li>XSSAuditor</li><li>语法分析</li><li>生成DOM数</li></ol><h5 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h5><p>通过HTMLTokenizer来进行词法分析</p><p>词法分析的任务是对输入字节流进行逐字扫描，根据构词规则识别单词和符号，分词</p><p>词法分析器的主要接口是nextToken()函数，调用者只需要将字符串传入，就会得到一个词语</p><p>注意，在这里并不涉及标签类型信息，这是之后语法分析的工作</p><h5 id="CSS解释器"><a href="#CSS解释器" class="headerlink" title="CSS解释器"></a>CSS解释器</h5><h6 id="Javascript引擎"><a href="#Javascript引擎" class="headerlink" title="Javascript引擎"></a>Javascript引擎</h6><p>执行流程：</p><ol><li>源代码</li><li>抽象语法数</li><li>字节码</li><li>解释器</li><li>JIT</li><li>本地代码</li></ol><h6 id="渲染-1"><a href="#渲染-1" class="headerlink" title="渲染"></a>渲染</h6><ol><li>renderObject</li><li>RenderLayer</li><li>布局计算</li><li>绘图无关上下文</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Get-Started&quot;&gt;&lt;a href=&quot;#Get-Started&quot; class=&quot;headerlink&quot; title=&quot;Get Started&quot;&gt;&lt;/a&gt;Get Started&lt;/h3&gt;&lt;p&gt;有这样几个问题，我们来思考一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们平常
      
    
    </summary>
    
    
      <category term="浏览器渲染" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
      <category term="浏览器" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vscode插件</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/08/29/vscode%E6%8F%92%E4%BB%B6/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/08/29/vscode插件/</id>
    <published>2018-08-29T06:54:02.000Z</published>
    <updated>2018-09-17T03:03:14.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Setting-Sync-可同步包含的所有扩展和完整的用户文件夹"><a href="#Setting-Sync-可同步包含的所有扩展和完整的用户文件夹" class="headerlink" title="Setting Sync 可同步包含的所有扩展和完整的用户文件夹"></a>Setting Sync 可同步包含的所有扩展和完整的用户文件夹</h3><ul><li><p>设置文件</p></li><li><p>快捷键设置文件</p></li><li><p>Launch File</p></li><li><p>Snippets Folder</p></li><li><p>VSCode 扩展设置</p></li><li><p>工作空间</p></li></ul><a id="more"></a><h3 id="为什么需要Settings-Sync"><a href="#为什么需要Settings-Sync" class="headerlink" title="为什么需要Settings Sync"></a>为什么需要<code>Settings Sync</code></h3><p>一开始不知道怎么<code>备份vscode</code>的配置,傻乎乎的把要用的插件抄下来,还有用户settings拷贝出来.每次换了电脑或者重装系统什么的都要重新备份.虽然来回调整的概率很低,但是突然哪天需要同步设置什么的就很麻烦了~至少我是在初期经常鼓捣这个编辑器,而且办公在家和公司是不同的设备~所以觉得还是很有必要的~</p><h3 id="步骤如下"><a href="#步骤如下" class="headerlink" title="步骤如下"></a>步骤如下</h3><ol><li><p><strong>安装</strong>插件并<strong>重启VSCODE</strong>就不用说了(<code>安装VSCODE Settings Sync后重新加载</code>)<br><img src="00-400x264.png" alt="安装VSCODE Settings Sync后重新加载"></p></li><li><p>重启后按快捷键 <strong>alt+shift+u</strong> (这里假设你第一次用)</p><ul><li>它会弹出一个窗口对应的是github上面的创建个人gist的页面,如果未登录请先登录github.(<code>github创建gist来存储设置</code>)<br><img src="01-400x445.png" alt="github创建gist来存储设置"></li><li>保存后会生成一个key(<code>请牢记token id,后面将会用到</code>)<br><img src="02-400x189.png" alt="请牢记token id,后面将会用到"></li></ul></li><li><p>切回到vscode,他会有个输入区,就是存放刚才生成的key(<code>输入刚才生成的key</code>)<br><img src="03-400x75.png" alt="输入刚才生成的key"></p></li><li><p>然后理论上他就开始对你<code>本机的配置</code>进行一个<code>扫描上传</code>了,上传完成后,他会弹出控制台提示备份(上传)插件成功<br><img src="" alt=""></p></li><li><p>上传完成后会生成一个ID，要记下来<code>ID</code>和<code>token key</code>不同</p></li><li><p>接下来我们到另一台电脑上了<code>下载配置</code>.同样的<code>先安装Settings Sync插件</code>,并重新加载.</p></li><li><p>然后按快捷键<strong>alt+shift+d</strong>,就应该会弹出一个输入框,请在这里输入<code>之前</code>保存下来的<code>token key 和 (GIST ID)</code>,回车后将会自动下载之前上传的配置.<br><img src="1.png" alt=""><br><img src="2.png" alt=""></p></li><li><p>那么下载完成后,你这台电脑修改了相关配置再次上传就好了.是不是感觉方便多了~</p></li><li><p>其他的说明,如果在输入<code>gist id写错</code>了,读取不到的情况下,大概需要<code>重置设置</code>,按<code>F1</code>,输入<code>sync</code>,这里有重置选项.试试看~ (<code>重置sync的gist配置信息等</code>)<br><img src="04.png" alt="重置sync的gist配置信息等"></p></li><li><p>如果忘记token可以到一下地址查看token</p><ul><li>Win下：<code>C:\Users\Administrator\AppData\Roaming\Code\User</code></li><li>Mac下：<code>~/Library/Application Support/Code/User/syncLocalSettings.json</code></li><li>Linux下：<code>~/.config/Code/User/syncLocalSettings.json</code><br>进入目录后，找到 <code>syncLocalSettings.json</code>这个文件，<code>查找token</code>，并替换后面复制的值，就可以顺利进行同步配置信息了。</li></ul></li><li><p>如果忘记gist id,可以到设置查看id<br><img src="20180815183812965.png" alt="gist id"><br><img src="20180815183830941.png" alt="gist id"></p></li></ol><p><strong>注意：</strong>(<code>ID</code>和<code>key</code>都要记下来)(<code>恢复</code>)插件需要用到 <code>很重要</code>!!! 建议上传到网盘 或者 笔记软件上</p><ol start="12"><li>如果token无效，要在github上重新生成，先在<code>原平台</code>修改并生成新的gist-id，再到新平台做上述操作。<br><a href="https://gist.github.com/用户名/token值或gist-id" target="_blank" rel="noopener">https://gist.github.com/用户名/token值或gist-id</a>值 可以查看相关数据；</li></ol><p>还有些其他的功能例如<code>自动上传下载</code>等等,不是很常用,大家可以自行看看官方文档,基本的使用方法就是这样了,我写的如果有问题或者哪里不明白的可以留言- -.</p><hr><p>插件地址：<br><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Setting-Sync-可同步包含的所有扩展和完整的用户文件夹&quot;&gt;&lt;a href=&quot;#Setting-Sync-可同步包含的所有扩展和完整的用户文件夹&quot; class=&quot;headerlink&quot; title=&quot;Setting Sync 可同步包含的所有扩展和完整的用户文件夹&quot;&gt;&lt;/a&gt;Setting Sync 可同步包含的所有扩展和完整的用户文件夹&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;快捷键设置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Launch File&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Snippets Folder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VSCode 扩展设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作空间&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vscode" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/vscode/"/>
    
      <category term="vscode插件" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/vscode%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>TCP</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/08/08/TCP/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/08/08/TCP/</id>
    <published>2018-08-08T08:25:07.000Z</published>
    <updated>2018-09-05T06:30:33.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="深入理TCP-IP模型"><a href="#深入理TCP-IP模型" class="headerlink" title="深入理TCP/IP模型"></a>深入理TCP/IP模型</h3><hr><p>网络模型最初是由各个互联网公司自己制定的，由于当时不规范，严重阻碍了互联网的发展，为了解决这个问题，国际标准化组织(OSI)制定了OSI模型,定义了<code>互联网通信</code>的标准,是设计和描述计算机<code>网络通信</code>的基本框架。</p><p><img src="osi7层模型.jpg" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;深入理TCP-IP模型&quot;&gt;&lt;a href=&quot;#深入理TCP-IP模型&quot; class=&quot;headerlink&quot; title=&quot;深入理TCP/IP模型&quot;&gt;&lt;/a&gt;深入理TCP/IP模型&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;网络模型最初是由各个互联网公司自己制定的，由于当时不规范，
      
    
    </summary>
    
    
      <category term="tcp" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/tcp/"/>
    
      <category term="http" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/http/"/>
    
      <category term="网路" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E7%BD%91%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>babel</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/25/babel/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/25/babel/</id>
    <published>2018-07-25T01:43:57.000Z</published>
    <updated>2018-09-05T06:30:33.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Babel 是一个广泛使用的 <code>ES6</code>转码器，可以将 ES6 代码转为 ES5 代码</p></blockquote><h3 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件.babelrc"></a>配置文件.babelrc</h3><p><code>presets</code>字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ES2015转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-es2015</span><br><span class="line"></span><br><span class="line"><span class="comment"># react转码规则</span></span><br><span class="line">$ npm install --save-dev babel-preset-react</span><br><span class="line"></span><br><span class="line"><span class="comment">### 最新的规则</span></span><br><span class="line">npm install --save-dev babel-preset-stage 0-3</span><br><span class="line"></span><br><span class="line"><span class="comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></span><br><span class="line">$ npm install --save-dev babel-preset-stage-0</span><br><span class="line">$ npm install --save-dev babel-preset-stage-1</span><br><span class="line">$ npm install --save-dev babel-preset-stage-2</span><br><span class="line">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure></p><h3 id="Plugin-Preset-排序"><a href="#Plugin-Preset-排序" class="headerlink" title="Plugin/Preset 排序"></a>Plugin/Preset 排序</h3><ul><li><code>Plugin</code> 会运行在 <code>Preset</code> 之前。</li><li><code>Plugin</code> 会从<code>第一个</code>开始顺序执行。</li><li><code>Preset</code> 的顺序则刚好相反(从最后一个逆序执行)。</li></ul><h3 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h3><p>如果某些代码需要调用<code>Babel</code>的<code>API</code>进行转码，就要使用<code>babel-core</code>模块,一般在<code>node代码</code>中使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> es6Code = <span class="string">'let x = n =&gt; n + 1'</span>;</span><br><span class="line"><span class="keyword">var</span> es5Code = <span class="built_in">require</span>(<span class="string">'babel-core'</span>)</span><br><span class="line">  .transform(es6Code, &#123;</span><br><span class="line">    presets: [<span class="string">'es2015'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  .code;</span><br><span class="line"><span class="comment">// '"use strict";\n\nvar x = function x(n) &#123;\n  return n + 1;\n&#125;;'</span></span><br></pre></td></tr></table></figure></p><h3 id="babel-cli"><a href="#babel-cli" class="headerlink" title="babel-cli"></a>babel-cli</h3><p>Babel提供<code>babel-cli工具</code>，用于命令行转码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转码结果输出到标准输出</span></span><br><span class="line">$ babel example.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转码结果写入一个文件</span></span><br><span class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></span><br><span class="line">$ babel example.js --out-file compiled.js</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ babel example.js -o compiled.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整个目录转码</span></span><br><span class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></span><br><span class="line">$ babel src --out-dir lib</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ babel src -d lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># -s 参数生成source map文件</span></span><br><span class="line">$ babel src -d lib -s</span><br></pre></td></tr></table></figure></p><h3 id="babel-node"><a href="#babel-node" class="headerlink" title="babel-node"></a>babel-node</h3><p>babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ babel-node es6.js</span><br></pre></td></tr></table></figure></p><h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h3><p><code>babel-register</code>模块改写<code>require</code>命令，为它加上一个钩子。此后，每当使用require加载<code>.js</code>、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.js"</span>);</span><br></pre></td></tr></table></figure></p><p>需要注意的是，<code>babel-register</code>只会对<code>require</code>命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p><hr><h3 id="babel-polyfill和runtime-Transform"><a href="#babel-polyfill和runtime-Transform" class="headerlink" title="babel-polyfill和runtime Transform"></a>babel-polyfill和runtime Transform</h3><p>Babel默认只转换新的<code>JavaScript句法</code>（syntax），而不转换新的<code>API</code>，比如<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy`</code>、Reflect<code>、</code>Symbol<code>、</code>Promise<code>等</code>全局对象<code>，以及一些定义在</code>全局对象<code>上的方法（比如</code>Object.assign`）都不会转码。</p><h4 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h4><ul><li>Generator</li><li>Set</li><li>Map</li><li>Array.from</li><li>Array.prototype.includes</li></ul><h4 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h4><ul><li>全局垫片(会污染全局变量)</li><li>为开发应用准备(平常项目)</li><li>包含<code>core-js</code> 和<code>regenerate-runtime</code> (提供<code>async</code> 语法编译后的运行时环境)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-polyfill --save</span><br><span class="line"><span class="keyword">import</span> <span class="string">"babel-polyfill"</span></span><br></pre></td></tr></table></figure><h4 id="runtime-Transform"><a href="#runtime-Transform" class="headerlink" title="runtime Transform"></a>runtime Transform</h4><ul><li>局部垫片(不会污染全局变量)</li><li>为开发框架准备(例如vue)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime --Save-dev</span><br><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure><p>.babelrc的配置<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [<span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">            <span class="attr">"targets"</span>:&#123;</span><br><span class="line">                <span class="attr">"browsers"</span>:[<span class="string">"&gt; 1%"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"@babel/transform-runtime"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="异同"><a href="#异同" class="headerlink" title="异同"></a>异同</h4><p>对于以下代码执行时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key=<span class="string">'babel'</span></span><br><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    [key]=<span class="string">'foo'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>babel默认会编译成以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123; <span class="attr">value</span>: value, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'babel'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = _defineProperty(&#123;&#125;, key, <span class="built_in">Object</span>.assign(&#123;&#125;, &#123; <span class="attr">key</span>: <span class="string">'foo'</span> &#125;));</span><br></pre></td></tr></table></figure></p><p><code>_defineProperty</code>的帮助函数，但是这个帮助函数仅仅在<code>当前模块</code>中生效，因此其他模块中如果用到了同样的语法，编译后就会出现大量的<code>重复代码</code>。</p><h5 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h5><p><code>babel-polyfill</code> 是直接在<code>原型链</code>上增加方法,所以会污染<code>全局变量</code>和<code>内置的对象原型</code></p><h5 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a>babel-runtime</h5><p><code>Babel</code>为了解决这个问题，提供了单独的包 <code>babel-runtime</code> 供编译模块复用<code>工具函数</code>。<br>启用插件<code>babel-plugin-transform-runtime</code> 后，Babel 就会使用<code>babel-runtime</code> 下的工具函数，转译代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _defineProperty2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/defineProperty'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _defineProperty3 = _interopRequireDefault(_defineProperty2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key = <span class="string">'babel'</span>;</span><br><span class="line"><span class="keyword">var</span> obj = (<span class="number">0</span>, _defineProperty3.default)(&#123;&#125;, key, <span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>但是</strong> <code>babel-runtime</code> 不能转码实例方法，比如这样的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'!!!'</span>.repeat(<span class="number">3</span>);</span><br><span class="line"><span class="string">'hello'</span>.includes(<span class="string">'h'</span>);</span><br></pre></td></tr></table></figure></p><hr><h3 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="babel-preset-env"></a>babel-preset-env</h3><ul><li><code>babel-preset-latest</code>： 支持现有所有ECMAScript版本的新特性，包括处于<code>stage 4</code>里的特性（已经确定的规范，将被添加到下个年度的）。</li><li><code>babel-preset-env</code> 功能类似 <code>babel-preset-latest</code>，优点是它会根据<code>目标环境</code>选择不支持的新特性来转译。</li><li><code>实验性</code>的属性（babel-preset-latest不支持的）需要手动安装配置相应的<code>plugins</code>或者<code>presets</code>。这样你再不需要 es20xx presets了。</li></ul><p><strong>问题：</strong> 为什么需要<code>env</code>?</p><h2 id="大部分现代浏览器已经支持ES6的generators了，但是如果你设置了babel-preset-es2015，generator函数还是会被转译成复杂的ES5代码。"><a href="#大部分现代浏览器已经支持ES6的generators了，但是如果你设置了babel-preset-es2015，generator函数还是会被转译成复杂的ES5代码。" class="headerlink" title="大部分现代浏览器已经支持ES6的generators了，但是如果你设置了babel-preset-es2015，generator函数还是会被转译成复杂的ES5代码。"></a>大部分现代浏览器已经支持ES6的<code>generators</code>了，但是如果你设置了<code>babel-preset-es2015</code>，<code>generator</code>函数还是会被转译成复杂的<code>ES5代码</code>。</h2><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><ul><li><code>modules</code>(string, 默认值: <code>&quot;commonjs&quot;</code>)<ul><li>将ES6模块语法转换为另一种模块类型，可选值:<ul><li>各种流行的模块化规范：”amd”、 “commonjs”、 “systemjs”、 “umd”</li><li>禁止转译：false</li></ul></li></ul></li><li><code>include</code>, <code>exclude</code> (Array of strings, 默认值: [])<ul><li>include 必须要转译的功能 (比如 覆盖有故障的本地功能)。跟单独启用相应插件是一样的。</li><li>exclude 禁止转译的功能</li></ul></li><li><code>debug</code> (boolean, default: false)<ul><li>以下内容都会用console.log输出 :<ul><li>目标环境</li><li>启用的transforms</li><li>启用的plugins</li><li>启用的polyfills</li></ul></li></ul></li><li><code>useBuiltIns</code> (boolean, 默认值: false)<ul><li><code>babel-preset-env</code>可以实现基于特定环境引入需要的<code>polyfill</code><ul><li><code>core-js</code>， 根据需要引入<code>ES5</code>，<code>ES6+</code>标准方法的实现<ul><li>安装 polyfill: npm install core-js –save</li><li>引入 polyfill: import “core-js”; </li></ul></li></ul></li><li><code>babel-polyfill</code> 包含<code>core-js</code> 和<code>regenerate-runtime</code>(提供 <code>async</code>语法编译后的运行时环境)。<ul><li>安装 polyfill: npm install babel-polyfill –save</li><li>引入 polyfill: import “babel-polyfill”;</li></ul></li><li>两种方法最终都会根据<code>环境</code>转译成特定的<code>polyfill</code>。 比如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/es7.string.pad-start"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/es7.string.pad-end"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/web.timers"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/web.immediate"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"core-js/modules/web.dom.iterable"</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>note:</strong>在整个应用里只能引入一次<code>polyfill</code>，可以在 “main” 模块里一次引入。<br><code>useBuiltIns</code> 会使浏览器下载的代码变少 (最终打包的文件大小变小了)。但是不会节约内存， 因为polyfill本身只会安装缺少的部分。</p><hr><p>基于TC39不同阶段的提案的<code>Presets</code> (stage-0，1，2，3等) 也是去除的候选，因为在这些statges中的标准是不断变化的。提案可以在2个月内改变。因此，直接引用一些实验性的<code>plugins</code>会是更好的选择。</p><ul><li>stage 0 <ul><li>transform-do-expressions</li><li>transform-function-bind</li></ul></li><li>stage 1<ul><li>transform-class-constructor-call (启用)</li><li>transform-export-extensions</li></ul></li><li>stage 2<ul><li>syntax-dynamic-import</li><li>transform-class-properties</li><li><code>transform-decorators</code> – 在提案更新中被禁用 (可以同时使用 legacy 转换,babel7默认添加到stage0中)</li></ul></li><li>stage 3<ul><li>transform-object-rest-spread</li><li>transform-async-generator-functions</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Babel 是一个广泛使用的 &lt;code&gt;ES6&lt;/code&gt;转码器，可以将 ES6 代码转为 ES5 代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置文件-babelrc&quot;&gt;&lt;a href=&quot;#配置文件-babelrc&quot; class
      
    
    </summary>
    
    
      <category term="node" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/node/"/>
    
      <category term="babel" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>mobx</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/25/mobx/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/25/mobx/</id>
    <published>2018-07-25T01:43:24.000Z</published>
    <updated>2018-09-05T06:30:33.781Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>promise详解</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/23/promise%E8%AF%A6%E8%A7%A3/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/23/promise详解/</id>
    <published>2018-07-23T03:17:40.000Z</published>
    <updated>2018-09-05T06:30:33.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异步与同步"><a href="#异步与同步" class="headerlink" title="异步与同步"></a>异步与同步</h3><ul><li><strong>异步</strong>：所谓”异步”，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段,比如，在我们烧水时可以干很多事情,当水烧开后在用水洗脸。这种不连续的执行，就叫做异步。</li><li><strong>同步</strong>:连续的执行,例如在烧水的过程中我们一直等待水烧开而不去干别的事情。</li></ul><h3 id="异步发展历史"><a href="#异步发展历史" class="headerlink" title="异步发展历史"></a>异步发展历史</h3><ul><li>callback</li><li>Promise</li><li>gengrator函数</li><li>async-await</li></ul><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>了解异步时，我们先了解一下<code>高阶函数</code>这个概念</p><ul><li><strong>高阶函数：</strong><ul><li>接收一个或者多个函数作为参数</li><li>输出一个函数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断数据类型 isType</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type,content</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content)===<span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="偏函数–-gt-预置参数"><a href="#偏函数–-gt-预置参数" class="headerlink" title="偏函数–&gt; 预置参数"></a>偏函数–&gt; 预置参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(content)===<span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> isString=isType(<span class="string">'String'</span>)</span><br><span class="line">isString(<span class="string">'哈哈'</span>)</span><br></pre></td></tr></table></figure><h4 id="预置函数作为参数"><a href="#预置函数作为参数" class="headerlink" title="预置函数作为参数"></a>预置函数作为参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loadsh _.after</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">times,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">--times==<span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        callback()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> eat=after(<span class="number">3</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'饱了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 当函数执行三次之后，调用回调函数</span></span><br><span class="line">eat()</span><br><span class="line">eat()</span><br><span class="line">eat()</span><br></pre></td></tr></table></figure><h3 id="callback"><a href="#callback" class="headerlink" title="callback"></a>callback</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">'zpfx'</span>;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>虽然callbake可以解决异步调用的问题,但是它也有诸多<strong>毛病</strong></p><ul><li>异步不支持<strong>try/catch</strong>,回调函数是在下一事件环中取出,所以一般在回调函数的第一个参数预置错误对象</li><li>回调<strong>地狱问题</strong>,异步多级依赖的情况下嵌套非常深，代码难以阅读的维护</li><li>多个异步在<strong>某一时刻</strong>获取所有异步的结果</li><li>结果不能通过<strong>return</strong>返回</li></ul><p>为了解决<strong>回调地狱</strong>问题，提出了Promise对象，并且后来加入了ES6标准。Promise本意是承诺，在程序中的意思就是承诺我过一段时间后会给你一个结果</p><h4 id="Promise的三种状态"><a href="#Promise的三种状态" class="headerlink" title="Promise的三种状态"></a>Promise的三种状态</h4><ul><li>Pending Promise对象实例创建时候的初始状态</li><li>Fulfilled 可以理解为成功的状态</li><li>Rejected 可以理解为失败的状态</li></ul><p>先用promise解决第一个问题”回调地狱”<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.txt =&gt; 2.txt</span></span><br><span class="line"><span class="comment">// 2.txt =&gt; 我很帅</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./1.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">        fs.readFile(data,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">            <span class="built_in">console</span>.log(data); <span class="comment">// 我很帅</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read();</span><br></pre></td></tr></table></figure></p><p><code>promise</code>实现就轻松多了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(file,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read(<span class="string">'./1.txt'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> read(data);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>当第一个then中返回一个promise，会将返回的promise的结果,传递到下一个then中。这就是比较著名的链式调用了</p></blockquote><h4 id="解决同步异步的返回结果，按照顺序"><a href="#解决同步异步的返回结果，按照顺序" class="headerlink" title="解决同步异步的返回结果，按照顺序"></a>解决同步异步的返回结果，按照顺序</h4><blockquote><p>我们将多个异步请求的结果在同一时间进行汇总</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">after</span>(<span class="params">time,callback</span>)</span>&#123;<span class="comment">//可以缓存函数 当达到条件时执行</span></span><br><span class="line">    <span class="keyword">let</span> arr=[];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        arr.push(data)</span><br><span class="line">        <span class="keyword">if</span>(--time===<span class="number">0</span>)&#123;</span><br><span class="line">            callback(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> out=after(<span class="number">3</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> resolve=<span class="function">(<span class="params">dir</span>)=&gt;</span>path.resolve(__dirname,dir)</span><br><span class="line"></span><br><span class="line">fs.readFile(resolve(<span class="string">"1.txt"</span>),<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">out(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(resolve(<span class="string">"2.txt"</span>),<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">out(data)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(resolve(<span class="string">"3.txt"</span>),<span class="string">"utf8"</span>,(err,data)=&gt;&#123;</span><br><span class="line">    out(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用promise实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fs.readFile(file,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="keyword">return</span> reject(err);</span><br><span class="line">            resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all([read(<span class="string">'1.txt'</span>),read(<span class="string">'2.txt'</span>)]).then(<span class="function">(<span class="params">[template,data]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;template,data&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 不管两个promise谁先完成，Promise.all 方法会按照数组里面的顺序将结果返回</span></span><br></pre></td></tr></table></figure></p><h4 id="promise-API-详解"><a href="#promise-API-详解" class="headerlink" title="promise API 详解"></a>promise API 详解</h4><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h5><blockquote><p>接受一个数组，数组内都是Promise实例,返回一个Promise实例，这个Promise实例的状态转移取决于参数的Promise实例的状态变化。当参数中任何一个实例处于resolve状态时，返回的Promise实例会变为resolve状态。如果参数中任意一个实例处于reject状态，返回的Promise实例变为reject状态。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race([read(<span class="string">'1.txt'</span>),read(<span class="string">'2.txt'</span>)]).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;template,data&#125;)</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h5><p>返回一个Promise实例，这个实例处于resolve状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">'成功'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><p>返回一个Promise实例，这个实例处于reject状态<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">'失败'</span>).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123; </span><br><span class="line">   <span class="built_in">console</span>.log(data); </span><br><span class="line">&#125;,err=&gt;&#123; </span><br><span class="line"><span class="built_in">console</span>.log(err); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>我们发现Promise已经可以解决了<strong>异步编程</strong>问题,但是仍然不够优雅,我们更希望编写异步代码能够像<code>同步</code>代码一样简洁。</p><ul><li>genrator 函数要用* 来比标识，yield(暂停产出 )</li><li>他会将函数分割出好多个部分，调用一次next就会向下继续执行</li><li>返回结果是一个<code>迭代器</code>，迭代器有一个next方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器的实现</span></span><br><span class="line"><span class="comment">// 迭代器 就是有next方法的，每次调用后都会返回一个done和value的属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">arrs</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index=<span class="number">0</span>;<span class="comment">//默认先迭代第一项</span></span><br><span class="line">    <span class="keyword">let</span> len=arrs.length;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                value:arrs[index],</span><br><span class="line">                done:index++===len?<span class="literal">true</span>:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it=read([<span class="string">'react'</span>,<span class="string">'vue'</span>,<span class="string">'angular'</span>]);</span><br><span class="line"><span class="keyword">let</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">let</span> &#123;done,value&#125;=it.next();</span><br><span class="line">flag=done;</span><br><span class="line"><span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;<span class="keyword">while</span>(!flag)</span><br></pre></td></tr></table></figure><h4 id="generator的用法"><a href="#generator的用法" class="headerlink" title="generator的用法"></a>generator的用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">read</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span>* (yiled <span class="string">'222'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> b=yiled <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b)</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> it=read()</span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'213'</span>))<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'100'</span>))<span class="comment">//200</span></span><br><span class="line"><span class="built_in">console</span>.log(it.next(<span class="string">'100'</span>))<span class="comment">//100</span></span><br></pre></td></tr></table></figure><ul><li>yield 后面跟着的是value的值</li><li>yield 等号前面的是我们当前调用next传进来的值</li><li>第一次next传值是无效的<br><img src="generator.png" alt="promise"></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  异步 generator 主要和promise搭配使用</span></span><br><span class="line"><span class="keyword">let</span> bluebird=<span class="built_in">require</span>(<span class="string">"bluebird"</span>)</span><br><span class="line"><span class="keyword">let</span> fs=<span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">let</span> path=<span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">let</span> resolve=<span class="function">(<span class="params">dir</span>)=&gt;</span>path.resolve(__dirname,dir)</span><br><span class="line"><span class="keyword">let</span> read=bluebird.promisify(fs.readFile)</span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">r</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> content1=<span class="keyword">yield</span> read(resolve(<span class="string">"./1.txt"</span>),<span class="string">"utf8"</span>);</span><br><span class="line">    <span class="keyword">let</span> content2=<span class="keyword">yield</span> read(resolve(content1),<span class="string">"utf8"</span>)</span><br><span class="line">    <span class="keyword">return</span> content2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用co这类的迭代库实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代库</span></span><br><span class="line"><span class="keyword">let</span> it=r();</span><br><span class="line">it.next().value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="comment">//2.txt</span></span><br><span class="line">    it.next(data).value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(it.next(data).value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="co"><a href="#co" class="headerlink" title="co"></a>co</h4><p>有node大神tj写的co库，可以自动的将generator进行迭代<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> co=<span class="built_in">require</span>(<span class="string">"co"</span>);</span><br><span class="line">co(r()).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>手写co库<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">it</span>)</span>&#123;<span class="comment">//it是迭代器</span></span><br><span class="line"><span class="comment">//返回promise</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 考虑到是异步调用，一般用递归实现，while实现的是同步调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;value,done&#125;=it.next(d);</span><br><span class="line">        <span class="keyword">if</span>(!done)&#123;</span><br><span class="line">            value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                next(data)</span><br><span class="line">            &#125;,reject)<span class="comment">//如果抛出异常，就立马抛出</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resolve(value)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="async-await-异步的终极实现"><a href="#async-await-异步的终极实现" class="headerlink" title="async/await - 异步的终极实现"></a>async/await - 异步的终极实现</h3><ul><li>async和await就是generator和co的语法糖,使用async关键字，你可以轻松地达成之前使用生成器和co函数所做到的工作</li><li>用async来修饰函数 async 需要陪await await只能跟<code>promise</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> contetn1=<span class="keyword">await</span> read(resolve(<span class="string">"1000.txt"</span>),<span class="string">"utf8"</span>)</span><br><span class="line">        <span class="keyword">let</span> contetn2=<span class="keyword">await</span> read(resolve(contetn1),<span class="string">"utf8"</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;<span class="comment">//如果出错会catch</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'e'</span>,e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//async函数返回的是promise </span></span><br><span class="line">r().then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="async-await解决的问题有哪些"><a href="#async-await解决的问题有哪些" class="headerlink" title="async/await解决的问题有哪些"></a>async/await解决的问题有哪些</h4><ul><li><ol><li>回调地狱</li></ol></li><li>2.并发执行异步，在同一时刻同步返回结果 promise.all</li><li>3.解决了返回值的问题</li><li>4.可以实现try/catch</li></ul><h3 id="Q库"><a href="#Q库" class="headerlink" title="Q库"></a>Q库</h3><blockquote><p>我们发现无论是generator还是async/await都离不开promise,我们在介绍几个有关promise的库。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要下载npm install q</span></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">Promise</span>=<span class="built_in">require</span>(<span class="string">"./Promise"</span>)</span><br><span class="line"><span class="keyword">let</span> Q=<span class="built_in">require</span>(<span class="string">"q"</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"fs"</span>).readFile(url,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)reject(err);</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">Q.fcall(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="blueBird"><a href="#blueBird" class="headerlink" title="blueBird"></a>blueBird</h3><blockquote><p>blueBird中有两个常用的方法一个叫<code>promisify</code>另一个叫<code>promisifyAll</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promisify</span>(<span class="params">fn</span>)</span>&#123;<span class="comment">//promise化 将回调函数在内部进行处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        fn(...arg,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)reject(err)</span><br><span class="line">            resolve(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">promisify(fs.readFile)(url,<span class="string">"utf8"</span>).then()</span><br></pre></td></tr></table></figure></p></blockquote><p>promisifyAll(fs)将所有的方法全部增加一个promise化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key]===<span class="string">'function'</span>)&#123;</span><br><span class="line">            obj[<span class="string">`<span class="subst">$&#123;key&#125;</span>Async`</span>]=promisify(obj[key])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">promisifyAll(fs)</span><br><span class="line">fs.readAsync(url,<span class="string">"utf8"</span>).then()</span><br></pre></td></tr></table></figure></p><h3 id="实现Promise"><a href="#实现Promise" class="headerlink" title="实现Promise"></a>实现Promise</h3><ul><li>Promise是一个类,需要传递一个函数,这个函数我们称之为执行函数,函数中有两个参数resolve和reject他们也是函数，调用resolve表示成功，调用reject表示失败</li><li>pending（进行中）、fulfilled（成功）、rejected（失败)</li><li>成功就不会再调用失败,默认状态是等待状态</li><li>then是原型上的一个方法接收两个参数分别是成功的回调和失败的回调</li><li>调用resolve后会执行成功的回调，调用reject后会执行失败的回调<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="异步Promise"><a href="#异步Promise" class="headerlink" title="异步Promise"></a>异步Promise</h4><p>在new Promise时内部可以写<code>异步代码</code>,并且产生的实例可以<code>then多次</code>,我们可以先将then中的成功的回调和失败的回调存到<code>数组内</code>，当成功时调用成功的数组即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">+   <span class="keyword">this</span>.onFulfilledcallback=[];<span class="comment">///存放成功的回调</span></span><br><span class="line">+   <span class="keyword">this</span>.onRejectedCallback = []; <span class="comment">//存放then失败的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">        <span class="comment">// 依次执行成功的回调</span></span><br><span class="line">+        <span class="keyword">this</span>.onFulfilledcallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">+            value()</span><br><span class="line">+        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">+        <span class="keyword">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">+            value()</span><br><span class="line">+        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">+        <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">+            onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">+        &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">+        <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">+              onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">+        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h4><p>promise实现链式调用,返回的并不是this而是一个<code>新的promise</code>,因为:如果当前promise已经进入<code>成功了的回调</code>，回调中发生了异常如果返回的仍是当前的promise那么状态无法更改到失败态！<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">   <span class="keyword">this</span>.onFulfilledcallback=[];<span class="comment">///存放成功的回调</span></span><br><span class="line">  <span class="keyword">this</span>.onRejectedCallback = []; <span class="comment">//存放then失败的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">        <span class="comment">// 依次执行成功的回调</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledcallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">+     <span class="keyword">let</span> promise2; <span class="comment">// promise2为then调用后返回的新promise</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">+        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">+             onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">+        &#125;)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">+        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">+              onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">+        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">+        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">              onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">+    &#125;</span><br><span class="line">+    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="resolvePromise"><a href="#resolvePromise" class="headerlink" title="resolvePromise"></a>resolvePromise</h3><p>then返回的结果可能是promise和value或者object<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>)</span>&#123;<span class="comment">//excutor是执行函数</span></span><br><span class="line">    <span class="keyword">this</span>.status=<span class="string">'pending'</span><span class="comment">//初始状态是pending</span></span><br><span class="line">    <span class="keyword">this</span>.value=<span class="literal">undefined</span>;<span class="comment">//存储成功的值</span></span><br><span class="line">    <span class="keyword">this</span>.reason=<span class="literal">undefined</span>;<span class="comment">//存储失败原因</span></span><br><span class="line">   <span class="keyword">this</span>.onFulfilledcallback=[];<span class="comment">///存放成功的回调</span></span><br><span class="line">  <span class="keyword">this</span>.onRejectedCallback = []; <span class="comment">//存放then失败的回调</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;<span class="comment">// 只有再pending才能转换成功态</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.value=value;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"fulfilled"</span>;</span><br><span class="line">        <span class="comment">// 依次执行成功的回调</span></span><br><span class="line">        <span class="keyword">this</span>.onFulfilledcallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">err</span>)</span>&#123; <span class="comment">// 只有再pending才能转换失败态</span></span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'pending'</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.reason=err;</span><br><span class="line">        <span class="keyword">this</span>.status=<span class="string">"rejected"</span>;</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">            value()</span><br><span class="line">        &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        excutor(resolve,reject)<span class="comment">// executor中需要传入resolve和reject</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">// 如果executor执行发生异常，表示当前的promise是失败态</span></span><br><span class="line">        reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> promise2; <span class="comment">// promise2为then调用后返回的新promise</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// x是then返回的结果 </span></span><br><span class="line">            <span class="keyword">let</span> x = onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">            resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">        &#125;)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">let</span> x= onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">           resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">let</span> x=onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">           resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">             <span class="keyword">let</span> x= onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">             resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">p2,x,resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 处理结果时,尽可能完善一些</span></span><br><span class="line">    <span class="comment">//如果then返回的值和p2是同一个值，规范要求抛出一个类型异常</span></span><br><span class="line">    <span class="keyword">if</span>(p2===x)&#123;</span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"循环引用"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">let</span> called;<span class="comment">//表示是否调用成功或者失败</span></span><br><span class="line">    <span class="comment">// 可能是一个thenable(带有then方法)对象</span></span><br><span class="line">    <span class="keyword">if</span>(x!==<span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x===<span class="string">'function'</span>))&#123;</span><br><span class="line">        <span class="comment">// x可能是promise</span></span><br><span class="line">        <span class="keyword">try</span>&#123;<span class="comment">// 如果用defineProperty定义的then方法获取时可能会有异常</span></span><br><span class="line">            <span class="keyword">let</span> then=x.then;</span><br><span class="line">            <span class="comment">// 如果then是函数,说明是promise,我们要让promse执行</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> then===<span class="string">'function'</span>)&#123;</span><br><span class="line">                then.call(x,<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                    called=<span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//y可能还是一个Promise，再去解析知道返回的是一个普通值</span></span><br><span class="line">                    resolvePromise(promise2,y,resolve,reject)</span><br><span class="line">                &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                    called=<span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//失败的回调</span></span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 不是函数,x就是一个普通的对象,直接成功即可</span></span><br><span class="line">                resolve(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                called=<span class="literal">true</span>;</span><br><span class="line">            reject(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 是普通值直接调用成功</span></span><br><span class="line">        resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="then中的方法异步执行"><a href="#then中的方法异步执行" class="headerlink" title="then中的方法异步执行"></a>then中的方法异步执行</h4><p>为了保证程序执行的一致性,规范中要求then中的方法必须在下一队列中执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then(<span class="function"><span class="keyword">function</span>(<span class="params">onFufilled,onRejected</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> promise2; <span class="comment">// promise2为then调用后返回的新promise</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'fulfilled'</span>)&#123;</span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// x是then返回的结果 </span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x = onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">             </span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">'rejected'</span>)&#123;</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">        promise2=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">             setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x= onRejected(<span class="keyword">this</span>.reason)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">         <span class="comment">// 如果是等待态,就将成功和失败的回调放到数组中</span></span><br><span class="line">        <span class="comment">//成功调用回调函数 </span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.onFulfilledcallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                </span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x = onFufilled(<span class="keyword">this</span>.value)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        <span class="comment">//失败调用回调函数 </span></span><br><span class="line">            <span class="keyword">this</span>.onRejectedCallback.push(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.value)</span><br><span class="line">                 resolvePromise(promise2,x,resolve,reject)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                     reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="值的穿透"><a href="#值的穿透" class="headerlink" title="值的穿透"></a>值的穿透</h4><p>在规范中定义then函数可以不传参,不传参默认会将成功的结果和失败的结果继续向下传递<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFufilled, onRejected</span>) </span>&#123;</span><br><span class="line">+    onFufilled = <span class="keyword">typeof</span> onFufilled === <span class="string">'function'</span>?onFufilled:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">+        <span class="keyword">return</span> value</span><br><span class="line">+    &#125;</span><br><span class="line">+    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>?onRejected:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">+        <span class="keyword">throw</span> err</span><br><span class="line">+    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="resolve接收promise"><a href="#resolve接收promise" class="headerlink" title="resolve接收promise"></a>resolve接收promise</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123; <span class="comment">// 调用resolve 会传入为什么成功</span></span><br><span class="line">+   <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">'object'</span> || <span class="keyword">typeof</span> value === <span class="string">'function'</span>)) &#123;</span><br><span class="line">+      <span class="keyword">if</span>(<span class="keyword">typeof</span> value.then === <span class="string">'function'</span>)&#123;</span><br><span class="line">+           <span class="comment">// 将当前promise成功的结果再次传回resolve函数中</span></span><br><span class="line">+           <span class="keyword">return</span> value.then(resolve,reject);</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br><span class="line">    <span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br></pre></td></tr></table></figure><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all=<span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arrs=[];<span class="comment">//返回的结果</span></span><br><span class="line">    <span class="keyword">let</span> ind=<span class="number">0</span>;<span class="comment">//表示成功了几次</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">processDate</span>(<span class="params">index,y</span>)</span>&#123;</span><br><span class="line">            arr[index]=y;</span><br><span class="line">            <span class="keyword">if</span>(++ind===promises.length)&#123;</span><br><span class="line">                resolve(arrs)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">          promises[i].then(<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">              processDate(i,y)</span><br><span class="line">          &#125;,reject)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promose-race"><a href="#Promose-race" class="headerlink" title="Promose.race"></a>Promose.race</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race=<span class="function"><span class="keyword">function</span>(<span class="params">promises</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;promises.length;i++)&#123;</span><br><span class="line">          promises[i].then(resolve,reject)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-resolve-1"><a href="#Promise-resolve-1" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-reject-1"><a href="#Promise-reject-1" class="headerlink" title="Promise.reject"></a>Promise.reject</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;异步与同步&quot;&gt;&lt;a href=&quot;#异步与同步&quot; class=&quot;headerlink&quot; title=&quot;异步与同步&quot;&gt;&lt;/a&gt;异步与同步&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;异步&lt;/strong&gt;：所谓”异步”，简单说就是一个任务分成两段，先执行第一段，然后转而
      
    
    </summary>
    
    
      <category term="promise" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/promise/"/>
    
      <category term="异步" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>css工程化</title>
    <link href="https://zhangyapeng0222.github.io/person_blogs/2018/07/10/css%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://zhangyapeng0222.github.io/person_blogs/2018/07/10/css工程化/</id>
    <published>2018-07-10T07:20:50.000Z</published>
    <updated>2018-09-05T06:30:33.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h3><ul><li>组织</li><li>优化</li><li>构建</li><li>维护</li></ul><h3 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a>postcss</h3><p><img src="postcss.jpg" alt="postcss"></p><ul><li>postcss本身只有<code>解析能力</code>–可以检测<code>css代码</code>是否正确</li><li>各种神奇的特性全靠插件</li><li>目前至少有200多个插件</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li><code>import</code> 模块合并</li><li><code>autoprefixier</code> 自动加前缀</li><li><code>cssnano</code> 压缩代码</li><li><code>cssnext</code> 使用css新特性</li><li><code>precss</code> 变量、mixin、循环等</li></ul><h3 id="BrowsersList"><a href="#BrowsersList" class="headerlink" title="BrowsersList"></a>BrowsersList</h3><p><img src="BrowserList.jpg" alt="BrowserList"></p><h3 id="cssnext"><a href="#cssnext" class="headerlink" title="cssnext"></a>cssnext</h3><p><img src="cssnext.jpg" alt="cssnext"></p><h3 id="precss"><a href="#precss" class="headerlink" title="precss"></a>precss</h3><ul><li>变量</li><li>条件</li><li>循环</li><li>mixin Extend</li><li>import</li><li>属性值引用</li></ul><h3 id="postcss支持的构建工具"><a href="#postcss支持的构建工具" class="headerlink" title="postcss支持的构建工具"></a>postcss支持的构建工具</h3><ul><li>cli 命令行工具</li><li>webpack post-loader</li><li>Gulp gulp-postcss</li><li>Grunt grunt-postcss</li><li>Rollup rollup-postcss</li><li>…</li></ul><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li>js是整个应用的核心入口</li><li>一切资源均有js管理依赖</li><li>一切资源均有webpack打包</li></ul><h3 id="webpack和css"><a href="#webpack和css" class="headerlink" title="webpack和css"></a>webpack和css</h3><ul><li>css-loader 将css变成js</li><li>style-loader将js样式插入head</li><li>extractTextPlugin 将css从js中提取出来</li><li>css modules 解决css命名冲突的问题</li><li>less-loader sass-loader 各类预处理器</li><li>postcss-loader Postcss处理</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>如何解决css模块化的问题<ul><li>Less Sass等css预处理器</li><li>Postcss插件（postcss-import/press等）</li><li>webpack处理css(css-loader+style-loader)</li></ul></li><li>postcss可以做什么？<ul><li>取决于插件可以做什么</li><li>autoprefixer cssnext precss 等 兼容性处理</li><li>import模块合并</li><li>css语法检查 兼容性检查</li><li>压缩文件</li></ul></li><li>css modules是做什么的，如何使用<ul><li>解决类名冲突问题</li><li>使用postcss或者webpack等构建工具进行编译</li><li>在HTML模板中使用编译过程产生的类名</li></ul></li><li>为什么使用js来引用、加载css<ul><li>js作为入口、管理资源有天然的优势</li><li>将组件结构、样式、行为封装到一起，增加内聚</li><li>可以做更多处理（webpack）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关注点&quot;&gt;&lt;a href=&quot;#关注点&quot; class=&quot;headerlink&quot; title=&quot;关注点&quot;&gt;&lt;/a&gt;关注点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;组织&lt;/li&gt;
&lt;li&gt;优化&lt;/li&gt;
&lt;li&gt;构建&lt;/li&gt;
&lt;li&gt;维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;po
      
    
    </summary>
    
    
      <category term="css" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css/"/>
    
      <category term="css工程化" scheme="https://zhangyapeng0222.github.io/person_blogs/tags/css%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
</feed>
